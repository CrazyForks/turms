// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request/user/query_nearby_users_request.proto

#include "turms/client/model/proto/request/user/query_nearby_users_request.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {
        template <typename>
PROTOBUF_CONSTEXPR QueryNearbyUsersRequest::QueryNearbyUsersRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.latitude_)*/ 0,
      /*decltype(_impl_.longitude_)*/ 0,
      /*decltype(_impl_.max_count_)*/ 0,
      /*decltype(_impl_.max_distance_)*/ 0,
      /*decltype(_impl_.with_coordinates_)*/ false,
      /*decltype(_impl_.with_distance_)*/ false,
      /*decltype(_impl_.with_user_info_)*/ false,
    } {}
struct QueryNearbyUsersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNearbyUsersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNearbyUsersRequestDefaultTypeInternal() {}
  union {
    QueryNearbyUsersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNearbyUsersRequestDefaultTypeInternal _QueryNearbyUsersRequest_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class QueryNearbyUsersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryNearbyUsersRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_._has_bits_);
  static void set_has_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_with_coordinates(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_with_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_with_user_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

QueryNearbyUsersRequest::QueryNearbyUsersRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.QueryNearbyUsersRequest)
}
QueryNearbyUsersRequest::QueryNearbyUsersRequest(const QueryNearbyUsersRequest& from)
    : ::google::protobuf::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.QueryNearbyUsersRequest)
}
inline void QueryNearbyUsersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.latitude_){0},
      decltype(_impl_.longitude_){0},
      decltype(_impl_.max_count_){0},
      decltype(_impl_.max_distance_){0},
      decltype(_impl_.with_coordinates_){false},
      decltype(_impl_.with_distance_){false},
      decltype(_impl_.with_user_info_){false},
  };
}
QueryNearbyUsersRequest::~QueryNearbyUsersRequest() {
  // @@protoc_insertion_point(destructor:turms.client.model.proto.QueryNearbyUsersRequest)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void QueryNearbyUsersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void QueryNearbyUsersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void QueryNearbyUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:turms.client.model.proto.QueryNearbyUsersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.max_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.with_user_info_) -
        reinterpret_cast<char*>(&_impl_.max_count_)) + sizeof(_impl_.with_user_info_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* QueryNearbyUsersRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> QueryNearbyUsersRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_QueryNearbyUsersRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float latitude = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.latitude_)}},
    // float longitude = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.longitude_)}},
    // optional int32 max_count = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 0, 0, PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.max_count_)}},
    // optional int32 max_distance = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 1, 0, PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.max_distance_)}},
    // optional bool with_coordinates = 5;
    {::_pbi::TcParser::FastV8S1,
     {40, 2, 0, PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.with_coordinates_)}},
    // optional bool with_distance = 6;
    {::_pbi::TcParser::FastV8S1,
     {48, 3, 0, PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.with_distance_)}},
    // optional bool with_user_info = 7;
    {::_pbi::TcParser::FastV8S1,
     {56, 4, 0, PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.with_user_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float latitude = 1;
    {PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.latitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float longitude = 2;
    {PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.longitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // optional int32 max_count = 3;
    {PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.max_count_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 max_distance = 4;
    {PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.max_distance_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool with_coordinates = 5;
    {PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.with_coordinates_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool with_distance = 6;
    {PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.with_distance_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool with_user_info = 7;
    {PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.with_user_info_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* QueryNearbyUsersRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.QueryNearbyUsersRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  ::uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_latitude(), target);
  }

  // float longitude = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  ::uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_longitude(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 max_count = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_max_count(), target);
  }

  // optional int32 max_distance = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_max_distance(), target);
  }

  // optional bool with_coordinates = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_with_coordinates(), target);
  }

  // optional bool with_distance = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_with_distance(), target);
  }

  // optional bool with_user_info = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_with_user_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.QueryNearbyUsersRequest)
  return target;
}

::size_t QueryNearbyUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.QueryNearbyUsersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  ::uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 5;
  }

  // float longitude = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  ::uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 5;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 max_count = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_count());
    }

    // optional int32 max_distance = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_distance());
    }

    // optional bool with_coordinates = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool with_distance = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool with_user_info = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryNearbyUsersRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const QueryNearbyUsersRequest*>(
      &from));
}

void QueryNearbyUsersRequest::MergeFrom(const QueryNearbyUsersRequest& from) {
  QueryNearbyUsersRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.QueryNearbyUsersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  ::uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  ::uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_count_ = from._impl_.max_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_distance_ = from._impl_.max_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.with_coordinates_ = from._impl_.with_coordinates_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.with_distance_ = from._impl_.with_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.with_user_info_ = from._impl_.with_user_info_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void QueryNearbyUsersRequest::CopyFrom(const QueryNearbyUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.QueryNearbyUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QueryNearbyUsersRequest::IsInitialized() const {
  return true;
}

void QueryNearbyUsersRequest::InternalSwap(QueryNearbyUsersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.with_user_info_)
      + sizeof(QueryNearbyUsersRequest::_impl_.with_user_info_)
      - PROTOBUF_FIELD_OFFSET(QueryNearbyUsersRequest, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

std::string QueryNearbyUsersRequest::GetTypeName() const {
  return "turms.client.model.proto.QueryNearbyUsersRequest";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
