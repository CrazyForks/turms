// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request/user/relationship/query_relationships_request.proto
// Protobuf C++ Version: 5.26.1

#include "turms/client/model/proto/request/user/relationship/query_relationships_request.pb.h"

#include <algorithm>

#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/wire_format_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {

inline constexpr QueryRelationshipsRequest::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      user_ids_{},
      _user_ids_cached_byte_size_{0},
      group_indexes_{},
      _group_indexes_cached_byte_size_{0},
      last_updated_date_{::int64_t{0}},
      blocked_{false} {
}

template <typename>
PROTOBUF_CONSTEXPR QueryRelationshipsRequest::QueryRelationshipsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {
}
struct QueryRelationshipsRequestDefaultTypeInternal {
    PROTOBUF_CONSTEXPR QueryRelationshipsRequestDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {
    }
    ~QueryRelationshipsRequestDefaultTypeInternal() {
    }
    union {
        QueryRelationshipsRequest _instance;
    };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    QueryRelationshipsRequestDefaultTypeInternal _QueryRelationshipsRequest_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class QueryRelationshipsRequest::_Internal {
   public:
    using HasBits = decltype(std::declval<QueryRelationshipsRequest>()._impl_._has_bits_);
    static constexpr ::int32_t kHasBitsOffset =
        8 * PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_._has_bits_);
};

QueryRelationshipsRequest::QueryRelationshipsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
    SharedCtor(arena);
    // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.QueryRelationshipsRequest)
}
inline PROTOBUF_NDEBUG_INLINE QueryRelationshipsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena,
    const Impl_& from)
    : _has_bits_{from._has_bits_},
      _cached_size_{0},
      user_ids_{visibility, arena, from.user_ids_},
      _user_ids_cached_byte_size_{0},
      group_indexes_{visibility, arena, from.group_indexes_},
      _group_indexes_cached_byte_size_{0} {
}

QueryRelationshipsRequest::QueryRelationshipsRequest(::google::protobuf::Arena* arena,
                                                     const QueryRelationshipsRequest& from)
    : ::google::protobuf::MessageLite(arena) {
    QueryRelationshipsRequest* const _this = this;
    (void)_this;
    _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
    new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
    ::memcpy(
        reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, last_updated_date_),
        reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, last_updated_date_),
        offsetof(Impl_, blocked_) - offsetof(Impl_, last_updated_date_) + sizeof(Impl_::blocked_));

    // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.QueryRelationshipsRequest)
}
inline PROTOBUF_NDEBUG_INLINE QueryRelationshipsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena)
    : _cached_size_{0},
      user_ids_{visibility, arena},
      _user_ids_cached_byte_size_{0},
      group_indexes_{visibility, arena},
      _group_indexes_cached_byte_size_{0} {
}

inline void QueryRelationshipsRequest::SharedCtor(::_pb::Arena* arena) {
    new (&_impl_) Impl_(internal_visibility(), arena);
    ::memset(
        reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, last_updated_date_),
        0,
        offsetof(Impl_, blocked_) - offsetof(Impl_, last_updated_date_) + sizeof(Impl_::blocked_));
}
QueryRelationshipsRequest::~QueryRelationshipsRequest() {
    // @@protoc_insertion_point(destructor:turms.client.model.proto.QueryRelationshipsRequest)
    _internal_metadata_.Delete<std::string>();
    SharedDtor();
}
inline void QueryRelationshipsRequest::SharedDtor() {
    ABSL_DCHECK(GetArena() == nullptr);
    _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData* QueryRelationshipsRequest::GetClassData() const {
    struct ClassData_ {
        ::google::protobuf::MessageLite::ClassData header;
        char type_name[51];
    };

    PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
        {
            nullptr,  // OnDemandRegisterArenaDtor
            PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_._cached_size_),
            true,
        },
        "turms.client.model.proto.QueryRelationshipsRequest",
    };

    return &_data_.header;
}
PROTOBUF_NOINLINE void QueryRelationshipsRequest::Clear() {
    // @@protoc_insertion_point(message_clear_start:turms.client.model.proto.QueryRelationshipsRequest)
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.user_ids_.Clear();
    _impl_.group_indexes_.Clear();
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
        ::memset(&_impl_.last_updated_date_,
                 0,
                 static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.blocked_) -
                                       reinterpret_cast<char*>(&_impl_.last_updated_date_)) +
                     sizeof(_impl_.blocked_));
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<std::string>();
}

const char* QueryRelationshipsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
    ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
    return ptr;
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 4, 0, 0, 2>
    QueryRelationshipsRequest::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_._has_bits_),
            0,  // no _extensions_
            4,
            24,  // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967280,  // skipmap
            offsetof(decltype(_table_), field_entries),
            4,                                         // num_field_entries
            0,                                         // num_aux_entries
            offsetof(decltype(_table_), field_names),  // no aux_entries
            &_QueryRelationshipsRequest_default_instance_._instance,
            ::_pbi::TcParser::GenericFallbackLite,  // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::QueryRelationshipsRequest>(),  // to_prefetch
#endif  // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // optional int64 last_updated_date = 4;
            {::_pbi::TcParser::FastV64S1,
             {32,
              0,
              0,
              PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.last_updated_date_)}},
            // repeated int64 user_ids = 1;
            {::_pbi::TcParser::FastV64P1,
             {10, 63, 0, PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.user_ids_)}},
            // optional bool blocked = 2;
            {::_pbi::TcParser::FastV8S1,
             {16, 1, 0, PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.blocked_)}},
            // repeated int32 group_indexes = 3;
            {::_pbi::TcParser::FastV32P1,
             {26, 63, 0, PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.group_indexes_)}},
        }},
        {{65535, 65535}},
        {{
            // repeated int64 user_ids = 1;
            {PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.user_ids_),
             -1,
             0,
             (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
            // optional bool blocked = 2;
            {PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.blocked_),
             _Internal::kHasBitsOffset + 1,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kBool)},
            // repeated int32 group_indexes = 3;
            {PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.group_indexes_),
             -1,
             0,
             (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
            // optional int64 last_updated_date = 4;
            {PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.last_updated_date_),
             _Internal::kHasBitsOffset + 0,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
        }},
        // no aux_entries
        {{}},
};

::uint8_t* QueryRelationshipsRequest::_InternalSerialize(
    ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.QueryRelationshipsRequest)
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated int64 user_ids = 1;
    {
        int byte_size = _impl_._user_ids_cached_byte_size_.Get();
        if (byte_size > 0) {
            target = stream->WriteInt64Packed(1, _internal_user_ids(), byte_size, target);
        }
    }

    cached_has_bits = _impl_._has_bits_[0];
    // optional bool blocked = 2;
    if (cached_has_bits & 0x00000002u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_blocked(), target);
    }

    // repeated int32 group_indexes = 3;
    {
        int byte_size = _impl_._group_indexes_cached_byte_size_.Get();
        if (byte_size > 0) {
            target = stream->WriteInt32Packed(3, _internal_group_indexes(), byte_size, target);
        }
    }

    // optional int64 last_updated_date = 4;
    if (cached_has_bits & 0x00000001u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
            stream, this->_internal_last_updated_date(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = stream->WriteRaw(
            _internal_metadata_
                .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                .data(),
            static_cast<int>(
                _internal_metadata_
                    .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                    .size()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.QueryRelationshipsRequest)
    return target;
}

::size_t QueryRelationshipsRequest::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.QueryRelationshipsRequest)
    ::size_t total_size = 0;

    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated int64 user_ids = 1;
    {
        std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(this->_internal_user_ids());
        _impl_._user_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
        std::size_t tag_size =
            data_size == 0 ? 0
                           : 1 + ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
        total_size += tag_size + data_size;
    }
    // repeated int32 group_indexes = 3;
    {
        std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(this->_internal_group_indexes());
        _impl_._group_indexes_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
        std::size_t tag_size =
            data_size == 0 ? 0
                           : 1 + ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
        total_size += tag_size + data_size;
    }
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
        // optional int64 last_updated_date = 4;
        if (cached_has_bits & 0x00000001u) {
            total_size +=
                ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_updated_date());
        }

        // optional bool blocked = 2;
        if (cached_has_bits & 0x00000002u) {
            total_size += 2;
        }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        total_size += _internal_metadata_
                          .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                          .size();
    }
    _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
    return total_size;
}

void QueryRelationshipsRequest::CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) {
    MergeFrom(*::_pbi::DownCast<const QueryRelationshipsRequest*>(&from));
}

void QueryRelationshipsRequest::MergeFrom(const QueryRelationshipsRequest& from) {
    QueryRelationshipsRequest* const _this = this;
    // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.QueryRelationshipsRequest)
    ABSL_DCHECK_NE(&from, _this);
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    _this->_internal_mutable_user_ids()->MergeFrom(from._internal_user_ids());
    _this->_internal_mutable_group_indexes()->MergeFrom(from._internal_group_indexes());
    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
        if (cached_has_bits & 0x00000001u) {
            _this->_impl_.last_updated_date_ = from._impl_.last_updated_date_;
        }
        if (cached_has_bits & 0x00000002u) {
            _this->_impl_.blocked_ = from._impl_.blocked_;
        }
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
    _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void QueryRelationshipsRequest::CopyFrom(const QueryRelationshipsRequest& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.QueryRelationshipsRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

PROTOBUF_NOINLINE bool QueryRelationshipsRequest::IsInitialized() const {
    return true;
}

void QueryRelationshipsRequest::InternalSwap(QueryRelationshipsRequest* PROTOBUF_RESTRICT other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
    _impl_.group_indexes_.InternalSwap(&other->_impl_.group_indexes_);
    ::google::protobuf::internal::memswap<
        PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.blocked_) +
        sizeof(QueryRelationshipsRequest::_impl_.blocked_) -
        PROTOBUF_FIELD_OFFSET(QueryRelationshipsRequest, _impl_.last_updated_date_)>(
        reinterpret_cast<char*>(&_impl_.last_updated_date_),
        reinterpret_cast<char*>(&other->_impl_.last_updated_date_));
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"