// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/group/group_join_questions_answer_result.proto

#include "turms/client/model/proto/model/group/group_join_questions_answer_result.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {
        template <typename>
PROTOBUF_CONSTEXPR GroupJoinQuestionsAnswerResult::GroupJoinQuestionsAnswerResult(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.question_ids_)*/ {},
      /* _impl_._question_ids_cached_byte_size_ = */ {0},
      /*decltype(_impl_.score_)*/ 0,
      /*decltype(_impl_.joined_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct GroupJoinQuestionsAnswerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupJoinQuestionsAnswerResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupJoinQuestionsAnswerResultDefaultTypeInternal() {}
  union {
    GroupJoinQuestionsAnswerResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupJoinQuestionsAnswerResultDefaultTypeInternal _GroupJoinQuestionsAnswerResult_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class GroupJoinQuestionsAnswerResult::_Internal {
 public:
};

GroupJoinQuestionsAnswerResult::GroupJoinQuestionsAnswerResult(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.GroupJoinQuestionsAnswerResult)
}
GroupJoinQuestionsAnswerResult::GroupJoinQuestionsAnswerResult(const GroupJoinQuestionsAnswerResult& from) : ::google::protobuf::MessageLite() {
  GroupJoinQuestionsAnswerResult* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.question_ids_){from._impl_.question_ids_},
      /* _impl_._question_ids_cached_byte_size_ = */ {0},
      decltype(_impl_.score_){},
      decltype(_impl_.joined_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.joined_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.joined_));

  // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.GroupJoinQuestionsAnswerResult)
}
inline void GroupJoinQuestionsAnswerResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.question_ids_){arena},
      /* _impl_._question_ids_cached_byte_size_ = */ {0},
      decltype(_impl_.score_){0},
      decltype(_impl_.joined_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
GroupJoinQuestionsAnswerResult::~GroupJoinQuestionsAnswerResult() {
  // @@protoc_insertion_point(destructor:turms.client.model.proto.GroupJoinQuestionsAnswerResult)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void GroupJoinQuestionsAnswerResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.question_ids_.~RepeatedField();
}
void GroupJoinQuestionsAnswerResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GroupJoinQuestionsAnswerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:turms.client.model.proto.GroupJoinQuestionsAnswerResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_question_ids()->Clear();
  ::memset(&_impl_.score_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.joined_) -
      reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.joined_));
  _internal_metadata_.Clear<std::string>();
}

const char* GroupJoinQuestionsAnswerResult::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GroupJoinQuestionsAnswerResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GroupJoinQuestionsAnswerResult_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 score = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GroupJoinQuestionsAnswerResult, _impl_.score_)}},
    // repeated int64 question_ids = 2;
    {::_pbi::TcParser::FastV64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GroupJoinQuestionsAnswerResult, _impl_.question_ids_)}},
    // bool joined = 3;
    {::_pbi::TcParser::FastV8S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GroupJoinQuestionsAnswerResult, _impl_.joined_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 score = 1;
    {PROTOBUF_FIELD_OFFSET(GroupJoinQuestionsAnswerResult, _impl_.score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int64 question_ids = 2;
    {PROTOBUF_FIELD_OFFSET(GroupJoinQuestionsAnswerResult, _impl_.question_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // bool joined = 3;
    {PROTOBUF_FIELD_OFFSET(GroupJoinQuestionsAnswerResult, _impl_.joined_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* GroupJoinQuestionsAnswerResult::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.GroupJoinQuestionsAnswerResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 score = 1;
  if (this->_internal_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_score(), target);
  }

  // repeated int64 question_ids = 2;
  {
    int byte_size = _impl_._question_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(2, _internal_question_ids(),
                                                 byte_size, target);
    }
  }

  // bool joined = 3;
  if (this->_internal_joined() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_joined(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.GroupJoinQuestionsAnswerResult)
  return target;
}

::size_t GroupJoinQuestionsAnswerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.GroupJoinQuestionsAnswerResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 question_ids = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_question_ids())
    ;
    _impl_._question_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 score = 1;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_score());
  }

  // bool joined = 3;
  if (this->_internal_joined() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupJoinQuestionsAnswerResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GroupJoinQuestionsAnswerResult*>(
      &from));
}

void GroupJoinQuestionsAnswerResult::MergeFrom(const GroupJoinQuestionsAnswerResult& from) {
  GroupJoinQuestionsAnswerResult* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.GroupJoinQuestionsAnswerResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_question_ids()->MergeFrom(from._internal_question_ids());
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_joined() != 0) {
    _this->_internal_set_joined(from._internal_joined());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GroupJoinQuestionsAnswerResult::CopyFrom(const GroupJoinQuestionsAnswerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.GroupJoinQuestionsAnswerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GroupJoinQuestionsAnswerResult::IsInitialized() const {
  return true;
}

void GroupJoinQuestionsAnswerResult::InternalSwap(GroupJoinQuestionsAnswerResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.question_ids_.InternalSwap(&other->_impl_.question_ids_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupJoinQuestionsAnswerResult, _impl_.joined_)
      + sizeof(GroupJoinQuestionsAnswerResult::_impl_.joined_)
      - PROTOBUF_FIELD_OFFSET(GroupJoinQuestionsAnswerResult, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

std::string GroupJoinQuestionsAnswerResult::GetTypeName() const {
  return "turms.client.model.proto.GroupJoinQuestionsAnswerResult";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
