// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/file/image_file.proto
// Protobuf C++ Version: 5.26.1

#include "turms/client/model/proto/model/file/image_file.pb.h"

#include <algorithm>

#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/wire_format_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {

inline constexpr ImageFile_Description::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      url_(&::google::protobuf::internal::fixed_address_empty_string,
           ::_pbi::ConstantInitialized()),
      original_{false},
      image_size_{0},
      file_size_{0} {
}

template <typename>
PROTOBUF_CONSTEXPR ImageFile_Description::ImageFile_Description(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {
}
struct ImageFile_DescriptionDefaultTypeInternal {
    PROTOBUF_CONSTEXPR ImageFile_DescriptionDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {
    }
    ~ImageFile_DescriptionDefaultTypeInternal() {
    }
    union {
        ImageFile_Description _instance;
    };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    ImageFile_DescriptionDefaultTypeInternal _ImageFile_Description_default_instance_;

inline constexpr ImageFile::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      data_(&::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
      description_{nullptr} {
}

template <typename>
PROTOBUF_CONSTEXPR ImageFile::ImageFile(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {
}
struct ImageFileDefaultTypeInternal {
    PROTOBUF_CONSTEXPR ImageFileDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {
    }
    ~ImageFileDefaultTypeInternal() {
    }
    union {
        ImageFile _instance;
    };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    ImageFileDefaultTypeInternal _ImageFile_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class ImageFile_Description::_Internal {
   public:
    using HasBits = decltype(std::declval<ImageFile_Description>()._impl_._has_bits_);
    static constexpr ::int32_t kHasBitsOffset =
        8 * PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_._has_bits_);
};

ImageFile_Description::ImageFile_Description(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
    SharedCtor(arena);
    // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.ImageFile.Description)
}
inline PROTOBUF_NDEBUG_INLINE ImageFile_Description::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena,
    const Impl_& from)
    : _has_bits_{from._has_bits_},
      _cached_size_{0},
      url_(arena, from.url_) {
}

ImageFile_Description::ImageFile_Description(::google::protobuf::Arena* arena,
                                             const ImageFile_Description& from)
    : ::google::protobuf::MessageLite(arena) {
    ImageFile_Description* const _this = this;
    (void)_this;
    _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
    new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
    ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, original_),
             reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, original_),
             offsetof(Impl_, file_size_) - offsetof(Impl_, original_) + sizeof(Impl_::file_size_));

    // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.ImageFile.Description)
}
inline PROTOBUF_NDEBUG_INLINE ImageFile_Description::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena)
    : _cached_size_{0},
      url_(arena) {
}

inline void ImageFile_Description::SharedCtor(::_pb::Arena* arena) {
    new (&_impl_) Impl_(internal_visibility(), arena);
    ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, original_),
             0,
             offsetof(Impl_, file_size_) - offsetof(Impl_, original_) + sizeof(Impl_::file_size_));
}
ImageFile_Description::~ImageFile_Description() {
    // @@protoc_insertion_point(destructor:turms.client.model.proto.ImageFile.Description)
    _internal_metadata_.Delete<std::string>();
    SharedDtor();
}
inline void ImageFile_Description::SharedDtor() {
    ABSL_DCHECK(GetArena() == nullptr);
    _impl_.url_.Destroy();
    _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData* ImageFile_Description::GetClassData() const {
    struct ClassData_ {
        ::google::protobuf::MessageLite::ClassData header;
        char type_name[47];
    };

    PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
        {
            nullptr,  // OnDemandRegisterArenaDtor
            PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_._cached_size_),
            true,
        },
        "turms.client.model.proto.ImageFile.Description",
    };

    return &_data_.header;
}
PROTOBUF_NOINLINE void ImageFile_Description::Clear() {
    // @@protoc_insertion_point(message_clear_start:turms.client.model.proto.ImageFile.Description)
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.url_.ClearToEmpty();
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
        ::memset(&_impl_.original_,
                 0,
                 static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.file_size_) -
                                       reinterpret_cast<char*>(&_impl_.original_)) +
                     sizeof(_impl_.file_size_));
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<std::string>();
}

const char* ImageFile_Description::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
    ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
    return ptr;
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 4, 0, 58, 2>
    ImageFile_Description::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_._has_bits_),
            0,  // no _extensions_
            4,
            24,  // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967280,  // skipmap
            offsetof(decltype(_table_), field_entries),
            4,                                         // num_field_entries
            0,                                         // num_aux_entries
            offsetof(decltype(_table_), field_names),  // no aux_entries
            &_ImageFile_Description_default_instance_._instance,
            ::_pbi::TcParser::GenericFallbackLite,  // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<
                ::turms::client::model::proto::ImageFile_Description>(),  // to_prefetch
#endif  // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // optional int32 file_size = 4;
            {::_pbi::TcParser::FastV32S1,
             {32, 2, 0, PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.file_size_)}},
            // string url = 1;
            {::_pbi::TcParser::FastUS1,
             {10, 63, 0, PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.url_)}},
            // optional bool original = 2;
            {::_pbi::TcParser::FastV8S1,
             {16, 0, 0, PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.original_)}},
            // optional int32 image_size = 3;
            {::_pbi::TcParser::FastV32S1,
             {24, 1, 0, PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.image_size_)}},
        }},
        {{65535, 65535}},
        {{
            // string url = 1;
            {PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.url_),
             -1,
             0,
             (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // optional bool original = 2;
            {PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.original_),
             _Internal::kHasBitsOffset + 0,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kBool)},
            // optional int32 image_size = 3;
            {PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.image_size_),
             _Internal::kHasBitsOffset + 1,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // optional int32 file_size = 4;
            {PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.file_size_),
             _Internal::kHasBitsOffset + 2,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
        }},
        // no aux_entries
        {{"\56\3\0\0\0\0\0\0"
          "turms.client.model.proto.ImageFile.Description"
          "url"}},
};

::uint8_t* ImageFile_Description::_InternalSerialize(
    ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.ImageFile.Description)
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // string url = 1;
    if (!this->_internal_url().empty()) {
        const std::string& _s = this->_internal_url();
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            _s.data(),
            static_cast<int>(_s.length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "turms.client.model.proto.ImageFile.Description.url");
        target = stream->WriteStringMaybeAliased(1, _s, target);
    }

    cached_has_bits = _impl_._has_bits_[0];
    // optional bool original = 2;
    if (cached_has_bits & 0x00000001u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_original(), target);
    }

    // optional int32 image_size = 3;
    if (cached_has_bits & 0x00000002u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
            stream, this->_internal_image_size(), target);
    }

    // optional int32 file_size = 4;
    if (cached_has_bits & 0x00000004u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this->_internal_file_size(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = stream->WriteRaw(
            _internal_metadata_
                .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                .data(),
            static_cast<int>(
                _internal_metadata_
                    .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                    .size()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.ImageFile.Description)
    return target;
}

::size_t ImageFile_Description::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.ImageFile.Description)
    ::size_t total_size = 0;

    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string url = 1;
    if (!this->_internal_url().empty()) {
        total_size +=
            1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->_internal_url());
    }

    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
        // optional bool original = 2;
        if (cached_has_bits & 0x00000001u) {
            total_size += 2;
        }

        // optional int32 image_size = 3;
        if (cached_has_bits & 0x00000002u) {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_size());
        }

        // optional int32 file_size = 4;
        if (cached_has_bits & 0x00000004u) {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_size());
        }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        total_size += _internal_metadata_
                          .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                          .size();
    }
    _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
    return total_size;
}

void ImageFile_Description::CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) {
    MergeFrom(*::_pbi::DownCast<const ImageFile_Description*>(&from));
}

void ImageFile_Description::MergeFrom(const ImageFile_Description& from) {
    ImageFile_Description* const _this = this;
    // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.ImageFile.Description)
    ABSL_DCHECK_NE(&from, _this);
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (!from._internal_url().empty()) {
        _this->_internal_set_url(from._internal_url());
    }
    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
        if (cached_has_bits & 0x00000001u) {
            _this->_impl_.original_ = from._impl_.original_;
        }
        if (cached_has_bits & 0x00000002u) {
            _this->_impl_.image_size_ = from._impl_.image_size_;
        }
        if (cached_has_bits & 0x00000004u) {
            _this->_impl_.file_size_ = from._impl_.file_size_;
        }
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
    _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ImageFile_Description::CopyFrom(const ImageFile_Description& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.ImageFile.Description)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImageFile_Description::IsInitialized() const {
    return true;
}

void ImageFile_Description::InternalSwap(ImageFile_Description* PROTOBUF_RESTRICT other) {
    using std::swap;
    auto* arena = GetArena();
    ABSL_DCHECK_EQ(arena, other->GetArena());
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
    ::google::protobuf::internal::memswap<
        PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.file_size_) +
        sizeof(ImageFile_Description::_impl_.file_size_) -
        PROTOBUF_FIELD_OFFSET(ImageFile_Description, _impl_.original_)>(
        reinterpret_cast<char*>(&_impl_.original_),
        reinterpret_cast<char*>(&other->_impl_.original_));
}

// ===================================================================

class ImageFile::_Internal {
   public:
    using HasBits = decltype(std::declval<ImageFile>()._impl_._has_bits_);
    static constexpr ::int32_t kHasBitsOffset =
        8 * PROTOBUF_FIELD_OFFSET(ImageFile, _impl_._has_bits_);
};

ImageFile::ImageFile(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
    SharedCtor(arena);
    // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.ImageFile)
}
inline PROTOBUF_NDEBUG_INLINE ImageFile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena,
    const Impl_& from)
    : _has_bits_{from._has_bits_},
      _cached_size_{0},
      data_(arena, from.data_) {
}

ImageFile::ImageFile(::google::protobuf::Arena* arena, const ImageFile& from)
    : ::google::protobuf::MessageLite(arena) {
    ImageFile* const _this = this;
    (void)_this;
    _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
    new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
    ::uint32_t cached_has_bits = _impl_._has_bits_[0];
    _impl_.description_ = (cached_has_bits & 0x00000002u)
                              ? ::google::protobuf::MessageLite::CopyConstruct<
                                    ::turms::client::model::proto::ImageFile_Description>(
                                    arena, *from._impl_.description_)
                              : nullptr;

    // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.ImageFile)
}
inline PROTOBUF_NDEBUG_INLINE ImageFile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena)
    : _cached_size_{0},
      data_(arena) {
}

inline void ImageFile::SharedCtor(::_pb::Arena* arena) {
    new (&_impl_) Impl_(internal_visibility(), arena);
    _impl_.description_ = {};
}
ImageFile::~ImageFile() {
    // @@protoc_insertion_point(destructor:turms.client.model.proto.ImageFile)
    _internal_metadata_.Delete<std::string>();
    SharedDtor();
}
inline void ImageFile::SharedDtor() {
    ABSL_DCHECK(GetArena() == nullptr);
    _impl_.data_.Destroy();
    delete _impl_.description_;
    _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData* ImageFile::GetClassData() const {
    struct ClassData_ {
        ::google::protobuf::MessageLite::ClassData header;
        char type_name[35];
    };

    PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
        {
            nullptr,  // OnDemandRegisterArenaDtor
            PROTOBUF_FIELD_OFFSET(ImageFile, _impl_._cached_size_),
            true,
        },
        "turms.client.model.proto.ImageFile",
    };

    return &_data_.header;
}
PROTOBUF_NOINLINE void ImageFile::Clear() {
    // @@protoc_insertion_point(message_clear_start:turms.client.model.proto.ImageFile)
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
        if (cached_has_bits & 0x00000001u) {
            _impl_.data_.ClearNonDefaultToEmpty();
        }
        if (cached_has_bits & 0x00000002u) {
            ABSL_DCHECK(_impl_.description_ != nullptr);
            _impl_.description_->Clear();
        }
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<std::string>();
}

const char* ImageFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
    ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
    return ptr;
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
    ImageFile::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(ImageFile, _impl_._has_bits_),
            0,  // no _extensions_
            2,
            8,  // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967292,  // skipmap
            offsetof(decltype(_table_), field_entries),
            2,  // num_field_entries
            1,  // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            &_ImageFile_default_instance_._instance,
            ::_pbi::TcParser::GenericFallbackLite,  // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::turms::client::model::proto::ImageFile>(),  // to_prefetch
#endif  // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // optional bytes data = 2;
            {::_pbi::TcParser::FastBS1, {18, 0, 0, PROTOBUF_FIELD_OFFSET(ImageFile, _impl_.data_)}},
            // optional .turms.client.model.proto.ImageFile.Description description = 1;
            {::_pbi::TcParser::FastMtS1,
             {10, 1, 0, PROTOBUF_FIELD_OFFSET(ImageFile, _impl_.description_)}},
        }},
        {{65535, 65535}},
        {{
            // optional .turms.client.model.proto.ImageFile.Description description = 1;
            {PROTOBUF_FIELD_OFFSET(ImageFile, _impl_.description_),
             _Internal::kHasBitsOffset + 1,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
            // optional bytes data = 2;
            {PROTOBUF_FIELD_OFFSET(ImageFile, _impl_.data_),
             _Internal::kHasBitsOffset + 0,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::turms::client::model::proto::ImageFile_Description>()},
        }},
        {{}},
};

::uint8_t* ImageFile::_InternalSerialize(
    ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.ImageFile)
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    // optional .turms.client.model.proto.ImageFile.Description description = 1;
    if (cached_has_bits & 0x00000002u) {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, *_impl_.description_, _impl_.description_->GetCachedSize(), target, stream);
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
        const std::string& _s = this->_internal_data();
        target = stream->WriteBytesMaybeAliased(2, _s, target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = stream->WriteRaw(
            _internal_metadata_
                .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                .data(),
            static_cast<int>(
                _internal_metadata_
                    .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                    .size()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.ImageFile)
    return target;
}

::size_t ImageFile::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.ImageFile)
    ::size_t total_size = 0;

    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
        // optional bytes data = 2;
        if (cached_has_bits & 0x00000001u) {
            total_size +=
                1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->_internal_data());
        }

        // optional .turms.client.model.proto.ImageFile.Description description = 1;
        if (cached_has_bits & 0x00000002u) {
            total_size +=
                1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.description_);
        }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        total_size += _internal_metadata_
                          .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                          .size();
    }
    _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
    return total_size;
}

void ImageFile::CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) {
    MergeFrom(*::_pbi::DownCast<const ImageFile*>(&from));
}

void ImageFile::MergeFrom(const ImageFile& from) {
    ImageFile* const _this = this;
    ::google::protobuf::Arena* arena = _this->GetArena();
    // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.ImageFile)
    ABSL_DCHECK_NE(&from, _this);
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x00000003u) {
        if (cached_has_bits & 0x00000001u) {
            _this->_internal_set_data(from._internal_data());
        }
        if (cached_has_bits & 0x00000002u) {
            ABSL_DCHECK(from._impl_.description_ != nullptr);
            if (_this->_impl_.description_ == nullptr) {
                _this->_impl_.description_ = ::google::protobuf::MessageLite::CopyConstruct<
                    ::turms::client::model::proto::ImageFile_Description>(
                    arena, *from._impl_.description_);
            } else {
                _this->_impl_.description_->MergeFrom(*from._impl_.description_);
            }
        }
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
    _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ImageFile::CopyFrom(const ImageFile& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.ImageFile)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

PROTOBUF_NOINLINE bool ImageFile::IsInitialized() const {
    return true;
}

void ImageFile::InternalSwap(ImageFile* PROTOBUF_RESTRICT other) {
    using std::swap;
    auto* arena = GetArena();
    ABSL_DCHECK_EQ(arena, other->GetArena());
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
    swap(_impl_.description_, other->_impl_.description_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"