// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request/user/create_session_request.proto

#include "turms/client/model/proto/request/user/create_session_request.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {
      template <typename>
PROTOBUF_CONSTEXPR CreateSessionRequest_DeviceDetailsEntry_DoNotUse::CreateSessionRequest_DeviceDetailsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct CreateSessionRequest_DeviceDetailsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSessionRequest_DeviceDetailsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSessionRequest_DeviceDetailsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateSessionRequest_DeviceDetailsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSessionRequest_DeviceDetailsEntry_DoNotUseDefaultTypeInternal _CreateSessionRequest_DeviceDetailsEntry_DoNotUse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CreateSessionRequest::CreateSessionRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /* decltype(_impl_.device_details_) */ {},
      /*decltype(_impl_.password_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.location_)*/ nullptr,
      /*decltype(_impl_.user_id_)*/ ::int64_t{0},
      /*decltype(_impl_.version_)*/ 0,
      /*decltype(_impl_.user_status_)*/ 0,
      /*decltype(_impl_.device_type_)*/ 0,
    } {}
struct CreateSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSessionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSessionRequestDefaultTypeInternal() {}
  union {
    CreateSessionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSessionRequestDefaultTypeInternal _CreateSessionRequest_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

CreateSessionRequest_DeviceDetailsEntry_DoNotUse::CreateSessionRequest_DeviceDetailsEntry_DoNotUse() {}
CreateSessionRequest_DeviceDetailsEntry_DoNotUse::CreateSessionRequest_DeviceDetailsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void CreateSessionRequest_DeviceDetailsEntry_DoNotUse::MergeFrom(const CreateSessionRequest_DeviceDetailsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
// ===================================================================

class CreateSessionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateSessionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::turms::client::model::proto::UserLocation& location(const CreateSessionRequest* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::turms::client::model::proto::UserLocation& CreateSessionRequest::_Internal::location(const CreateSessionRequest* msg) {
  return *msg->_impl_.location_;
}
void CreateSessionRequest::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CreateSessionRequest::CreateSessionRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.CreateSessionRequest)
}
CreateSessionRequest::CreateSessionRequest(const CreateSessionRequest& from) : ::google::protobuf::MessageLite() {
  CreateSessionRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      /* decltype(_impl_.device_details_) */ {},
      decltype(_impl_.password_){},
      decltype(_impl_.location_){nullptr},
      decltype(_impl_.user_id_){},
      decltype(_impl_.version_){},
      decltype(_impl_.user_status_){},
      decltype(_impl_.device_type_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _this->_impl_.device_details_.MergeFrom(from._impl_.device_details_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.location_ = new ::turms::client::model::proto::UserLocation(*from._impl_.location_);
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.device_type_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.device_type_));

  // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.CreateSessionRequest)
}
inline void CreateSessionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /* decltype(_impl_.device_details_) */ {::google::protobuf::internal::ArenaInitialized(), arena},
      decltype(_impl_.password_){},
      decltype(_impl_.location_){nullptr},
      decltype(_impl_.user_id_){::int64_t{0}},
      decltype(_impl_.version_){0},
      decltype(_impl_.user_status_){0},
      decltype(_impl_.device_type_){0},
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CreateSessionRequest::~CreateSessionRequest() {
  // @@protoc_insertion_point(destructor:turms.client.model.proto.CreateSessionRequest)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void CreateSessionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_details_.~MapFieldLite();
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}
void CreateSessionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CreateSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:turms.client.model.proto.CreateSessionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_details_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
  }
  ::memset(&_impl_.user_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.version_));
  _impl_.user_status_ = 0;
  _impl_.device_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CreateSessionRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 76, 2> CreateSessionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CreateSessionRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 version = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.version_)}},
    // int64 user_id = 2;
    {::_pbi::TcParser::FastV64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.user_id_)}},
    // optional string password = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.password_)}},
    // optional .turms.client.model.proto.UserStatus user_status = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.user_status_)}},
    // .turms.client.model.proto.DeviceType device_type = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.device_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .turms.client.model.proto.UserLocation location = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 version = 1;
    {PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 user_id = 2;
    {PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.user_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // optional string password = 3;
    {PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.password_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .turms.client.model.proto.UserStatus user_status = 4;
    {PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.user_status_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .turms.client.model.proto.DeviceType device_type = 5;
    {PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.device_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // map<string, string> device_details = 6;
    {PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.device_details_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // optional .turms.client.model.proto.UserLocation location = 7;
    {PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.location_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<decltype(CreateSessionRequest()._impl_.device_details_)>(1, 0, 0)},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserLocation>()},
  }}, {{
    "\55\0\0\10\0\0\16\0"
    "turms.client.model.proto.CreateSessionRequest"
    "password"
    "device_details"
  }},
};

::uint8_t* CreateSessionRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.CreateSessionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_version(), target);
  }

  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_user_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string password = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "turms.client.model.proto.CreateSessionRequest.password");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional .turms.client.model.proto.UserStatus user_status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_user_status(), target);
  }

  // .turms.client.model.proto.DeviceType device_type = 5;
  if (this->_internal_device_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_device_type(), target);
  }

  // map<string, string> device_details = 6;
  if (!_internal_device_details().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = CreateSessionRequest_DeviceDetailsEntry_DoNotUse::Funcs;
    const auto& field = _internal_device_details();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            6, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "turms.client.model.proto.CreateSessionRequest.device_details");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "turms.client.model.proto.CreateSessionRequest.device_details");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            6, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "turms.client.model.proto.CreateSessionRequest.device_details");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "turms.client.model.proto.CreateSessionRequest.device_details");
      }
    }
  }

  // optional .turms.client.model.proto.UserLocation location = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.CreateSessionRequest)
  return target;
}

::size_t CreateSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.CreateSessionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> device_details = 6;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_device_details_size());
  for (const auto& entry : _internal_device_details()) {
    total_size += CreateSessionRequest_DeviceDetailsEntry_DoNotUse::Funcs::ByteSizeLong(entry.first, entry.second);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string password = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_password());
    }

    // optional .turms.client.model.proto.UserLocation location = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

  }
  // int64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_user_id());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_version());
  }

  // optional .turms.client.model.proto.UserStatus user_status = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_user_status());
  }

  // .turms.client.model.proto.DeviceType device_type = 5;
  if (this->_internal_device_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_device_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSessionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CreateSessionRequest*>(
      &from));
}

void CreateSessionRequest::MergeFrom(const CreateSessionRequest& from) {
  CreateSessionRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.CreateSessionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.device_details_.MergeFrom(from._impl_.device_details_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_location()->::turms::client::model::proto::UserLocation::MergeFrom(
          from._internal_location());
    }
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_internal_set_user_status(from._internal_user_status());
  }
  if (from._internal_device_type() != 0) {
    _this->_internal_set_device_type(from._internal_device_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CreateSessionRequest::CopyFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CreateSessionRequest::IsInitialized() const {
  return true;
}

void CreateSessionRequest::InternalSwap(CreateSessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.device_details_.InternalSwap(&other->_impl_.device_details_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.device_type_)
      + sizeof(CreateSessionRequest::_impl_.device_type_)
      - PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

std::string CreateSessionRequest::GetTypeName() const {
  return "turms.client.model.proto.CreateSessionRequest";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
