// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification/turms_notification.proto

#include "turms/client/model/proto/notification/turms_notification.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {
        template <typename>
PROTOBUF_CONSTEXPR TurmsNotification_Data::TurmsNotification_Data(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.kind_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct TurmsNotification_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TurmsNotification_DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TurmsNotification_DataDefaultTypeInternal() {}
  union {
    TurmsNotification_Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TurmsNotification_DataDefaultTypeInternal _TurmsNotification_Data_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR TurmsNotification::TurmsNotification(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.reason_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.data_)*/ nullptr,
      /*decltype(_impl_.relayed_request_)*/ nullptr,
      /*decltype(_impl_.timestamp_)*/ ::int64_t{0},
      /*decltype(_impl_.request_id_)*/ ::int64_t{0},
      /*decltype(_impl_.code_)*/ 0,
      /*decltype(_impl_.close_status_)*/ 0,
      /*decltype(_impl_.requester_id_)*/ ::int64_t{0},
    } {}
struct TurmsNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TurmsNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TurmsNotificationDefaultTypeInternal() {}
  union {
    TurmsNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TurmsNotificationDefaultTypeInternal _TurmsNotification_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class TurmsNotification_Data::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::turms::client::model::proto::TurmsNotification_Data, _impl_._oneof_case_);
  static const ::turms::client::model::proto::LongsWithVersion& longs_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::StringsWithVersion& strings_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::Conversations& conversations(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::Messages& messages(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::MessagesWithTotalList& messages_with_total_list(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::UserSession& user_session(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::UserInfosWithVersion& user_infos_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::UserOnlineStatuses& user_online_statuses(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::UserFriendRequestsWithVersion& user_friend_requests_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::UserRelationshipGroupsWithVersion& user_relationship_groups_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::UserRelationshipsWithVersion& user_relationships_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::NearbyUsers& nearby_users(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::GroupInvitationsWithVersion& group_invitations_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::GroupJoinQuestionsAnswerResult& group_join_question_answer_result(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::GroupJoinRequestsWithVersion& group_join_requests_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::GroupJoinQuestionsWithVersion& group_join_questions_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::GroupMembersWithVersion& group_members_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::GroupsWithVersion& groups_with_version(const TurmsNotification_Data* msg);
  static const ::turms::client::model::proto::StorageResourceInfos& storage_resource_infos(const TurmsNotification_Data* msg);
};

const ::turms::client::model::proto::LongsWithVersion& TurmsNotification_Data::_Internal::longs_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.longs_with_version_;
}
const ::turms::client::model::proto::StringsWithVersion& TurmsNotification_Data::_Internal::strings_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.strings_with_version_;
}
const ::turms::client::model::proto::Conversations& TurmsNotification_Data::_Internal::conversations(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.conversations_;
}
const ::turms::client::model::proto::Messages& TurmsNotification_Data::_Internal::messages(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.messages_;
}
const ::turms::client::model::proto::MessagesWithTotalList& TurmsNotification_Data::_Internal::messages_with_total_list(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.messages_with_total_list_;
}
const ::turms::client::model::proto::UserSession& TurmsNotification_Data::_Internal::user_session(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.user_session_;
}
const ::turms::client::model::proto::UserInfosWithVersion& TurmsNotification_Data::_Internal::user_infos_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.user_infos_with_version_;
}
const ::turms::client::model::proto::UserOnlineStatuses& TurmsNotification_Data::_Internal::user_online_statuses(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.user_online_statuses_;
}
const ::turms::client::model::proto::UserFriendRequestsWithVersion& TurmsNotification_Data::_Internal::user_friend_requests_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.user_friend_requests_with_version_;
}
const ::turms::client::model::proto::UserRelationshipGroupsWithVersion& TurmsNotification_Data::_Internal::user_relationship_groups_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.user_relationship_groups_with_version_;
}
const ::turms::client::model::proto::UserRelationshipsWithVersion& TurmsNotification_Data::_Internal::user_relationships_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.user_relationships_with_version_;
}
const ::turms::client::model::proto::NearbyUsers& TurmsNotification_Data::_Internal::nearby_users(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.nearby_users_;
}
const ::turms::client::model::proto::GroupInvitationsWithVersion& TurmsNotification_Data::_Internal::group_invitations_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.group_invitations_with_version_;
}
const ::turms::client::model::proto::GroupJoinQuestionsAnswerResult& TurmsNotification_Data::_Internal::group_join_question_answer_result(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.group_join_question_answer_result_;
}
const ::turms::client::model::proto::GroupJoinRequestsWithVersion& TurmsNotification_Data::_Internal::group_join_requests_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.group_join_requests_with_version_;
}
const ::turms::client::model::proto::GroupJoinQuestionsWithVersion& TurmsNotification_Data::_Internal::group_join_questions_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.group_join_questions_with_version_;
}
const ::turms::client::model::proto::GroupMembersWithVersion& TurmsNotification_Data::_Internal::group_members_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.group_members_with_version_;
}
const ::turms::client::model::proto::GroupsWithVersion& TurmsNotification_Data::_Internal::groups_with_version(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.groups_with_version_;
}
const ::turms::client::model::proto::StorageResourceInfos& TurmsNotification_Data::_Internal::storage_resource_infos(const TurmsNotification_Data* msg) {
  return *msg->_impl_.kind_.storage_resource_infos_;
}
void TurmsNotification_Data::set_allocated_longs_with_version(::turms::client::model::proto::LongsWithVersion* longs_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (longs_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(longs_with_version));
    if (message_arena != submessage_arena) {
      longs_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, longs_with_version, submessage_arena);
    }
    set_has_longs_with_version();
    _impl_.kind_.longs_with_version_ = longs_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.longs_with_version)
}
void TurmsNotification_Data::clear_longs_with_version() {
  if (kind_case() == kLongsWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.longs_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_strings_with_version(::turms::client::model::proto::StringsWithVersion* strings_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (strings_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(strings_with_version));
    if (message_arena != submessage_arena) {
      strings_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, strings_with_version, submessage_arena);
    }
    set_has_strings_with_version();
    _impl_.kind_.strings_with_version_ = strings_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.strings_with_version)
}
void TurmsNotification_Data::clear_strings_with_version() {
  if (kind_case() == kStringsWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.strings_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_conversations(::turms::client::model::proto::Conversations* conversations) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (conversations) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(conversations));
    if (message_arena != submessage_arena) {
      conversations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conversations, submessage_arena);
    }
    set_has_conversations();
    _impl_.kind_.conversations_ = conversations;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.conversations)
}
void TurmsNotification_Data::clear_conversations() {
  if (kind_case() == kConversations) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.conversations_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_messages(::turms::client::model::proto::Messages* messages) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (messages) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(messages));
    if (message_arena != submessage_arena) {
      messages = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, messages, submessage_arena);
    }
    set_has_messages();
    _impl_.kind_.messages_ = messages;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.messages)
}
void TurmsNotification_Data::clear_messages() {
  if (kind_case() == kMessages) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.messages_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_messages_with_total_list(::turms::client::model::proto::MessagesWithTotalList* messages_with_total_list) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (messages_with_total_list) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(messages_with_total_list));
    if (message_arena != submessage_arena) {
      messages_with_total_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, messages_with_total_list, submessage_arena);
    }
    set_has_messages_with_total_list();
    _impl_.kind_.messages_with_total_list_ = messages_with_total_list;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.messages_with_total_list)
}
void TurmsNotification_Data::clear_messages_with_total_list() {
  if (kind_case() == kMessagesWithTotalList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.messages_with_total_list_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_user_session(::turms::client::model::proto::UserSession* user_session) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (user_session) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(user_session));
    if (message_arena != submessage_arena) {
      user_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_session, submessage_arena);
    }
    set_has_user_session();
    _impl_.kind_.user_session_ = user_session;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_session)
}
void TurmsNotification_Data::clear_user_session() {
  if (kind_case() == kUserSession) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.user_session_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_user_infos_with_version(::turms::client::model::proto::UserInfosWithVersion* user_infos_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (user_infos_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(user_infos_with_version));
    if (message_arena != submessage_arena) {
      user_infos_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_infos_with_version, submessage_arena);
    }
    set_has_user_infos_with_version();
    _impl_.kind_.user_infos_with_version_ = user_infos_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_infos_with_version)
}
void TurmsNotification_Data::clear_user_infos_with_version() {
  if (kind_case() == kUserInfosWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.user_infos_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_user_online_statuses(::turms::client::model::proto::UserOnlineStatuses* user_online_statuses) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (user_online_statuses) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(user_online_statuses));
    if (message_arena != submessage_arena) {
      user_online_statuses = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_online_statuses, submessage_arena);
    }
    set_has_user_online_statuses();
    _impl_.kind_.user_online_statuses_ = user_online_statuses;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_online_statuses)
}
void TurmsNotification_Data::clear_user_online_statuses() {
  if (kind_case() == kUserOnlineStatuses) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.user_online_statuses_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_user_friend_requests_with_version(::turms::client::model::proto::UserFriendRequestsWithVersion* user_friend_requests_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (user_friend_requests_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(user_friend_requests_with_version));
    if (message_arena != submessage_arena) {
      user_friend_requests_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_friend_requests_with_version, submessage_arena);
    }
    set_has_user_friend_requests_with_version();
    _impl_.kind_.user_friend_requests_with_version_ = user_friend_requests_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_friend_requests_with_version)
}
void TurmsNotification_Data::clear_user_friend_requests_with_version() {
  if (kind_case() == kUserFriendRequestsWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.user_friend_requests_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_user_relationship_groups_with_version(::turms::client::model::proto::UserRelationshipGroupsWithVersion* user_relationship_groups_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (user_relationship_groups_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(user_relationship_groups_with_version));
    if (message_arena != submessage_arena) {
      user_relationship_groups_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_relationship_groups_with_version, submessage_arena);
    }
    set_has_user_relationship_groups_with_version();
    _impl_.kind_.user_relationship_groups_with_version_ = user_relationship_groups_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_relationship_groups_with_version)
}
void TurmsNotification_Data::clear_user_relationship_groups_with_version() {
  if (kind_case() == kUserRelationshipGroupsWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.user_relationship_groups_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_user_relationships_with_version(::turms::client::model::proto::UserRelationshipsWithVersion* user_relationships_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (user_relationships_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(user_relationships_with_version));
    if (message_arena != submessage_arena) {
      user_relationships_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_relationships_with_version, submessage_arena);
    }
    set_has_user_relationships_with_version();
    _impl_.kind_.user_relationships_with_version_ = user_relationships_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.user_relationships_with_version)
}
void TurmsNotification_Data::clear_user_relationships_with_version() {
  if (kind_case() == kUserRelationshipsWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.user_relationships_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_nearby_users(::turms::client::model::proto::NearbyUsers* nearby_users) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (nearby_users) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(nearby_users));
    if (message_arena != submessage_arena) {
      nearby_users = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nearby_users, submessage_arena);
    }
    set_has_nearby_users();
    _impl_.kind_.nearby_users_ = nearby_users;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.nearby_users)
}
void TurmsNotification_Data::clear_nearby_users() {
  if (kind_case() == kNearbyUsers) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.nearby_users_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_group_invitations_with_version(::turms::client::model::proto::GroupInvitationsWithVersion* group_invitations_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (group_invitations_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(group_invitations_with_version));
    if (message_arena != submessage_arena) {
      group_invitations_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_invitations_with_version, submessage_arena);
    }
    set_has_group_invitations_with_version();
    _impl_.kind_.group_invitations_with_version_ = group_invitations_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_invitations_with_version)
}
void TurmsNotification_Data::clear_group_invitations_with_version() {
  if (kind_case() == kGroupInvitationsWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.group_invitations_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_group_join_question_answer_result(::turms::client::model::proto::GroupJoinQuestionsAnswerResult* group_join_question_answer_result) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (group_join_question_answer_result) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(group_join_question_answer_result));
    if (message_arena != submessage_arena) {
      group_join_question_answer_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_join_question_answer_result, submessage_arena);
    }
    set_has_group_join_question_answer_result();
    _impl_.kind_.group_join_question_answer_result_ = group_join_question_answer_result;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_join_question_answer_result)
}
void TurmsNotification_Data::clear_group_join_question_answer_result() {
  if (kind_case() == kGroupJoinQuestionAnswerResult) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.group_join_question_answer_result_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_group_join_requests_with_version(::turms::client::model::proto::GroupJoinRequestsWithVersion* group_join_requests_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (group_join_requests_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(group_join_requests_with_version));
    if (message_arena != submessage_arena) {
      group_join_requests_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_join_requests_with_version, submessage_arena);
    }
    set_has_group_join_requests_with_version();
    _impl_.kind_.group_join_requests_with_version_ = group_join_requests_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_join_requests_with_version)
}
void TurmsNotification_Data::clear_group_join_requests_with_version() {
  if (kind_case() == kGroupJoinRequestsWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.group_join_requests_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_group_join_questions_with_version(::turms::client::model::proto::GroupJoinQuestionsWithVersion* group_join_questions_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (group_join_questions_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(group_join_questions_with_version));
    if (message_arena != submessage_arena) {
      group_join_questions_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_join_questions_with_version, submessage_arena);
    }
    set_has_group_join_questions_with_version();
    _impl_.kind_.group_join_questions_with_version_ = group_join_questions_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_join_questions_with_version)
}
void TurmsNotification_Data::clear_group_join_questions_with_version() {
  if (kind_case() == kGroupJoinQuestionsWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.group_join_questions_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_group_members_with_version(::turms::client::model::proto::GroupMembersWithVersion* group_members_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (group_members_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(group_members_with_version));
    if (message_arena != submessage_arena) {
      group_members_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_members_with_version, submessage_arena);
    }
    set_has_group_members_with_version();
    _impl_.kind_.group_members_with_version_ = group_members_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.group_members_with_version)
}
void TurmsNotification_Data::clear_group_members_with_version() {
  if (kind_case() == kGroupMembersWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.group_members_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_groups_with_version(::turms::client::model::proto::GroupsWithVersion* groups_with_version) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (groups_with_version) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(groups_with_version));
    if (message_arena != submessage_arena) {
      groups_with_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, groups_with_version, submessage_arena);
    }
    set_has_groups_with_version();
    _impl_.kind_.groups_with_version_ = groups_with_version;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.groups_with_version)
}
void TurmsNotification_Data::clear_groups_with_version() {
  if (kind_case() == kGroupsWithVersion) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.groups_with_version_;
    }
    clear_has_kind();
  }
}
void TurmsNotification_Data::set_allocated_storage_resource_infos(::turms::client::model::proto::StorageResourceInfos* storage_resource_infos) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (storage_resource_infos) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(
                reinterpret_cast<::google::protobuf::MessageLite*>(storage_resource_infos));
    if (message_arena != submessage_arena) {
      storage_resource_infos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storage_resource_infos, submessage_arena);
    }
    set_has_storage_resource_infos();
    _impl_.kind_.storage_resource_infos_ = storage_resource_infos;
  }
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.TurmsNotification.Data.storage_resource_infos)
}
void TurmsNotification_Data::clear_storage_resource_infos() {
  if (kind_case() == kStorageResourceInfos) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.storage_resource_infos_;
    }
    clear_has_kind();
  }
}
TurmsNotification_Data::TurmsNotification_Data(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.TurmsNotification.Data)
}
TurmsNotification_Data::TurmsNotification_Data(const TurmsNotification_Data& from) : ::google::protobuf::MessageLite() {
  TurmsNotification_Data* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kLong: {
      _this->_internal_set_long_(from._internal_long_());
      break;
    }
    case kString: {
      _this->_internal_set_string(from._internal_string());
      break;
    }
    case kLongsWithVersion: {
      _this->_internal_mutable_longs_with_version()->::turms::client::model::proto::LongsWithVersion::MergeFrom(
          from._internal_longs_with_version());
      break;
    }
    case kStringsWithVersion: {
      _this->_internal_mutable_strings_with_version()->::turms::client::model::proto::StringsWithVersion::MergeFrom(
          from._internal_strings_with_version());
      break;
    }
    case kConversations: {
      _this->_internal_mutable_conversations()->::turms::client::model::proto::Conversations::MergeFrom(
          from._internal_conversations());
      break;
    }
    case kMessages: {
      _this->_internal_mutable_messages()->::turms::client::model::proto::Messages::MergeFrom(
          from._internal_messages());
      break;
    }
    case kMessagesWithTotalList: {
      _this->_internal_mutable_messages_with_total_list()->::turms::client::model::proto::MessagesWithTotalList::MergeFrom(
          from._internal_messages_with_total_list());
      break;
    }
    case kUserSession: {
      _this->_internal_mutable_user_session()->::turms::client::model::proto::UserSession::MergeFrom(
          from._internal_user_session());
      break;
    }
    case kUserInfosWithVersion: {
      _this->_internal_mutable_user_infos_with_version()->::turms::client::model::proto::UserInfosWithVersion::MergeFrom(
          from._internal_user_infos_with_version());
      break;
    }
    case kUserOnlineStatuses: {
      _this->_internal_mutable_user_online_statuses()->::turms::client::model::proto::UserOnlineStatuses::MergeFrom(
          from._internal_user_online_statuses());
      break;
    }
    case kUserFriendRequestsWithVersion: {
      _this->_internal_mutable_user_friend_requests_with_version()->::turms::client::model::proto::UserFriendRequestsWithVersion::MergeFrom(
          from._internal_user_friend_requests_with_version());
      break;
    }
    case kUserRelationshipGroupsWithVersion: {
      _this->_internal_mutable_user_relationship_groups_with_version()->::turms::client::model::proto::UserRelationshipGroupsWithVersion::MergeFrom(
          from._internal_user_relationship_groups_with_version());
      break;
    }
    case kUserRelationshipsWithVersion: {
      _this->_internal_mutable_user_relationships_with_version()->::turms::client::model::proto::UserRelationshipsWithVersion::MergeFrom(
          from._internal_user_relationships_with_version());
      break;
    }
    case kNearbyUsers: {
      _this->_internal_mutable_nearby_users()->::turms::client::model::proto::NearbyUsers::MergeFrom(
          from._internal_nearby_users());
      break;
    }
    case kGroupInvitationsWithVersion: {
      _this->_internal_mutable_group_invitations_with_version()->::turms::client::model::proto::GroupInvitationsWithVersion::MergeFrom(
          from._internal_group_invitations_with_version());
      break;
    }
    case kGroupJoinQuestionAnswerResult: {
      _this->_internal_mutable_group_join_question_answer_result()->::turms::client::model::proto::GroupJoinQuestionsAnswerResult::MergeFrom(
          from._internal_group_join_question_answer_result());
      break;
    }
    case kGroupJoinRequestsWithVersion: {
      _this->_internal_mutable_group_join_requests_with_version()->::turms::client::model::proto::GroupJoinRequestsWithVersion::MergeFrom(
          from._internal_group_join_requests_with_version());
      break;
    }
    case kGroupJoinQuestionsWithVersion: {
      _this->_internal_mutable_group_join_questions_with_version()->::turms::client::model::proto::GroupJoinQuestionsWithVersion::MergeFrom(
          from._internal_group_join_questions_with_version());
      break;
    }
    case kGroupMembersWithVersion: {
      _this->_internal_mutable_group_members_with_version()->::turms::client::model::proto::GroupMembersWithVersion::MergeFrom(
          from._internal_group_members_with_version());
      break;
    }
    case kGroupsWithVersion: {
      _this->_internal_mutable_groups_with_version()->::turms::client::model::proto::GroupsWithVersion::MergeFrom(
          from._internal_groups_with_version());
      break;
    }
    case kStorageResourceInfos: {
      _this->_internal_mutable_storage_resource_infos()->::turms::client::model::proto::StorageResourceInfos::MergeFrom(
          from._internal_storage_resource_infos());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.TurmsNotification.Data)
}
inline void TurmsNotification_Data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  clear_has_kind();
}
TurmsNotification_Data::~TurmsNotification_Data() {
  // @@protoc_insertion_point(destructor:turms.client.model.proto.TurmsNotification.Data)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TurmsNotification_Data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}
void TurmsNotification_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TurmsNotification_Data::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:turms.client.model.proto.TurmsNotification.Data)
  switch (kind_case()) {
    case kLong: {
      // No need to clear
      break;
    }
    case kString: {
      _impl_.kind_.string_.Destroy();
      break;
    }
    case kLongsWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.longs_with_version_;
      }
      break;
    }
    case kStringsWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.strings_with_version_;
      }
      break;
    }
    case kConversations: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.conversations_;
      }
      break;
    }
    case kMessages: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.messages_;
      }
      break;
    }
    case kMessagesWithTotalList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.messages_with_total_list_;
      }
      break;
    }
    case kUserSession: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.user_session_;
      }
      break;
    }
    case kUserInfosWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.user_infos_with_version_;
      }
      break;
    }
    case kUserOnlineStatuses: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.user_online_statuses_;
      }
      break;
    }
    case kUserFriendRequestsWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.user_friend_requests_with_version_;
      }
      break;
    }
    case kUserRelationshipGroupsWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.user_relationship_groups_with_version_;
      }
      break;
    }
    case kUserRelationshipsWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.user_relationships_with_version_;
      }
      break;
    }
    case kNearbyUsers: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.nearby_users_;
      }
      break;
    }
    case kGroupInvitationsWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.group_invitations_with_version_;
      }
      break;
    }
    case kGroupJoinQuestionAnswerResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.group_join_question_answer_result_;
      }
      break;
    }
    case kGroupJoinRequestsWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.group_join_requests_with_version_;
      }
      break;
    }
    case kGroupJoinQuestionsWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.group_join_questions_with_version_;
      }
      break;
    }
    case kGroupMembersWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.group_members_with_version_;
      }
      break;
    }
    case kGroupsWithVersion: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.groups_with_version_;
      }
      break;
    }
    case kStorageResourceInfos: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.storage_resource_infos_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


PROTOBUF_NOINLINE void TurmsNotification_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:turms.client.model.proto.TurmsNotification.Data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<std::string>();
}

const char* TurmsNotification_Data::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 21, 19, 78, 7> TurmsNotification_Data::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    50, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    19,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TurmsNotification_Data_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    50, 0, 1,
    65534, 20,
    65535, 65535
  }}, {{
    // int64 long = 1;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.long__), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // string string = 2;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.string_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .turms.client.model.proto.LongsWithVersion longs_with_version = 3;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.longs_with_version_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.StringsWithVersion strings_with_version = 4;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.strings_with_version_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.Conversations conversations = 5;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.conversations_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.Messages messages = 6;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.messages_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.MessagesWithTotalList messages_with_total_list = 7;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.messages_with_total_list_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.UserSession user_session = 8;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_session_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.UserInfosWithVersion user_infos_with_version = 9;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_infos_with_version_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.UserOnlineStatuses user_online_statuses = 10;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_online_statuses_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.UserFriendRequestsWithVersion user_friend_requests_with_version = 11;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_friend_requests_with_version_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.UserRelationshipGroupsWithVersion user_relationship_groups_with_version = 12;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_relationship_groups_with_version_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.UserRelationshipsWithVersion user_relationships_with_version = 13;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.user_relationships_with_version_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.NearbyUsers nearby_users = 14;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.nearby_users_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.GroupInvitationsWithVersion group_invitations_with_version = 15;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.group_invitations_with_version_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.GroupJoinQuestionsAnswerResult group_join_question_answer_result = 16;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.group_join_question_answer_result_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.GroupJoinRequestsWithVersion group_join_requests_with_version = 17;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.group_join_requests_with_version_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.GroupJoinQuestionsWithVersion group_join_questions_with_version = 18;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.group_join_questions_with_version_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.GroupMembersWithVersion group_members_with_version = 19;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.group_members_with_version_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.GroupsWithVersion groups_with_version = 20;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.groups_with_version_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .turms.client.model.proto.StorageResourceInfos storage_resource_infos = 50;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification_Data, _impl_.kind_.storage_resource_infos_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::LongsWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::StringsWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::Conversations>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::Messages>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::MessagesWithTotalList>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserSession>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserInfosWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserOnlineStatuses>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserFriendRequestsWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserRelationshipGroupsWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::UserRelationshipsWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::NearbyUsers>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::GroupInvitationsWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::GroupJoinQuestionsAnswerResult>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::GroupJoinRequestsWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::GroupJoinQuestionsWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::GroupMembersWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::GroupsWithVersion>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::StorageResourceInfos>()},
  }}, {{
    "\57\0\6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "turms.client.model.proto.TurmsNotification.Data"
    "string"
  }},
};

::uint8_t* TurmsNotification_Data::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.TurmsNotification.Data)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (kind_case()) {
    case kLong: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt64ToArrayWithField<1>(
              stream, this->_internal_long_(), target);
      break;
    }
    case kString: {
      const std::string& _s = this->_internal_string();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "turms.client.model.proto.TurmsNotification.Data.string");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    case kLongsWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::longs_with_version(this),
          _Internal::longs_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kStringsWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::strings_with_version(this),
          _Internal::strings_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kConversations: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::conversations(this),
          _Internal::conversations(this).GetCachedSize(), target, stream);
      break;
    }
    case kMessages: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::messages(this),
          _Internal::messages(this).GetCachedSize(), target, stream);
      break;
    }
    case kMessagesWithTotalList: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::messages_with_total_list(this),
          _Internal::messages_with_total_list(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserSession: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::user_session(this),
          _Internal::user_session(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserInfosWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::user_infos_with_version(this),
          _Internal::user_infos_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserOnlineStatuses: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::user_online_statuses(this),
          _Internal::user_online_statuses(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserFriendRequestsWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::user_friend_requests_with_version(this),
          _Internal::user_friend_requests_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserRelationshipGroupsWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::user_relationship_groups_with_version(this),
          _Internal::user_relationship_groups_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserRelationshipsWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::user_relationships_with_version(this),
          _Internal::user_relationships_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kNearbyUsers: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::nearby_users(this),
          _Internal::nearby_users(this).GetCachedSize(), target, stream);
      break;
    }
    case kGroupInvitationsWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::group_invitations_with_version(this),
          _Internal::group_invitations_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kGroupJoinQuestionAnswerResult: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::group_join_question_answer_result(this),
          _Internal::group_join_question_answer_result(this).GetCachedSize(), target, stream);
      break;
    }
    case kGroupJoinRequestsWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::group_join_requests_with_version(this),
          _Internal::group_join_requests_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kGroupJoinQuestionsWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::group_join_questions_with_version(this),
          _Internal::group_join_questions_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kGroupMembersWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::group_members_with_version(this),
          _Internal::group_members_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kGroupsWithVersion: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::groups_with_version(this),
          _Internal::groups_with_version(this).GetCachedSize(), target, stream);
      break;
    }
    case kStorageResourceInfos: {
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(50, _Internal::storage_resource_infos(this),
          _Internal::storage_resource_infos(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.TurmsNotification.Data)
  return target;
}

::size_t TurmsNotification_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.TurmsNotification.Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // int64 long = 1;
    case kLong: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_long_());
      break;
    }
    // string string = 2;
    case kString: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_string());
      break;
    }
    // .turms.client.model.proto.LongsWithVersion longs_with_version = 3;
    case kLongsWithVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.longs_with_version_);
      break;
    }
    // .turms.client.model.proto.StringsWithVersion strings_with_version = 4;
    case kStringsWithVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.strings_with_version_);
      break;
    }
    // .turms.client.model.proto.Conversations conversations = 5;
    case kConversations: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.conversations_);
      break;
    }
    // .turms.client.model.proto.Messages messages = 6;
    case kMessages: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.messages_);
      break;
    }
    // .turms.client.model.proto.MessagesWithTotalList messages_with_total_list = 7;
    case kMessagesWithTotalList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.messages_with_total_list_);
      break;
    }
    // .turms.client.model.proto.UserSession user_session = 8;
    case kUserSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.user_session_);
      break;
    }
    // .turms.client.model.proto.UserInfosWithVersion user_infos_with_version = 9;
    case kUserInfosWithVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.user_infos_with_version_);
      break;
    }
    // .turms.client.model.proto.UserOnlineStatuses user_online_statuses = 10;
    case kUserOnlineStatuses: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.user_online_statuses_);
      break;
    }
    // .turms.client.model.proto.UserFriendRequestsWithVersion user_friend_requests_with_version = 11;
    case kUserFriendRequestsWithVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.user_friend_requests_with_version_);
      break;
    }
    // .turms.client.model.proto.UserRelationshipGroupsWithVersion user_relationship_groups_with_version = 12;
    case kUserRelationshipGroupsWithVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.user_relationship_groups_with_version_);
      break;
    }
    // .turms.client.model.proto.UserRelationshipsWithVersion user_relationships_with_version = 13;
    case kUserRelationshipsWithVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.user_relationships_with_version_);
      break;
    }
    // .turms.client.model.proto.NearbyUsers nearby_users = 14;
    case kNearbyUsers: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.nearby_users_);
      break;
    }
    // .turms.client.model.proto.GroupInvitationsWithVersion group_invitations_with_version = 15;
    case kGroupInvitationsWithVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.group_invitations_with_version_);
      break;
    }
    // .turms.client.model.proto.GroupJoinQuestionsAnswerResult group_join_question_answer_result = 16;
    case kGroupJoinQuestionAnswerResult: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.group_join_question_answer_result_);
      break;
    }
    // .turms.client.model.proto.GroupJoinRequestsWithVersion group_join_requests_with_version = 17;
    case kGroupJoinRequestsWithVersion: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.group_join_requests_with_version_);
      break;
    }
    // .turms.client.model.proto.GroupJoinQuestionsWithVersion group_join_questions_with_version = 18;
    case kGroupJoinQuestionsWithVersion: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.group_join_questions_with_version_);
      break;
    }
    // .turms.client.model.proto.GroupMembersWithVersion group_members_with_version = 19;
    case kGroupMembersWithVersion: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.group_members_with_version_);
      break;
    }
    // .turms.client.model.proto.GroupsWithVersion groups_with_version = 20;
    case kGroupsWithVersion: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.groups_with_version_);
      break;
    }
    // .turms.client.model.proto.StorageResourceInfos storage_resource_infos = 50;
    case kStorageResourceInfos: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.storage_resource_infos_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TurmsNotification_Data::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TurmsNotification_Data*>(
      &from));
}

void TurmsNotification_Data::MergeFrom(const TurmsNotification_Data& from) {
  TurmsNotification_Data* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.TurmsNotification.Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kLong: {
      _this->_internal_set_long_(from._internal_long_());
      break;
    }
    case kString: {
      _this->_internal_set_string(from._internal_string());
      break;
    }
    case kLongsWithVersion: {
      _this->_internal_mutable_longs_with_version()->::turms::client::model::proto::LongsWithVersion::MergeFrom(
          from._internal_longs_with_version());
      break;
    }
    case kStringsWithVersion: {
      _this->_internal_mutable_strings_with_version()->::turms::client::model::proto::StringsWithVersion::MergeFrom(
          from._internal_strings_with_version());
      break;
    }
    case kConversations: {
      _this->_internal_mutable_conversations()->::turms::client::model::proto::Conversations::MergeFrom(
          from._internal_conversations());
      break;
    }
    case kMessages: {
      _this->_internal_mutable_messages()->::turms::client::model::proto::Messages::MergeFrom(
          from._internal_messages());
      break;
    }
    case kMessagesWithTotalList: {
      _this->_internal_mutable_messages_with_total_list()->::turms::client::model::proto::MessagesWithTotalList::MergeFrom(
          from._internal_messages_with_total_list());
      break;
    }
    case kUserSession: {
      _this->_internal_mutable_user_session()->::turms::client::model::proto::UserSession::MergeFrom(
          from._internal_user_session());
      break;
    }
    case kUserInfosWithVersion: {
      _this->_internal_mutable_user_infos_with_version()->::turms::client::model::proto::UserInfosWithVersion::MergeFrom(
          from._internal_user_infos_with_version());
      break;
    }
    case kUserOnlineStatuses: {
      _this->_internal_mutable_user_online_statuses()->::turms::client::model::proto::UserOnlineStatuses::MergeFrom(
          from._internal_user_online_statuses());
      break;
    }
    case kUserFriendRequestsWithVersion: {
      _this->_internal_mutable_user_friend_requests_with_version()->::turms::client::model::proto::UserFriendRequestsWithVersion::MergeFrom(
          from._internal_user_friend_requests_with_version());
      break;
    }
    case kUserRelationshipGroupsWithVersion: {
      _this->_internal_mutable_user_relationship_groups_with_version()->::turms::client::model::proto::UserRelationshipGroupsWithVersion::MergeFrom(
          from._internal_user_relationship_groups_with_version());
      break;
    }
    case kUserRelationshipsWithVersion: {
      _this->_internal_mutable_user_relationships_with_version()->::turms::client::model::proto::UserRelationshipsWithVersion::MergeFrom(
          from._internal_user_relationships_with_version());
      break;
    }
    case kNearbyUsers: {
      _this->_internal_mutable_nearby_users()->::turms::client::model::proto::NearbyUsers::MergeFrom(
          from._internal_nearby_users());
      break;
    }
    case kGroupInvitationsWithVersion: {
      _this->_internal_mutable_group_invitations_with_version()->::turms::client::model::proto::GroupInvitationsWithVersion::MergeFrom(
          from._internal_group_invitations_with_version());
      break;
    }
    case kGroupJoinQuestionAnswerResult: {
      _this->_internal_mutable_group_join_question_answer_result()->::turms::client::model::proto::GroupJoinQuestionsAnswerResult::MergeFrom(
          from._internal_group_join_question_answer_result());
      break;
    }
    case kGroupJoinRequestsWithVersion: {
      _this->_internal_mutable_group_join_requests_with_version()->::turms::client::model::proto::GroupJoinRequestsWithVersion::MergeFrom(
          from._internal_group_join_requests_with_version());
      break;
    }
    case kGroupJoinQuestionsWithVersion: {
      _this->_internal_mutable_group_join_questions_with_version()->::turms::client::model::proto::GroupJoinQuestionsWithVersion::MergeFrom(
          from._internal_group_join_questions_with_version());
      break;
    }
    case kGroupMembersWithVersion: {
      _this->_internal_mutable_group_members_with_version()->::turms::client::model::proto::GroupMembersWithVersion::MergeFrom(
          from._internal_group_members_with_version());
      break;
    }
    case kGroupsWithVersion: {
      _this->_internal_mutable_groups_with_version()->::turms::client::model::proto::GroupsWithVersion::MergeFrom(
          from._internal_groups_with_version());
      break;
    }
    case kStorageResourceInfos: {
      _this->_internal_mutable_storage_resource_infos()->::turms::client::model::proto::StorageResourceInfos::MergeFrom(
          from._internal_storage_resource_infos());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TurmsNotification_Data::CopyFrom(const TurmsNotification_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.TurmsNotification.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TurmsNotification_Data::IsInitialized() const {
  return true;
}

void TurmsNotification_Data::InternalSwap(TurmsNotification_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string TurmsNotification_Data::GetTypeName() const {
  return "turms.client.model.proto.TurmsNotification.Data";
}

// ===================================================================

class TurmsNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<TurmsNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::turms::client::model::proto::TurmsNotification_Data& data(const TurmsNotification* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_requester_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_close_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::turms::client::model::proto::TurmsRequest& relayed_request(const TurmsNotification* msg);
  static void set_has_relayed_request(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::turms::client::model::proto::TurmsNotification_Data& TurmsNotification::_Internal::data(const TurmsNotification* msg) {
  return *msg->_impl_.data_;
}
const ::turms::client::model::proto::TurmsRequest& TurmsNotification::_Internal::relayed_request(const TurmsNotification* msg) {
  return *msg->_impl_.relayed_request_;
}
void TurmsNotification::clear_relayed_request() {
  if (_impl_.relayed_request_ != nullptr) _impl_.relayed_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TurmsNotification::TurmsNotification(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.TurmsNotification)
}
TurmsNotification::TurmsNotification(const TurmsNotification& from) : ::google::protobuf::MessageLite() {
  TurmsNotification* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.reason_){},
      decltype(_impl_.data_){nullptr},
      decltype(_impl_.relayed_request_){nullptr},
      decltype(_impl_.timestamp_){},
      decltype(_impl_.request_id_){},
      decltype(_impl_.code_){},
      decltype(_impl_.close_status_){},
      decltype(_impl_.requester_id_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.reason_.Set(from._internal_reason(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.data_ = new ::turms::client::model::proto::TurmsNotification_Data(*from._impl_.data_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.relayed_request_ = new ::turms::client::model::proto::TurmsRequest(*from._impl_.relayed_request_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.requester_id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.requester_id_));

  // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.TurmsNotification)
}
inline void TurmsNotification::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.reason_){},
      decltype(_impl_.data_){nullptr},
      decltype(_impl_.relayed_request_){nullptr},
      decltype(_impl_.timestamp_){::int64_t{0}},
      decltype(_impl_.request_id_){::int64_t{0}},
      decltype(_impl_.code_){0},
      decltype(_impl_.close_status_){0},
      decltype(_impl_.requester_id_){::int64_t{0}},
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
TurmsNotification::~TurmsNotification() {
  // @@protoc_insertion_point(destructor:turms.client.model.proto.TurmsNotification)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TurmsNotification::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.relayed_request_;
}
void TurmsNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void TurmsNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:turms.client.model.proto.TurmsNotification)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.relayed_request_ != nullptr);
      _impl_.relayed_request_->Clear();
    }
  }
  _impl_.timestamp_ = ::int64_t{0};
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.request_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.requester_id_) -
        reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.requester_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TurmsNotification::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 2, 65, 2> TurmsNotification::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963590,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TurmsNotification_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 timestamp = 1;
    {::_pbi::TcParser::FastV64S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional int64 request_id = 4;
    {::_pbi::TcParser::FastV64S1,
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.request_id_)}},
    // optional int32 code = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.code_)}},
    // optional string reason = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.reason_)}},
    // .turms.client.model.proto.TurmsNotification.Data data = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional int64 requester_id = 10;
    {::_pbi::TcParser::FastV64S1,
     {80, 6, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.requester_id_)}},
    // optional int32 close_status = 11;
    {::_pbi::TcParser::FastV32S1,
     {88, 5, 0, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.close_status_)}},
    // .turms.client.model.proto.TurmsRequest relayed_request = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 2, 1, PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.relayed_request_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // optional int64 request_id = 4;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.request_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int32 code = 5;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.code_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string reason = 6;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.reason_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .turms.client.model.proto.TurmsNotification.Data data = 7;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.data_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int64 requester_id = 10;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.requester_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int32 close_status = 11;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.close_status_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .turms.client.model.proto.TurmsRequest relayed_request = 12;
    {PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.relayed_request_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::TurmsNotification_Data>()},
    {::_pbi::TcParser::GetTable<::turms::client::model::proto::TurmsRequest>()},
  }}, {{
    "\52\0\0\0\6\0\0\0\0\0\0\0\0\0\0\0"
    "turms.client.model.proto.TurmsNotification"
    "reason"
  }},
};

::uint8_t* TurmsNotification::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.TurmsNotification)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_timestamp(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 request_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_request_id(), target);
  }

  // optional int32 code = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_code(), target);
  }

  // optional string reason = 6;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_reason();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "turms.client.model.proto.TurmsNotification.reason");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .turms.client.model.proto.TurmsNotification.Data data = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional int64 requester_id = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<10>(
            stream, this->_internal_requester_id(), target);
  }

  // optional int32 close_status = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_close_status(), target);
  }

  // .turms.client.model.proto.TurmsRequest relayed_request = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::relayed_request(this),
        _Internal::relayed_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.TurmsNotification)
  return target;
}

::size_t TurmsNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.TurmsNotification)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string reason = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_reason());
    }

    // .turms.client.model.proto.TurmsNotification.Data data = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // .turms.client.model.proto.TurmsRequest relayed_request = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.relayed_request_);
    }

  }
  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_timestamp());
  }

  if (cached_has_bits & 0x00000078u) {
    // optional int64 request_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_request_id());
    }

    // optional int32 code = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_code());
    }

    // optional int32 close_status = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_close_status());
    }

    // optional int64 requester_id = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_requester_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TurmsNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TurmsNotification*>(
      &from));
}

void TurmsNotification::MergeFrom(const TurmsNotification& from) {
  TurmsNotification* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.TurmsNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::turms::client::model::proto::TurmsNotification_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_relayed_request()->::turms::client::model::proto::TurmsRequest::MergeFrom(
          from._internal_relayed_request());
    }
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (cached_has_bits & 0x00000078u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.close_status_ = from._impl_.close_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.requester_id_ = from._impl_.requester_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TurmsNotification::CopyFrom(const TurmsNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.TurmsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TurmsNotification::IsInitialized() const {
  return true;
}

void TurmsNotification::InternalSwap(TurmsNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, lhs_arena,
                                       &other->_impl_.reason_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.requester_id_)
      + sizeof(TurmsNotification::_impl_.requester_id_)
      - PROTOBUF_FIELD_OFFSET(TurmsNotification, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

std::string TurmsNotification::GetTypeName() const {
  return "turms.client.model.proto.TurmsNotification";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
