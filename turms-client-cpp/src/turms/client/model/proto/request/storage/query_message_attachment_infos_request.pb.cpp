// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request/storage/query_message_attachment_infos_request.proto
// Protobuf C++ Version: 5.26.1

#include "turms/client/model/proto/request/storage/query_message_attachment_infos_request.pb.h"

#include <algorithm>

#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/wire_format_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {

inline constexpr QueryMessageAttachmentInfosRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      user_ids_{},
      _user_ids_cached_byte_size_{0},
      group_ids_{},
      _group_ids_cached_byte_size_{0},
      creation_date_start_{::int64_t{0}},
      creation_date_end_{::int64_t{0}},
      in_private_conversation_{false},
      are_shared_by_me_{false} {
}

template <typename>
PROTOBUF_CONSTEXPR QueryMessageAttachmentInfosRequest::QueryMessageAttachmentInfosRequest(
    ::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {
}
struct QueryMessageAttachmentInfosRequestDefaultTypeInternal {
    PROTOBUF_CONSTEXPR QueryMessageAttachmentInfosRequestDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {
    }
    ~QueryMessageAttachmentInfosRequestDefaultTypeInternal() {
    }
    union {
        QueryMessageAttachmentInfosRequest _instance;
    };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    QueryMessageAttachmentInfosRequestDefaultTypeInternal
        _QueryMessageAttachmentInfosRequest_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class QueryMessageAttachmentInfosRequest::_Internal {
   public:
    using HasBits = decltype(std::declval<QueryMessageAttachmentInfosRequest>()._impl_._has_bits_);
    static constexpr ::int32_t kHasBitsOffset =
        8 * PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_._has_bits_);
};

QueryMessageAttachmentInfosRequest::QueryMessageAttachmentInfosRequest(
    ::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
    SharedCtor(arena);
    // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.QueryMessageAttachmentInfosRequest)
}
inline PROTOBUF_NDEBUG_INLINE QueryMessageAttachmentInfosRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena,
    const Impl_& from)
    : _has_bits_{from._has_bits_},
      _cached_size_{0},
      user_ids_{visibility, arena, from.user_ids_},
      _user_ids_cached_byte_size_{0},
      group_ids_{visibility, arena, from.group_ids_},
      _group_ids_cached_byte_size_{0} {
}

QueryMessageAttachmentInfosRequest::QueryMessageAttachmentInfosRequest(
    ::google::protobuf::Arena* arena, const QueryMessageAttachmentInfosRequest& from)
    : ::google::protobuf::MessageLite(arena) {
    QueryMessageAttachmentInfosRequest* const _this = this;
    (void)_this;
    _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
    new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
    ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, creation_date_start_),
             reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, creation_date_start_),
             offsetof(Impl_, are_shared_by_me_) - offsetof(Impl_, creation_date_start_) +
                 sizeof(Impl_::are_shared_by_me_));

    // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.QueryMessageAttachmentInfosRequest)
}
inline PROTOBUF_NDEBUG_INLINE QueryMessageAttachmentInfosRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena)
    : _cached_size_{0},
      user_ids_{visibility, arena},
      _user_ids_cached_byte_size_{0},
      group_ids_{visibility, arena},
      _group_ids_cached_byte_size_{0} {
}

inline void QueryMessageAttachmentInfosRequest::SharedCtor(::_pb::Arena* arena) {
    new (&_impl_) Impl_(internal_visibility(), arena);
    ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, creation_date_start_),
             0,
             offsetof(Impl_, are_shared_by_me_) - offsetof(Impl_, creation_date_start_) +
                 sizeof(Impl_::are_shared_by_me_));
}
QueryMessageAttachmentInfosRequest::~QueryMessageAttachmentInfosRequest() {
    // @@protoc_insertion_point(destructor:turms.client.model.proto.QueryMessageAttachmentInfosRequest)
    _internal_metadata_.Delete<std::string>();
    SharedDtor();
}
inline void QueryMessageAttachmentInfosRequest::SharedDtor() {
    ABSL_DCHECK(GetArena() == nullptr);
    _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData* QueryMessageAttachmentInfosRequest::GetClassData()
    const {
    struct ClassData_ {
        ::google::protobuf::MessageLite::ClassData header;
        char type_name[60];
    };

    PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
        {
            nullptr,  // OnDemandRegisterArenaDtor
            PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_._cached_size_),
            true,
        },
        "turms.client.model.proto.QueryMessageAttachmentInfosRequest",
    };

    return &_data_.header;
}
PROTOBUF_NOINLINE void QueryMessageAttachmentInfosRequest::Clear() {
    // @@protoc_insertion_point(message_clear_start:turms.client.model.proto.QueryMessageAttachmentInfosRequest)
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.user_ids_.Clear();
    _impl_.group_ids_.Clear();
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
        ::memset(&_impl_.creation_date_start_,
                 0,
                 static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.are_shared_by_me_) -
                                       reinterpret_cast<char*>(&_impl_.creation_date_start_)) +
                     sizeof(_impl_.are_shared_by_me_));
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<std::string>();
}

const char* QueryMessageAttachmentInfosRequest::_InternalParse(const char* ptr,
                                                               ::_pbi::ParseContext* ctx) {
    ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
    return ptr;
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<3, 6, 0, 0, 2>
    QueryMessageAttachmentInfosRequest::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_._has_bits_),
            0,  // no _extensions_
            6,
            56,  // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967232,  // skipmap
            offsetof(decltype(_table_), field_entries),
            6,                                         // num_field_entries
            0,                                         // num_aux_entries
            offsetof(decltype(_table_), field_names),  // no aux_entries
            &_QueryMessageAttachmentInfosRequest_default_instance_._instance,
            ::_pbi::TcParser::GenericFallbackLite,  // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::turms::client::model::proto::
                                           QueryMessageAttachmentInfosRequest>(),  // to_prefetch
#endif  // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // repeated int64 user_ids = 1;
            {::_pbi::TcParser::FastV64P1,
             {10,
              63,
              0,
              PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.user_ids_)}},
            // repeated int64 group_ids = 2;
            {::_pbi::TcParser::FastV64P1,
             {18,
              63,
              0,
              PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.group_ids_)}},
            // optional int64 creation_date_start = 3;
            {::_pbi::TcParser::FastV64S1,
             {24,
              0,
              0,
              PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest,
                                    _impl_.creation_date_start_)}},
            // optional int64 creation_date_end = 4;
            {::_pbi::TcParser::FastV64S1,
             {32,
              1,
              0,
              PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest,
                                    _impl_.creation_date_end_)}},
            // optional bool in_private_conversation = 5;
            {::_pbi::TcParser::FastV8S1,
             {40,
              2,
              0,
              PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest,
                                    _impl_.in_private_conversation_)}},
            // optional bool are_shared_by_me = 6;
            {::_pbi::TcParser::FastV8S1,
             {48,
              3,
              0,
              PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.are_shared_by_me_)}},
            {::_pbi::TcParser::MiniParse, {}},
        }},
        {{65535, 65535}},
        {{
            // repeated int64 user_ids = 1;
            {PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.user_ids_),
             -1,
             0,
             (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
            // repeated int64 group_ids = 2;
            {PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.group_ids_),
             -1,
             0,
             (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
            // optional int64 creation_date_start = 3;
            {PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.creation_date_start_),
             _Internal::kHasBitsOffset + 0,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional int64 creation_date_end = 4;
            {PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.creation_date_end_),
             _Internal::kHasBitsOffset + 1,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional bool in_private_conversation = 5;
            {PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest,
                                   _impl_.in_private_conversation_),
             _Internal::kHasBitsOffset + 2,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kBool)},
            // optional bool are_shared_by_me = 6;
            {PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.are_shared_by_me_),
             _Internal::kHasBitsOffset + 3,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kBool)},
        }},
        // no aux_entries
        {{}},
};

::uint8_t* QueryMessageAttachmentInfosRequest::_InternalSerialize(
    ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.QueryMessageAttachmentInfosRequest)
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated int64 user_ids = 1;
    {
        int byte_size = _impl_._user_ids_cached_byte_size_.Get();
        if (byte_size > 0) {
            target = stream->WriteInt64Packed(1, _internal_user_ids(), byte_size, target);
        }
    }

    // repeated int64 group_ids = 2;
    {
        int byte_size = _impl_._group_ids_cached_byte_size_.Get();
        if (byte_size > 0) {
            target = stream->WriteInt64Packed(2, _internal_group_ids(), byte_size, target);
        }
    }

    cached_has_bits = _impl_._has_bits_[0];
    // optional int64 creation_date_start = 3;
    if (cached_has_bits & 0x00000001u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
            stream, this->_internal_creation_date_start(), target);
    }

    // optional int64 creation_date_end = 4;
    if (cached_has_bits & 0x00000002u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
            stream, this->_internal_creation_date_end(), target);
    }

    // optional bool in_private_conversation = 5;
    if (cached_has_bits & 0x00000004u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteBoolToArray(
            5, this->_internal_in_private_conversation(), target);
    }

    // optional bool are_shared_by_me = 6;
    if (cached_has_bits & 0x00000008u) {
        target = stream->EnsureSpace(target);
        target =
            ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_are_shared_by_me(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = stream->WriteRaw(
            _internal_metadata_
                .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                .data(),
            static_cast<int>(
                _internal_metadata_
                    .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                    .size()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.QueryMessageAttachmentInfosRequest)
    return target;
}

::size_t QueryMessageAttachmentInfosRequest::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.QueryMessageAttachmentInfosRequest)
    ::size_t total_size = 0;

    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated int64 user_ids = 1;
    {
        std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(this->_internal_user_ids());
        _impl_._user_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
        std::size_t tag_size =
            data_size == 0 ? 0
                           : 1 + ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
        total_size += tag_size + data_size;
    }
    // repeated int64 group_ids = 2;
    {
        std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(this->_internal_group_ids());
        _impl_._group_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
        std::size_t tag_size =
            data_size == 0 ? 0
                           : 1 + ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
        total_size += tag_size + data_size;
    }
    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
        // optional int64 creation_date_start = 3;
        if (cached_has_bits & 0x00000001u) {
            total_size +=
                ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_date_start());
        }

        // optional int64 creation_date_end = 4;
        if (cached_has_bits & 0x00000002u) {
            total_size +=
                ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_date_end());
        }

        // optional bool in_private_conversation = 5;
        if (cached_has_bits & 0x00000004u) {
            total_size += 2;
        }

        // optional bool are_shared_by_me = 6;
        if (cached_has_bits & 0x00000008u) {
            total_size += 2;
        }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        total_size += _internal_metadata_
                          .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                          .size();
    }
    _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
    return total_size;
}

void QueryMessageAttachmentInfosRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
    MergeFrom(*::_pbi::DownCast<const QueryMessageAttachmentInfosRequest*>(&from));
}

void QueryMessageAttachmentInfosRequest::MergeFrom(const QueryMessageAttachmentInfosRequest& from) {
    QueryMessageAttachmentInfosRequest* const _this = this;
    // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.QueryMessageAttachmentInfosRequest)
    ABSL_DCHECK_NE(&from, _this);
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    _this->_internal_mutable_user_ids()->MergeFrom(from._internal_user_ids());
    _this->_internal_mutable_group_ids()->MergeFrom(from._internal_group_ids());
    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x0000000fu) {
        if (cached_has_bits & 0x00000001u) {
            _this->_impl_.creation_date_start_ = from._impl_.creation_date_start_;
        }
        if (cached_has_bits & 0x00000002u) {
            _this->_impl_.creation_date_end_ = from._impl_.creation_date_end_;
        }
        if (cached_has_bits & 0x00000004u) {
            _this->_impl_.in_private_conversation_ = from._impl_.in_private_conversation_;
        }
        if (cached_has_bits & 0x00000008u) {
            _this->_impl_.are_shared_by_me_ = from._impl_.are_shared_by_me_;
        }
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
    _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void QueryMessageAttachmentInfosRequest::CopyFrom(const QueryMessageAttachmentInfosRequest& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.QueryMessageAttachmentInfosRequest)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

PROTOBUF_NOINLINE bool QueryMessageAttachmentInfosRequest::IsInitialized() const {
    return true;
}

void QueryMessageAttachmentInfosRequest::InternalSwap(
    QueryMessageAttachmentInfosRequest* PROTOBUF_RESTRICT other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
    _impl_.group_ids_.InternalSwap(&other->_impl_.group_ids_);
    ::google::protobuf::internal::memswap<
        PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.are_shared_by_me_) +
        sizeof(QueryMessageAttachmentInfosRequest::_impl_.are_shared_by_me_) -
        PROTOBUF_FIELD_OFFSET(QueryMessageAttachmentInfosRequest, _impl_.creation_date_start_)>(
        reinterpret_cast<char*>(&_impl_.creation_date_start_),
        reinterpret_cast<char*>(&other->_impl_.creation_date_start_));
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"