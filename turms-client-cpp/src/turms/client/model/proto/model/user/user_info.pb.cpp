// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/user/user_info.proto
// Protobuf C++ Version: 5.26.1

#include "turms/client/model/proto/model/user/user_info.pb.h"

#include <algorithm>

#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/wire_format_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace turms {
namespace client {
namespace model {
namespace proto {

inline constexpr UserInfo::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      name_(&::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
      intro_(&::google::protobuf::internal::fixed_address_empty_string,
             ::_pbi::ConstantInitialized()),
      profile_picture_(&::google::protobuf::internal::fixed_address_empty_string,
                       ::_pbi::ConstantInitialized()),
      id_{::int64_t{0}},
      registration_date_{::int64_t{0}},
      profile_access_strategy_{
          static_cast<::turms::client::model::proto::ProfileAccessStrategy>(0)},
      active_{false},
      last_updated_date_{::int64_t{0}} {
}

template <typename>
PROTOBUF_CONSTEXPR UserInfo::UserInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {
}
struct UserInfoDefaultTypeInternal {
    PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {
    }
    ~UserInfoDefaultTypeInternal() {
    }
    union {
        UserInfo _instance;
    };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace turms {
namespace client {
namespace model {
namespace proto {
// ===================================================================

class UserInfo::_Internal {
   public:
    using HasBits = decltype(std::declval<UserInfo>()._impl_._has_bits_);
    static constexpr ::int32_t kHasBitsOffset =
        8 * PROTOBUF_FIELD_OFFSET(UserInfo, _impl_._has_bits_);
};

UserInfo::UserInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
    SharedCtor(arena);
    // @@protoc_insertion_point(arena_constructor:turms.client.model.proto.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena,
    const Impl_& from)
    : _has_bits_{from._has_bits_},
      _cached_size_{0},
      name_(arena, from.name_),
      intro_(arena, from.intro_),
      profile_picture_(arena, from.profile_picture_) {
}

UserInfo::UserInfo(::google::protobuf::Arena* arena, const UserInfo& from)
    : ::google::protobuf::MessageLite(arena) {
    UserInfo* const _this = this;
    (void)_this;
    _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
    new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
    ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, id_),
             reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, id_),
             offsetof(Impl_, last_updated_date_) - offsetof(Impl_, id_) +
                 sizeof(Impl_::last_updated_date_));

    // @@protoc_insertion_point(copy_constructor:turms.client.model.proto.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena)
    : _cached_size_{0},
      name_(arena),
      intro_(arena),
      profile_picture_(arena) {
}

inline void UserInfo::SharedCtor(::_pb::Arena* arena) {
    new (&_impl_) Impl_(internal_visibility(), arena);
    ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, id_),
             0,
             offsetof(Impl_, last_updated_date_) - offsetof(Impl_, id_) +
                 sizeof(Impl_::last_updated_date_));
}
UserInfo::~UserInfo() {
    // @@protoc_insertion_point(destructor:turms.client.model.proto.UserInfo)
    _internal_metadata_.Delete<std::string>();
    SharedDtor();
}
inline void UserInfo::SharedDtor() {
    ABSL_DCHECK(GetArena() == nullptr);
    _impl_.name_.Destroy();
    _impl_.intro_.Destroy();
    _impl_.profile_picture_.Destroy();
    _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData* UserInfo::GetClassData() const {
    struct ClassData_ {
        ::google::protobuf::MessageLite::ClassData header;
        char type_name[34];
    };

    PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
        {
            nullptr,  // OnDemandRegisterArenaDtor
            PROTOBUF_FIELD_OFFSET(UserInfo, _impl_._cached_size_),
            true,
        },
        "turms.client.model.proto.UserInfo",
    };

    return &_data_.header;
}
PROTOBUF_NOINLINE void UserInfo::Clear() {
    // @@protoc_insertion_point(message_clear_start:turms.client.model.proto.UserInfo)
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x00000007u) {
        if (cached_has_bits & 0x00000001u) {
            _impl_.name_.ClearNonDefaultToEmpty();
        }
        if (cached_has_bits & 0x00000002u) {
            _impl_.intro_.ClearNonDefaultToEmpty();
        }
        if (cached_has_bits & 0x00000004u) {
            _impl_.profile_picture_.ClearNonDefaultToEmpty();
        }
    }
    if (cached_has_bits & 0x000000f8u) {
        ::memset(&_impl_.id_,
                 0,
                 static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.last_updated_date_) -
                                       reinterpret_cast<char*>(&_impl_.id_)) +
                     sizeof(_impl_.last_updated_date_));
    }
    _impl_._has_bits_.Clear();
    _internal_metadata_.Clear<std::string>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
    ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
    return ptr;
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<3, 8, 0, 74, 2>
    UserInfo::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(UserInfo, _impl_._has_bits_),
            0,  // no _extensions_
            8,
            56,  // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967040,  // skipmap
            offsetof(decltype(_table_), field_entries),
            8,                                         // num_field_entries
            0,                                         // num_aux_entries
            offsetof(decltype(_table_), field_names),  // no aux_entries
            &_UserInfo_default_instance_._instance,
            ::_pbi::TcParser::GenericFallbackLite,  // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::turms::client::model::proto::UserInfo>(),  // to_prefetch
#endif  // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // optional bool active = 8;
            {::_pbi::TcParser::FastV8S1,
             {64, 6, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.active_)}},
            // optional int64 id = 1;
            {::_pbi::TcParser::FastV64S1, {8, 3, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.id_)}},
            // optional string name = 2;
            {::_pbi::TcParser::FastUS1, {18, 0, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.name_)}},
            // optional string intro = 3;
            {::_pbi::TcParser::FastUS1, {26, 1, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.intro_)}},
            // optional string profile_picture = 4;
            {::_pbi::TcParser::FastUS1,
             {34, 2, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.profile_picture_)}},
            // optional .turms.client.model.proto.ProfileAccessStrategy profile_access_strategy = 5;
            {::_pbi::TcParser::FastV32S1,
             {40, 5, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.profile_access_strategy_)}},
            // optional int64 registration_date = 6;
            {::_pbi::TcParser::FastV64S1,
             {48, 4, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.registration_date_)}},
            // optional int64 last_updated_date = 7;
            {::_pbi::TcParser::FastV64S1,
             {56, 7, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.last_updated_date_)}},
        }},
        {{65535, 65535}},
        {{
            // optional int64 id = 1;
            {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.id_),
             _Internal::kHasBitsOffset + 3,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional string name = 2;
            {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.name_),
             _Internal::kHasBitsOffset + 0,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // optional string intro = 3;
            {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.intro_),
             _Internal::kHasBitsOffset + 1,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // optional string profile_picture = 4;
            {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.profile_picture_),
             _Internal::kHasBitsOffset + 2,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // optional .turms.client.model.proto.ProfileAccessStrategy profile_access_strategy = 5;
            {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.profile_access_strategy_),
             _Internal::kHasBitsOffset + 5,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
            // optional int64 registration_date = 6;
            {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.registration_date_),
             _Internal::kHasBitsOffset + 4,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional int64 last_updated_date = 7;
            {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.last_updated_date_),
             _Internal::kHasBitsOffset + 7,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // optional bool active = 8;
            {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.active_),
             _Internal::kHasBitsOffset + 6,
             0,
             (0 | ::_fl::kFcOptional | ::_fl::kBool)},
        }},
        // no aux_entries
        {{"\41\0\4\5\17\0\0\0\0\0\0\0\0\0\0\0"
          "turms.client.model.proto.UserInfo"
          "name"
          "intro"
          "profile_picture"}},
};

::uint8_t* UserInfo::_InternalSerialize(::uint8_t* target,
                                        ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:turms.client.model.proto.UserInfo)
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000008u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
        const std::string& _s = this->_internal_name();
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            _s.data(),
            static_cast<int>(_s.length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "turms.client.model.proto.UserInfo.name");
        target = stream->WriteStringMaybeAliased(2, _s, target);
    }

    // optional string intro = 3;
    if (cached_has_bits & 0x00000002u) {
        const std::string& _s = this->_internal_intro();
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            _s.data(),
            static_cast<int>(_s.length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "turms.client.model.proto.UserInfo.intro");
        target = stream->WriteStringMaybeAliased(3, _s, target);
    }

    // optional string profile_picture = 4;
    if (cached_has_bits & 0x00000004u) {
        const std::string& _s = this->_internal_profile_picture();
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            _s.data(),
            static_cast<int>(_s.length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "turms.client.model.proto.UserInfo.profile_picture");
        target = stream->WriteStringMaybeAliased(4, _s, target);
    }

    // optional .turms.client.model.proto.ProfileAccessStrategy profile_access_strategy = 5;
    if (cached_has_bits & 0x00000020u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteEnumToArray(
            5, this->_internal_profile_access_strategy(), target);
    }

    // optional int64 registration_date = 6;
    if (cached_has_bits & 0x00000010u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<6>(
            stream, this->_internal_registration_date(), target);
    }

    // optional int64 last_updated_date = 7;
    if (cached_has_bits & 0x00000080u) {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<7>(
            stream, this->_internal_last_updated_date(), target);
    }

    // optional bool active = 8;
    if (cached_has_bits & 0x00000040u) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_active(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = stream->WriteRaw(
            _internal_metadata_
                .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                .data(),
            static_cast<int>(
                _internal_metadata_
                    .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                    .size()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:turms.client.model.proto.UserInfo)
    return target;
}

::size_t UserInfo::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:turms.client.model.proto.UserInfo)
    ::size_t total_size = 0;

    ::uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    cached_has_bits = _impl_._has_bits_[0];
    if (cached_has_bits & 0x000000ffu) {
        // optional string name = 2;
        if (cached_has_bits & 0x00000001u) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->_internal_name());
        }

        // optional string intro = 3;
        if (cached_has_bits & 0x00000002u) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->_internal_intro());
        }

        // optional string profile_picture = 4;
        if (cached_has_bits & 0x00000004u) {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                  this->_internal_profile_picture());
        }

        // optional int64 id = 1;
        if (cached_has_bits & 0x00000008u) {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
        }

        // optional int64 registration_date = 6;
        if (cached_has_bits & 0x00000010u) {
            total_size +=
                ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_registration_date());
        }

        // optional .turms.client.model.proto.ProfileAccessStrategy profile_access_strategy = 5;
        if (cached_has_bits & 0x00000020u) {
            total_size +=
                1 + ::_pbi::WireFormatLite::EnumSize(this->_internal_profile_access_strategy());
        }

        // optional bool active = 8;
        if (cached_has_bits & 0x00000040u) {
            total_size += 2;
        }

        // optional int64 last_updated_date = 7;
        if (cached_has_bits & 0x00000080u) {
            total_size +=
                ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_updated_date());
        }
    }
    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        total_size += _internal_metadata_
                          .unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString)
                          .size();
    }
    _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
    return total_size;
}

void UserInfo::CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from) {
    MergeFrom(*::_pbi::DownCast<const UserInfo*>(&from));
}

void UserInfo::MergeFrom(const UserInfo& from) {
    UserInfo* const _this = this;
    // @@protoc_insertion_point(class_specific_merge_from_start:turms.client.model.proto.UserInfo)
    ABSL_DCHECK_NE(&from, _this);
    ::uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = from._impl_._has_bits_[0];
    if (cached_has_bits & 0x000000ffu) {
        if (cached_has_bits & 0x00000001u) {
            _this->_internal_set_name(from._internal_name());
        }
        if (cached_has_bits & 0x00000002u) {
            _this->_internal_set_intro(from._internal_intro());
        }
        if (cached_has_bits & 0x00000004u) {
            _this->_internal_set_profile_picture(from._internal_profile_picture());
        }
        if (cached_has_bits & 0x00000008u) {
            _this->_impl_.id_ = from._impl_.id_;
        }
        if (cached_has_bits & 0x00000010u) {
            _this->_impl_.registration_date_ = from._impl_.registration_date_;
        }
        if (cached_has_bits & 0x00000020u) {
            _this->_impl_.profile_access_strategy_ = from._impl_.profile_access_strategy_;
        }
        if (cached_has_bits & 0x00000040u) {
            _this->_impl_.active_ = from._impl_.active_;
        }
        if (cached_has_bits & 0x00000080u) {
            _this->_impl_.last_updated_date_ = from._impl_.last_updated_date_;
        }
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
    _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:turms.client.model.proto.UserInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

PROTOBUF_NOINLINE bool UserInfo::IsInitialized() const {
    return true;
}

void UserInfo::InternalSwap(UserInfo* PROTOBUF_RESTRICT other) {
    using std::swap;
    auto* arena = GetArena();
    ABSL_DCHECK_EQ(arena, other->GetArena());
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
    ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
    ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.intro_, &other->_impl_.intro_, arena);
    ::_pbi::ArenaStringPtr::InternalSwap(
        &_impl_.profile_picture_, &other->_impl_.profile_picture_, arena);
    ::google::protobuf::internal::memswap<
        PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.last_updated_date_) +
        sizeof(UserInfo::_impl_.last_updated_date_) - PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.id_)>(
        reinterpret_cast<char*>(&_impl_.id_), reinterpret_cast<char*>(&other->_impl_.id_));
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"