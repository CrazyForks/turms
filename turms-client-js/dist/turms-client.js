/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 143);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(131);
/* harmony import */ var core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_0__);


var RequestUtil = function () {
  function RequestUtil() {}

  RequestUtil.wrapValueIfNotNull = function (value) {
    return value ? {
      value: value
    } : undefined;
  };

  RequestUtil.wrapTimeIfNotNull = function (value) {
    return value ? {
      value: '' + value.getTime()
    } : undefined;
  };

  RequestUtil.isFalsy = function (value) {
    return typeof value === 'undefined' || value === null || value === [];
  };

  RequestUtil.isTruthy = function (value) {
    return !this.isFalsy(value);
  };

  RequestUtil.throwIfEmpty = function (value) {
    if (Object.keys(value).length === 0) {
      throw this.ERROR;
    }
  };

  RequestUtil.throwIfAnyFalsy = function () {
    var values = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }

    if (this.isFalsy(values)) {
      throw this.ERROR;
    } else {
      for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {
        var value = values_1[_a];

        if (this.isFalsy(value)) {
          throw this.ERROR;
        }
      }
    }
  };

  RequestUtil.throwIfAllFalsy = function () {
    var values = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }

    if (RequestUtil.areAllFalsy(values)) {
      throw this.ERROR;
    }
  };

  RequestUtil.areAllFalsy = function () {
    var values = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }

    if (this.isFalsy(values)) {
      return true;
    } else {
      for (var _a = 0, values_2 = values; _a < values_2.length; _a++) {
        var value = values_2[_a];

        if (this.isTruthy(value)) {
          return false;
        }
      }

      return true;
    }
  };

  RequestUtil.ERROR = new Error("Illegal parameters");
  return RequestUtil;
}();

/* harmony default export */ __webpack_exports__["a"] = (RequestUtil);

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(207);
/* harmony import */ var core_js_modules_es_symbol__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_symbol_description__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(209);
/* harmony import */ var core_js_modules_es_symbol_description__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(210);
/* harmony import */ var core_js_modules_es_symbol_iterator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26);
/* harmony import */ var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(211);
/* harmony import */ var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(131);
/* harmony import */ var core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(24);
/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(89);
/* harmony import */ var core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_string_ends_with__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(214);
/* harmony import */ var core_js_modules_es_string_ends_with__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_ends_with__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(215);
/* harmony import */ var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(216);
/* harmony import */ var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(220);
/* harmony import */ var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _model_turms_status_code__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(18);













function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



var NotificationUtil = function () {
  function NotificationUtil() {}

  NotificationUtil.transform = function (data, parentKey) {
    var _this = this;

    if (typeof data !== 'undefined' && data !== null) {
      if (typeof parentKey === 'string' && (parentKey.endsWith('Date') || parentKey.endsWith('_date') || parentKey === 'date') && typeof data === 'string') {
        return new Date(parseInt(data));
      } else if (_typeof(data) === 'object') {
        if (data instanceof Array) {
          data = data.map(function (item) {
            return _this.transform(item);
          });
        } else {
          var keys = Object.keys(data);

          for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];

            if ((key === 'value' || key === 'values') && keys.length === 1) {
              return data[key];
            } else {
              data[key] = this.transform(data[key], key);
            }
          }
        }
      }
    }

    return data;
  };

  NotificationUtil.getFirstVal = function (notification, path) {
    path += '.values.0';
    return this._get(notification, path, undefined);
  };

  NotificationUtil.getVal = function (notification, path) {
    path += '.value';
    return this._get(notification, path, undefined);
  };

  NotificationUtil.getAndTransform = function (notification, path) {
    return this.transform(this.get(notification, path));
  };

  NotificationUtil.getArrAndTransform = function (notification, path) {
    return this.transform(this.getArr(notification, path));
  };

  NotificationUtil.get = function (notification, path) {
    return this._get(notification, path, undefined);
  };

  NotificationUtil.getArr = function (notification, path) {
    return this._get(notification, path, []);
  };

  NotificationUtil._get = function (notification, path, defaultValue) {
    path = 'data.' + path;

    if (notification.code === _model_turms_status_code__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].NO_CONTENT) {
      return defaultValue;
    } else {
      var keys = path.split('.');
      var object = notification;

      for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
        var key = keys_2[_i];
        object = object[key];

        if (!object) {
          return defaultValue;
        }
      }

      return object;
    }
  };

  NotificationUtil.transformDate = function (date) {
    return date ? new Date(parseInt(date.value)) : undefined;
  };

  NotificationUtil.getIdsWithVer = function (n) {
    var date = this.get(n, 'idsWithVersion.lastUpdatedDate');
    date = this.transformDate(date);
    return {
      ids: this.getArr(n, 'idsWithVersion.values'),
      lastUpdatedDate: date
    };
  };

  NotificationUtil.getVerDate = function (n, path) {
    path += '.lastUpdatedDate';
    return NotificationUtil.getAndTransform(n, path);
  };

  return NotificationUtil;
}();

/* harmony default export */ __webpack_exports__["a"] = (NotificationUtil);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func
  Function('return this')();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(39)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var NATIVE_ARRAY_BUFFER = __webpack_require__(114);
var DESCRIPTORS = __webpack_require__(10);
var global = __webpack_require__(2);
var isObject = __webpack_require__(9);
var has = __webpack_require__(7);
var classof = __webpack_require__(50);
var createNonEnumerableProperty = __webpack_require__(13);
var redefine = __webpack_require__(19);
var defineProperty = __webpack_require__(14).f;
var getPrototypeOf = __webpack_require__(49);
var setPrototypeOf = __webpack_require__(36);
var wellKnownSymbol = __webpack_require__(5);
var uid = __webpack_require__(42);

var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var isPrototypeOf = ObjectPrototype.isPrototypeOf;

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQIRED = false;
var NAME;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var isView = function isView(it) {
  var klass = classof(it);
  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
};

var isTypedArray = function (it) {
  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
};

var aTypedArray = function (it) {
  if (isTypedArray(it)) return it;
  throw TypeError('Target is not a typed array');
};

var aTypedArrayConstructor = function (C) {
  if (setPrototypeOf) {
    if (isPrototypeOf.call(TypedArray, C)) return C;
  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
      return C;
    }
  } throw TypeError('Target is not a typed array constructor');
};

var exportTypedArrayMethod = function (KEY, property, forced) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
      delete TypedArrayConstructor.prototype[KEY];
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    redefine(TypedArrayPrototype, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
  }
};

var exportTypedArrayStaticMethod = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
        delete TypedArrayConstructor[KEY];
      }
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      redefine(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow
  TypedArray = function TypedArray() {
    throw TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQIRED = true;
  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {
    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
  } });
  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
  }
}

module.exports = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportTypedArrayMethod: exportTypedArrayMethod,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var shared = __webpack_require__(53);
var has = __webpack_require__(7);
var uid = __webpack_require__(42);
var NATIVE_SYMBOL = __webpack_require__(56);
var USE_SYMBOL_AS_UID = __webpack_require__(94);

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name)) {
    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/


var $protobuf = __webpack_require__(190);

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.im = (function() {

    /**
     * Namespace im.
     * @exports im
     * @namespace
     */
    var im = {};

    im.turms = (function() {

        /**
         * Namespace turms.
         * @memberof im
         * @namespace
         */
        var turms = {};

        turms.proto = (function() {

            /**
             * Namespace proto.
             * @memberof im.turms
             * @namespace
             */
            var proto = {};

            /**
             * ChatType enum.
             * @name im.turms.proto.ChatType
             * @enum {string}
             * @property {number} PRIVATE=0 PRIVATE value
             * @property {number} GROUP=1 GROUP value
             */
            proto.ChatType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "PRIVATE"] = 0;
                values[valuesById[1] = "GROUP"] = 1;
                return values;
            })();

            /**
             * ContentType enum.
             * @name im.turms.proto.ContentType
             * @enum {string}
             * @property {number} PROFILE=0 PROFILE value
             * @property {number} ATTACHMENT=1 ATTACHMENT value
             */
            proto.ContentType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "PROFILE"] = 0;
                values[valuesById[1] = "ATTACHMENT"] = 1;
                return values;
            })();

            /**
             * DeviceType enum.
             * @name im.turms.proto.DeviceType
             * @enum {string}
             * @property {number} DESKTOP=0 DESKTOP value
             * @property {number} BROWSER=1 BROWSER value
             * @property {number} IOS=2 IOS value
             * @property {number} ANDROID=3 ANDROID value
             * @property {number} OTHERS=4 OTHERS value
             * @property {number} UNKNOWN=5 UNKNOWN value
             */
            proto.DeviceType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DESKTOP"] = 0;
                values[valuesById[1] = "BROWSER"] = 1;
                values[valuesById[2] = "IOS"] = 2;
                values[valuesById[3] = "ANDROID"] = 3;
                values[valuesById[4] = "OTHERS"] = 4;
                values[valuesById[5] = "UNKNOWN"] = 5;
                return values;
            })();

            /**
             * GroupMemberRole enum.
             * @name im.turms.proto.GroupMemberRole
             * @enum {string}
             * @property {number} OWNER=0 OWNER value
             * @property {number} MANAGER=1 MANAGER value
             * @property {number} MEMBER=2 MEMBER value
             * @property {number} GUEST=3 GUEST value
             * @property {number} ANONYMOUS_GUEST=4 ANONYMOUS_GUEST value
             */
            proto.GroupMemberRole = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "OWNER"] = 0;
                values[valuesById[1] = "MANAGER"] = 1;
                values[valuesById[2] = "MEMBER"] = 2;
                values[valuesById[3] = "GUEST"] = 3;
                values[valuesById[4] = "ANONYMOUS_GUEST"] = 4;
                return values;
            })();

            /**
             * MessageDeliveryStatus enum.
             * @name im.turms.proto.MessageDeliveryStatus
             * @enum {string}
             * @property {number} READY=0 READY value
             * @property {number} SENDING=1 SENDING value
             * @property {number} RECEIVED=2 RECEIVED value
             * @property {number} RECALLING=3 RECALLING value
             * @property {number} RECALLED=4 RECALLED value
             */
            proto.MessageDeliveryStatus = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "READY"] = 0;
                values[valuesById[1] = "SENDING"] = 1;
                values[valuesById[2] = "RECEIVED"] = 2;
                values[valuesById[3] = "RECALLING"] = 3;
                values[valuesById[4] = "RECALLED"] = 4;
                return values;
            })();

            /**
             * ProfileAccessStrategy enum.
             * @name im.turms.proto.ProfileAccessStrategy
             * @enum {string}
             * @property {number} ALL=0 ALL value
             * @property {number} ALL_EXCEPT_BLACKLISTED_USERS=1 ALL_EXCEPT_BLACKLISTED_USERS value
             * @property {number} FRIENDS=2 FRIENDS value
             */
            proto.ProfileAccessStrategy = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ALL"] = 0;
                values[valuesById[1] = "ALL_EXCEPT_BLACKLISTED_USERS"] = 1;
                values[valuesById[2] = "FRIENDS"] = 2;
                return values;
            })();

            /**
             * RequestStatus enum.
             * @name im.turms.proto.RequestStatus
             * @enum {string}
             * @property {number} PENDING=0 PENDING value
             * @property {number} ACCEPTED=1 ACCEPTED value
             * @property {number} ACCEPTED_WITHOUT_CONFIRM=2 ACCEPTED_WITHOUT_CONFIRM value
             * @property {number} DECLINED=3 DECLINED value
             * @property {number} IGNORED=4 IGNORED value
             * @property {number} EXPIRED=5 EXPIRED value
             * @property {number} CANCELED=6 CANCELED value
             */
            proto.RequestStatus = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "PENDING"] = 0;
                values[valuesById[1] = "ACCEPTED"] = 1;
                values[valuesById[2] = "ACCEPTED_WITHOUT_CONFIRM"] = 2;
                values[valuesById[3] = "DECLINED"] = 3;
                values[valuesById[4] = "IGNORED"] = 4;
                values[valuesById[5] = "EXPIRED"] = 5;
                values[valuesById[6] = "CANCELED"] = 6;
                return values;
            })();

            /**
             * ResponseAction enum.
             * @name im.turms.proto.ResponseAction
             * @enum {string}
             * @property {number} ACCEPT=0 ACCEPT value
             * @property {number} DECLINE=1 DECLINE value
             * @property {number} IGNORE=2 IGNORE value
             */
            proto.ResponseAction = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ACCEPT"] = 0;
                values[valuesById[1] = "DECLINE"] = 1;
                values[valuesById[2] = "IGNORE"] = 2;
                return values;
            })();

            /**
             * UserStatus enum.
             * @name im.turms.proto.UserStatus
             * @enum {string}
             * @property {number} AVAILABLE=0 AVAILABLE value
             * @property {number} OFFLINE=1 OFFLINE value
             * @property {number} INVISIBLE=2 INVISIBLE value
             * @property {number} BUSY=3 BUSY value
             * @property {number} DO_NOT_DISTURB=4 DO_NOT_DISTURB value
             * @property {number} AWAY=5 AWAY value
             * @property {number} BE_RIGHT_BACK=6 BE_RIGHT_BACK value
             */
            proto.UserStatus = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "AVAILABLE"] = 0;
                values[valuesById[1] = "OFFLINE"] = 1;
                values[valuesById[2] = "INVISIBLE"] = 2;
                values[valuesById[3] = "BUSY"] = 3;
                values[valuesById[4] = "DO_NOT_DISTURB"] = 4;
                values[valuesById[5] = "AWAY"] = 5;
                values[valuesById[6] = "BE_RIGHT_BACK"] = 6;
                return values;
            })();

            proto.Int64ValuesWithVersion = (function() {

                /**
                 * Properties of an Int64ValuesWithVersion.
                 * @memberof im.turms.proto
                 * @interface IInt64ValuesWithVersion
                 * @property {Array.<string>|null} [values] Int64ValuesWithVersion values
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] Int64ValuesWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new Int64ValuesWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents an Int64ValuesWithVersion.
                 * @implements IInt64ValuesWithVersion
                 * @constructor
                 * @param {im.turms.proto.IInt64ValuesWithVersion=} [properties] Properties to set
                 */
                function Int64ValuesWithVersion(properties) {
                    this.values = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Int64ValuesWithVersion values.
                 * @member {Array.<string>} values
                 * @memberof im.turms.proto.Int64ValuesWithVersion
                 * @instance
                 */
                Int64ValuesWithVersion.prototype.values = $util.emptyArray;

                /**
                 * Int64ValuesWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.Int64ValuesWithVersion
                 * @instance
                 */
                Int64ValuesWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified Int64ValuesWithVersion message. Does not implicitly {@link im.turms.proto.Int64ValuesWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.Int64ValuesWithVersion
                 * @static
                 * @param {im.turms.proto.IInt64ValuesWithVersion} message Int64ValuesWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int64ValuesWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.values != null && message.values.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.values.length; ++i)
                            writer.int64(message.values[i]);
                        writer.ldelim();
                    }
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an Int64ValuesWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.Int64ValuesWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.Int64ValuesWithVersion} Int64ValuesWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int64ValuesWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.Int64ValuesWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.values && message.values.length))
                                message.values = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.values.push(reader.int64().toString());
                            } else
                                message.values.push(reader.int64().toString());
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return Int64ValuesWithVersion;
            })();

            proto.Int64Values = (function() {

                /**
                 * Properties of an Int64Values.
                 * @memberof im.turms.proto
                 * @interface IInt64Values
                 * @property {Array.<string>|null} [values] Int64Values values
                 */

                /**
                 * Constructs a new Int64Values.
                 * @memberof im.turms.proto
                 * @classdesc Represents an Int64Values.
                 * @implements IInt64Values
                 * @constructor
                 * @param {im.turms.proto.IInt64Values=} [properties] Properties to set
                 */
                function Int64Values(properties) {
                    this.values = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Int64Values values.
                 * @member {Array.<string>} values
                 * @memberof im.turms.proto.Int64Values
                 * @instance
                 */
                Int64Values.prototype.values = $util.emptyArray;

                /**
                 * Encodes the specified Int64Values message. Does not implicitly {@link im.turms.proto.Int64Values.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.Int64Values
                 * @static
                 * @param {im.turms.proto.IInt64Values} message Int64Values message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int64Values.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.values != null && message.values.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.values.length; ++i)
                            writer.int64(message.values[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Decodes an Int64Values message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.Int64Values
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.Int64Values} Int64Values
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int64Values.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.Int64Values();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.values && message.values.length))
                                message.values = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.values.push(reader.int64().toString());
                            } else
                                message.values.push(reader.int64().toString());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return Int64Values;
            })();

            proto.AudioFile = (function() {

                /**
                 * Properties of an AudioFile.
                 * @memberof im.turms.proto
                 * @interface IAudioFile
                 * @property {im.turms.proto.AudioFile.IDescription|null} [description] AudioFile description
                 * @property {google.protobuf.IBytesValue|null} [data] AudioFile data
                 */

                /**
                 * Constructs a new AudioFile.
                 * @memberof im.turms.proto
                 * @classdesc Represents an AudioFile.
                 * @implements IAudioFile
                 * @constructor
                 * @param {im.turms.proto.IAudioFile=} [properties] Properties to set
                 */
                function AudioFile(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AudioFile description.
                 * @member {im.turms.proto.AudioFile.IDescription|null|undefined} description
                 * @memberof im.turms.proto.AudioFile
                 * @instance
                 */
                AudioFile.prototype.description = null;

                /**
                 * AudioFile data.
                 * @member {google.protobuf.IBytesValue|null|undefined} data
                 * @memberof im.turms.proto.AudioFile
                 * @instance
                 */
                AudioFile.prototype.data = null;

                /**
                 * Encodes the specified AudioFile message. Does not implicitly {@link im.turms.proto.AudioFile.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.AudioFile
                 * @static
                 * @param {im.turms.proto.IAudioFile} message AudioFile message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AudioFile.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        $root.im.turms.proto.AudioFile.Description.encode(message.description, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        $root.google.protobuf.BytesValue.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an AudioFile message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.AudioFile
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.AudioFile} AudioFile
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AudioFile.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.AudioFile();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.description = $root.im.turms.proto.AudioFile.Description.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.data = $root.google.protobuf.BytesValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                AudioFile.Description = (function() {

                    /**
                     * Properties of a Description.
                     * @memberof im.turms.proto.AudioFile
                     * @interface IDescription
                     * @property {string|null} [url] Description url
                     * @property {google.protobuf.IInt32Value|null} [duration] Description duration
                     * @property {google.protobuf.IInt32Value|null} [size] Description size
                     * @property {google.protobuf.IStringValue|null} [format] Description format
                     */

                    /**
                     * Constructs a new Description.
                     * @memberof im.turms.proto.AudioFile
                     * @classdesc Represents a Description.
                     * @implements IDescription
                     * @constructor
                     * @param {im.turms.proto.AudioFile.IDescription=} [properties] Properties to set
                     */
                    function Description(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Description url.
                     * @member {string} url
                     * @memberof im.turms.proto.AudioFile.Description
                     * @instance
                     */
                    Description.prototype.url = "";

                    /**
                     * Description duration.
                     * @member {google.protobuf.IInt32Value|null|undefined} duration
                     * @memberof im.turms.proto.AudioFile.Description
                     * @instance
                     */
                    Description.prototype.duration = null;

                    /**
                     * Description size.
                     * @member {google.protobuf.IInt32Value|null|undefined} size
                     * @memberof im.turms.proto.AudioFile.Description
                     * @instance
                     */
                    Description.prototype.size = null;

                    /**
                     * Description format.
                     * @member {google.protobuf.IStringValue|null|undefined} format
                     * @memberof im.turms.proto.AudioFile.Description
                     * @instance
                     */
                    Description.prototype.format = null;

                    /**
                     * Encodes the specified Description message. Does not implicitly {@link im.turms.proto.AudioFile.Description.verify|verify} messages.
                     * @function encode
                     * @memberof im.turms.proto.AudioFile.Description
                     * @static
                     * @param {im.turms.proto.AudioFile.IDescription} message Description message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Description.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                        if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                            $root.google.protobuf.Int32Value.encode(message.duration, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                            $root.google.protobuf.Int32Value.encode(message.size, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                            $root.google.protobuf.StringValue.encode(message.format, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Decodes a Description message from the specified reader or buffer.
                     * @function decode
                     * @memberof im.turms.proto.AudioFile.Description
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {im.turms.proto.AudioFile.Description} Description
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Description.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.AudioFile.Description();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.url = reader.string();
                                break;
                            case 2:
                                message.duration = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.size = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.format = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    return Description;
                })();

                return AudioFile;
            })();

            proto.File = (function() {

                /**
                 * Properties of a File.
                 * @memberof im.turms.proto
                 * @interface IFile
                 * @property {im.turms.proto.File.IDescription|null} [description] File description
                 * @property {google.protobuf.IBytesValue|null} [data] File data
                 */

                /**
                 * Constructs a new File.
                 * @memberof im.turms.proto
                 * @classdesc Represents a File.
                 * @implements IFile
                 * @constructor
                 * @param {im.turms.proto.IFile=} [properties] Properties to set
                 */
                function File(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * File description.
                 * @member {im.turms.proto.File.IDescription|null|undefined} description
                 * @memberof im.turms.proto.File
                 * @instance
                 */
                File.prototype.description = null;

                /**
                 * File data.
                 * @member {google.protobuf.IBytesValue|null|undefined} data
                 * @memberof im.turms.proto.File
                 * @instance
                 */
                File.prototype.data = null;

                /**
                 * Encodes the specified File message. Does not implicitly {@link im.turms.proto.File.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.File
                 * @static
                 * @param {im.turms.proto.IFile} message File message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                File.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        $root.im.turms.proto.File.Description.encode(message.description, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        $root.google.protobuf.BytesValue.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a File message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.File
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.File} File
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                File.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.File();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.description = $root.im.turms.proto.File.Description.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.data = $root.google.protobuf.BytesValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                File.Description = (function() {

                    /**
                     * Properties of a Description.
                     * @memberof im.turms.proto.File
                     * @interface IDescription
                     * @property {string|null} [url] Description url
                     * @property {google.protobuf.IInt32Value|null} [size] Description size
                     * @property {google.protobuf.IStringValue|null} [format] Description format
                     */

                    /**
                     * Constructs a new Description.
                     * @memberof im.turms.proto.File
                     * @classdesc Represents a Description.
                     * @implements IDescription
                     * @constructor
                     * @param {im.turms.proto.File.IDescription=} [properties] Properties to set
                     */
                    function Description(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Description url.
                     * @member {string} url
                     * @memberof im.turms.proto.File.Description
                     * @instance
                     */
                    Description.prototype.url = "";

                    /**
                     * Description size.
                     * @member {google.protobuf.IInt32Value|null|undefined} size
                     * @memberof im.turms.proto.File.Description
                     * @instance
                     */
                    Description.prototype.size = null;

                    /**
                     * Description format.
                     * @member {google.protobuf.IStringValue|null|undefined} format
                     * @memberof im.turms.proto.File.Description
                     * @instance
                     */
                    Description.prototype.format = null;

                    /**
                     * Encodes the specified Description message. Does not implicitly {@link im.turms.proto.File.Description.verify|verify} messages.
                     * @function encode
                     * @memberof im.turms.proto.File.Description
                     * @static
                     * @param {im.turms.proto.File.IDescription} message Description message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Description.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                        if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                            $root.google.protobuf.Int32Value.encode(message.size, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                            $root.google.protobuf.StringValue.encode(message.format, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Decodes a Description message from the specified reader or buffer.
                     * @function decode
                     * @memberof im.turms.proto.File.Description
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {im.turms.proto.File.Description} Description
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Description.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.File.Description();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.url = reader.string();
                                break;
                            case 2:
                                message.size = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.format = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    return Description;
                })();

                return File;
            })();

            proto.ImageFile = (function() {

                /**
                 * Properties of an ImageFile.
                 * @memberof im.turms.proto
                 * @interface IImageFile
                 * @property {im.turms.proto.ImageFile.IDescription|null} [description] ImageFile description
                 * @property {google.protobuf.IBytesValue|null} [data] ImageFile data
                 */

                /**
                 * Constructs a new ImageFile.
                 * @memberof im.turms.proto
                 * @classdesc Represents an ImageFile.
                 * @implements IImageFile
                 * @constructor
                 * @param {im.turms.proto.IImageFile=} [properties] Properties to set
                 */
                function ImageFile(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ImageFile description.
                 * @member {im.turms.proto.ImageFile.IDescription|null|undefined} description
                 * @memberof im.turms.proto.ImageFile
                 * @instance
                 */
                ImageFile.prototype.description = null;

                /**
                 * ImageFile data.
                 * @member {google.protobuf.IBytesValue|null|undefined} data
                 * @memberof im.turms.proto.ImageFile
                 * @instance
                 */
                ImageFile.prototype.data = null;

                /**
                 * Encodes the specified ImageFile message. Does not implicitly {@link im.turms.proto.ImageFile.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.ImageFile
                 * @static
                 * @param {im.turms.proto.IImageFile} message ImageFile message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ImageFile.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        $root.im.turms.proto.ImageFile.Description.encode(message.description, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        $root.google.protobuf.BytesValue.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an ImageFile message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.ImageFile
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.ImageFile} ImageFile
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ImageFile.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.ImageFile();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.description = $root.im.turms.proto.ImageFile.Description.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.data = $root.google.protobuf.BytesValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                ImageFile.Description = (function() {

                    /**
                     * Properties of a Description.
                     * @memberof im.turms.proto.ImageFile
                     * @interface IDescription
                     * @property {string|null} [url] Description url
                     * @property {google.protobuf.IBoolValue|null} [original] Description original
                     * @property {google.protobuf.IInt32Value|null} [imageSize] Description imageSize
                     * @property {google.protobuf.IInt32Value|null} [fileSize] Description fileSize
                     */

                    /**
                     * Constructs a new Description.
                     * @memberof im.turms.proto.ImageFile
                     * @classdesc Represents a Description.
                     * @implements IDescription
                     * @constructor
                     * @param {im.turms.proto.ImageFile.IDescription=} [properties] Properties to set
                     */
                    function Description(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Description url.
                     * @member {string} url
                     * @memberof im.turms.proto.ImageFile.Description
                     * @instance
                     */
                    Description.prototype.url = "";

                    /**
                     * Description original.
                     * @member {google.protobuf.IBoolValue|null|undefined} original
                     * @memberof im.turms.proto.ImageFile.Description
                     * @instance
                     */
                    Description.prototype.original = null;

                    /**
                     * Description imageSize.
                     * @member {google.protobuf.IInt32Value|null|undefined} imageSize
                     * @memberof im.turms.proto.ImageFile.Description
                     * @instance
                     */
                    Description.prototype.imageSize = null;

                    /**
                     * Description fileSize.
                     * @member {google.protobuf.IInt32Value|null|undefined} fileSize
                     * @memberof im.turms.proto.ImageFile.Description
                     * @instance
                     */
                    Description.prototype.fileSize = null;

                    /**
                     * Encodes the specified Description message. Does not implicitly {@link im.turms.proto.ImageFile.Description.verify|verify} messages.
                     * @function encode
                     * @memberof im.turms.proto.ImageFile.Description
                     * @static
                     * @param {im.turms.proto.ImageFile.IDescription} message Description message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Description.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                        if (message.original != null && Object.hasOwnProperty.call(message, "original"))
                            $root.google.protobuf.BoolValue.encode(message.original, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.imageSize != null && Object.hasOwnProperty.call(message, "imageSize"))
                            $root.google.protobuf.Int32Value.encode(message.imageSize, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.fileSize != null && Object.hasOwnProperty.call(message, "fileSize"))
                            $root.google.protobuf.Int32Value.encode(message.fileSize, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Decodes a Description message from the specified reader or buffer.
                     * @function decode
                     * @memberof im.turms.proto.ImageFile.Description
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {im.turms.proto.ImageFile.Description} Description
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Description.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.ImageFile.Description();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.url = reader.string();
                                break;
                            case 2:
                                message.original = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.imageSize = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.fileSize = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    return Description;
                })();

                return ImageFile;
            })();

            proto.VideoFile = (function() {

                /**
                 * Properties of a VideoFile.
                 * @memberof im.turms.proto
                 * @interface IVideoFile
                 * @property {im.turms.proto.VideoFile.IDescription|null} [description] VideoFile description
                 * @property {google.protobuf.IBytesValue|null} [data] VideoFile data
                 */

                /**
                 * Constructs a new VideoFile.
                 * @memberof im.turms.proto
                 * @classdesc Represents a VideoFile.
                 * @implements IVideoFile
                 * @constructor
                 * @param {im.turms.proto.IVideoFile=} [properties] Properties to set
                 */
                function VideoFile(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VideoFile description.
                 * @member {im.turms.proto.VideoFile.IDescription|null|undefined} description
                 * @memberof im.turms.proto.VideoFile
                 * @instance
                 */
                VideoFile.prototype.description = null;

                /**
                 * VideoFile data.
                 * @member {google.protobuf.IBytesValue|null|undefined} data
                 * @memberof im.turms.proto.VideoFile
                 * @instance
                 */
                VideoFile.prototype.data = null;

                /**
                 * Encodes the specified VideoFile message. Does not implicitly {@link im.turms.proto.VideoFile.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.VideoFile
                 * @static
                 * @param {im.turms.proto.IVideoFile} message VideoFile message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VideoFile.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        $root.im.turms.proto.VideoFile.Description.encode(message.description, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        $root.google.protobuf.BytesValue.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a VideoFile message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.VideoFile
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.VideoFile} VideoFile
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VideoFile.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.VideoFile();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.description = $root.im.turms.proto.VideoFile.Description.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.data = $root.google.protobuf.BytesValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                VideoFile.Description = (function() {

                    /**
                     * Properties of a Description.
                     * @memberof im.turms.proto.VideoFile
                     * @interface IDescription
                     * @property {string|null} [url] Description url
                     * @property {google.protobuf.IInt32Value|null} [duration] Description duration
                     * @property {google.protobuf.IInt32Value|null} [size] Description size
                     * @property {google.protobuf.IStringValue|null} [format] Description format
                     */

                    /**
                     * Constructs a new Description.
                     * @memberof im.turms.proto.VideoFile
                     * @classdesc Represents a Description.
                     * @implements IDescription
                     * @constructor
                     * @param {im.turms.proto.VideoFile.IDescription=} [properties] Properties to set
                     */
                    function Description(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Description url.
                     * @member {string} url
                     * @memberof im.turms.proto.VideoFile.Description
                     * @instance
                     */
                    Description.prototype.url = "";

                    /**
                     * Description duration.
                     * @member {google.protobuf.IInt32Value|null|undefined} duration
                     * @memberof im.turms.proto.VideoFile.Description
                     * @instance
                     */
                    Description.prototype.duration = null;

                    /**
                     * Description size.
                     * @member {google.protobuf.IInt32Value|null|undefined} size
                     * @memberof im.turms.proto.VideoFile.Description
                     * @instance
                     */
                    Description.prototype.size = null;

                    /**
                     * Description format.
                     * @member {google.protobuf.IStringValue|null|undefined} format
                     * @memberof im.turms.proto.VideoFile.Description
                     * @instance
                     */
                    Description.prototype.format = null;

                    /**
                     * Encodes the specified Description message. Does not implicitly {@link im.turms.proto.VideoFile.Description.verify|verify} messages.
                     * @function encode
                     * @memberof im.turms.proto.VideoFile.Description
                     * @static
                     * @param {im.turms.proto.VideoFile.IDescription} message Description message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Description.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                        if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                            $root.google.protobuf.Int32Value.encode(message.duration, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                            $root.google.protobuf.Int32Value.encode(message.size, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                            $root.google.protobuf.StringValue.encode(message.format, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Decodes a Description message from the specified reader or buffer.
                     * @function decode
                     * @memberof im.turms.proto.VideoFile.Description
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {im.turms.proto.VideoFile.Description} Description
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Description.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.VideoFile.Description();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.url = reader.string();
                                break;
                            case 2:
                                message.duration = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.size = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.format = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    return Description;
                })();

                return VideoFile;
            })();

            proto.GroupInvitation = (function() {

                /**
                 * Properties of a GroupInvitation.
                 * @memberof im.turms.proto
                 * @interface IGroupInvitation
                 * @property {google.protobuf.IInt64Value|null} [id] GroupInvitation id
                 * @property {google.protobuf.IInt64Value|null} [creationDate] GroupInvitation creationDate
                 * @property {google.protobuf.IStringValue|null} [content] GroupInvitation content
                 * @property {im.turms.proto.RequestStatus|null} [status] GroupInvitation status
                 * @property {google.protobuf.IInt64Value|null} [expirationDate] GroupInvitation expirationDate
                 * @property {google.protobuf.IInt64Value|null} [groupId] GroupInvitation groupId
                 * @property {google.protobuf.IInt64Value|null} [inviterId] GroupInvitation inviterId
                 * @property {google.protobuf.IInt64Value|null} [inviteeId] GroupInvitation inviteeId
                 */

                /**
                 * Constructs a new GroupInvitation.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupInvitation.
                 * @implements IGroupInvitation
                 * @constructor
                 * @param {im.turms.proto.IGroupInvitation=} [properties] Properties to set
                 */
                function GroupInvitation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupInvitation id.
                 * @member {google.protobuf.IInt64Value|null|undefined} id
                 * @memberof im.turms.proto.GroupInvitation
                 * @instance
                 */
                GroupInvitation.prototype.id = null;

                /**
                 * GroupInvitation creationDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} creationDate
                 * @memberof im.turms.proto.GroupInvitation
                 * @instance
                 */
                GroupInvitation.prototype.creationDate = null;

                /**
                 * GroupInvitation content.
                 * @member {google.protobuf.IStringValue|null|undefined} content
                 * @memberof im.turms.proto.GroupInvitation
                 * @instance
                 */
                GroupInvitation.prototype.content = null;

                /**
                 * GroupInvitation status.
                 * @member {im.turms.proto.RequestStatus} status
                 * @memberof im.turms.proto.GroupInvitation
                 * @instance
                 */
                GroupInvitation.prototype.status = 0;

                /**
                 * GroupInvitation expirationDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} expirationDate
                 * @memberof im.turms.proto.GroupInvitation
                 * @instance
                 */
                GroupInvitation.prototype.expirationDate = null;

                /**
                 * GroupInvitation groupId.
                 * @member {google.protobuf.IInt64Value|null|undefined} groupId
                 * @memberof im.turms.proto.GroupInvitation
                 * @instance
                 */
                GroupInvitation.prototype.groupId = null;

                /**
                 * GroupInvitation inviterId.
                 * @member {google.protobuf.IInt64Value|null|undefined} inviterId
                 * @memberof im.turms.proto.GroupInvitation
                 * @instance
                 */
                GroupInvitation.prototype.inviterId = null;

                /**
                 * GroupInvitation inviteeId.
                 * @member {google.protobuf.IInt64Value|null|undefined} inviteeId
                 * @memberof im.turms.proto.GroupInvitation
                 * @instance
                 */
                GroupInvitation.prototype.inviteeId = null;

                /**
                 * Encodes the specified GroupInvitation message. Does not implicitly {@link im.turms.proto.GroupInvitation.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupInvitation
                 * @static
                 * @param {im.turms.proto.IGroupInvitation} message GroupInvitation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupInvitation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        $root.google.protobuf.Int64Value.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.creationDate != null && Object.hasOwnProperty.call(message, "creationDate"))
                        $root.google.protobuf.Int64Value.encode(message.creationDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                        $root.google.protobuf.StringValue.encode(message.content, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.status);
                    if (message.expirationDate != null && Object.hasOwnProperty.call(message, "expirationDate"))
                        $root.google.protobuf.Int64Value.encode(message.expirationDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        $root.google.protobuf.Int64Value.encode(message.groupId, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.inviterId != null && Object.hasOwnProperty.call(message, "inviterId"))
                        $root.google.protobuf.Int64Value.encode(message.inviterId, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.inviteeId != null && Object.hasOwnProperty.call(message, "inviteeId"))
                        $root.google.protobuf.Int64Value.encode(message.inviteeId, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a GroupInvitation message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupInvitation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupInvitation} GroupInvitation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupInvitation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupInvitation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.creationDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.content = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.status = reader.int32();
                            break;
                        case 5:
                            message.expirationDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.groupId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.inviterId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.inviteeId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupInvitation;
            })();

            proto.GroupInvitationsWithVersion = (function() {

                /**
                 * Properties of a GroupInvitationsWithVersion.
                 * @memberof im.turms.proto
                 * @interface IGroupInvitationsWithVersion
                 * @property {Array.<im.turms.proto.IGroupInvitation>|null} [groupInvitations] GroupInvitationsWithVersion groupInvitations
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] GroupInvitationsWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new GroupInvitationsWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupInvitationsWithVersion.
                 * @implements IGroupInvitationsWithVersion
                 * @constructor
                 * @param {im.turms.proto.IGroupInvitationsWithVersion=} [properties] Properties to set
                 */
                function GroupInvitationsWithVersion(properties) {
                    this.groupInvitations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupInvitationsWithVersion groupInvitations.
                 * @member {Array.<im.turms.proto.IGroupInvitation>} groupInvitations
                 * @memberof im.turms.proto.GroupInvitationsWithVersion
                 * @instance
                 */
                GroupInvitationsWithVersion.prototype.groupInvitations = $util.emptyArray;

                /**
                 * GroupInvitationsWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.GroupInvitationsWithVersion
                 * @instance
                 */
                GroupInvitationsWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified GroupInvitationsWithVersion message. Does not implicitly {@link im.turms.proto.GroupInvitationsWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupInvitationsWithVersion
                 * @static
                 * @param {im.turms.proto.IGroupInvitationsWithVersion} message GroupInvitationsWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupInvitationsWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupInvitations != null && message.groupInvitations.length)
                        for (var i = 0; i < message.groupInvitations.length; ++i)
                            $root.im.turms.proto.GroupInvitation.encode(message.groupInvitations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a GroupInvitationsWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupInvitationsWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupInvitationsWithVersion} GroupInvitationsWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupInvitationsWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupInvitationsWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.groupInvitations && message.groupInvitations.length))
                                message.groupInvitations = [];
                            message.groupInvitations.push($root.im.turms.proto.GroupInvitation.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupInvitationsWithVersion;
            })();

            proto.GroupJoinQuestion = (function() {

                /**
                 * Properties of a GroupJoinQuestion.
                 * @memberof im.turms.proto
                 * @interface IGroupJoinQuestion
                 * @property {google.protobuf.IInt64Value|null} [id] GroupJoinQuestion id
                 * @property {google.protobuf.IInt64Value|null} [groupId] GroupJoinQuestion groupId
                 * @property {google.protobuf.IStringValue|null} [question] GroupJoinQuestion question
                 * @property {Array.<google.protobuf.IStringValue>|null} [answers] GroupJoinQuestion answers
                 * @property {google.protobuf.IInt32Value|null} [score] GroupJoinQuestion score
                 */

                /**
                 * Constructs a new GroupJoinQuestion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupJoinQuestion.
                 * @implements IGroupJoinQuestion
                 * @constructor
                 * @param {im.turms.proto.IGroupJoinQuestion=} [properties] Properties to set
                 */
                function GroupJoinQuestion(properties) {
                    this.answers = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupJoinQuestion id.
                 * @member {google.protobuf.IInt64Value|null|undefined} id
                 * @memberof im.turms.proto.GroupJoinQuestion
                 * @instance
                 */
                GroupJoinQuestion.prototype.id = null;

                /**
                 * GroupJoinQuestion groupId.
                 * @member {google.protobuf.IInt64Value|null|undefined} groupId
                 * @memberof im.turms.proto.GroupJoinQuestion
                 * @instance
                 */
                GroupJoinQuestion.prototype.groupId = null;

                /**
                 * GroupJoinQuestion question.
                 * @member {google.protobuf.IStringValue|null|undefined} question
                 * @memberof im.turms.proto.GroupJoinQuestion
                 * @instance
                 */
                GroupJoinQuestion.prototype.question = null;

                /**
                 * GroupJoinQuestion answers.
                 * @member {Array.<google.protobuf.IStringValue>} answers
                 * @memberof im.turms.proto.GroupJoinQuestion
                 * @instance
                 */
                GroupJoinQuestion.prototype.answers = $util.emptyArray;

                /**
                 * GroupJoinQuestion score.
                 * @member {google.protobuf.IInt32Value|null|undefined} score
                 * @memberof im.turms.proto.GroupJoinQuestion
                 * @instance
                 */
                GroupJoinQuestion.prototype.score = null;

                /**
                 * Encodes the specified GroupJoinQuestion message. Does not implicitly {@link im.turms.proto.GroupJoinQuestion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupJoinQuestion
                 * @static
                 * @param {im.turms.proto.IGroupJoinQuestion} message GroupJoinQuestion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupJoinQuestion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        $root.google.protobuf.Int64Value.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        $root.google.protobuf.Int64Value.encode(message.groupId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.question != null && Object.hasOwnProperty.call(message, "question"))
                        $root.google.protobuf.StringValue.encode(message.question, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.answers != null && message.answers.length)
                        for (var i = 0; i < message.answers.length; ++i)
                            $root.google.protobuf.StringValue.encode(message.answers[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                        $root.google.protobuf.Int32Value.encode(message.score, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a GroupJoinQuestion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupJoinQuestion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupJoinQuestion} GroupJoinQuestion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupJoinQuestion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupJoinQuestion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.groupId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.question = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.answers && message.answers.length))
                                message.answers = [];
                            message.answers.push($root.google.protobuf.StringValue.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            message.score = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupJoinQuestion;
            })();

            proto.GroupJoinQuestionsAnswerResult = (function() {

                /**
                 * Properties of a GroupJoinQuestionsAnswerResult.
                 * @memberof im.turms.proto
                 * @interface IGroupJoinQuestionsAnswerResult
                 * @property {number|null} [score] GroupJoinQuestionsAnswerResult score
                 * @property {Array.<string>|null} [questionsIds] GroupJoinQuestionsAnswerResult questionsIds
                 * @property {boolean|null} [joined] GroupJoinQuestionsAnswerResult joined
                 */

                /**
                 * Constructs a new GroupJoinQuestionsAnswerResult.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupJoinQuestionsAnswerResult.
                 * @implements IGroupJoinQuestionsAnswerResult
                 * @constructor
                 * @param {im.turms.proto.IGroupJoinQuestionsAnswerResult=} [properties] Properties to set
                 */
                function GroupJoinQuestionsAnswerResult(properties) {
                    this.questionsIds = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupJoinQuestionsAnswerResult score.
                 * @member {number} score
                 * @memberof im.turms.proto.GroupJoinQuestionsAnswerResult
                 * @instance
                 */
                GroupJoinQuestionsAnswerResult.prototype.score = 0;

                /**
                 * GroupJoinQuestionsAnswerResult questionsIds.
                 * @member {Array.<string>} questionsIds
                 * @memberof im.turms.proto.GroupJoinQuestionsAnswerResult
                 * @instance
                 */
                GroupJoinQuestionsAnswerResult.prototype.questionsIds = $util.emptyArray;

                /**
                 * GroupJoinQuestionsAnswerResult joined.
                 * @member {boolean} joined
                 * @memberof im.turms.proto.GroupJoinQuestionsAnswerResult
                 * @instance
                 */
                GroupJoinQuestionsAnswerResult.prototype.joined = false;

                /**
                 * Encodes the specified GroupJoinQuestionsAnswerResult message. Does not implicitly {@link im.turms.proto.GroupJoinQuestionsAnswerResult.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupJoinQuestionsAnswerResult
                 * @static
                 * @param {im.turms.proto.IGroupJoinQuestionsAnswerResult} message GroupJoinQuestionsAnswerResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupJoinQuestionsAnswerResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.score);
                    if (message.questionsIds != null && message.questionsIds.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.questionsIds.length; ++i)
                            writer.int64(message.questionsIds[i]);
                        writer.ldelim();
                    }
                    if (message.joined != null && Object.hasOwnProperty.call(message, "joined"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.joined);
                    return writer;
                };

                /**
                 * Decodes a GroupJoinQuestionsAnswerResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupJoinQuestionsAnswerResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupJoinQuestionsAnswerResult} GroupJoinQuestionsAnswerResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupJoinQuestionsAnswerResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupJoinQuestionsAnswerResult();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.score = reader.int32();
                            break;
                        case 2:
                            if (!(message.questionsIds && message.questionsIds.length))
                                message.questionsIds = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.questionsIds.push(reader.int64().toString());
                            } else
                                message.questionsIds.push(reader.int64().toString());
                            break;
                        case 3:
                            message.joined = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupJoinQuestionsAnswerResult;
            })();

            proto.GroupJoinQuestionsWithVersion = (function() {

                /**
                 * Properties of a GroupJoinQuestionsWithVersion.
                 * @memberof im.turms.proto
                 * @interface IGroupJoinQuestionsWithVersion
                 * @property {Array.<im.turms.proto.IGroupJoinQuestion>|null} [groupJoinQuestions] GroupJoinQuestionsWithVersion groupJoinQuestions
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] GroupJoinQuestionsWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new GroupJoinQuestionsWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupJoinQuestionsWithVersion.
                 * @implements IGroupJoinQuestionsWithVersion
                 * @constructor
                 * @param {im.turms.proto.IGroupJoinQuestionsWithVersion=} [properties] Properties to set
                 */
                function GroupJoinQuestionsWithVersion(properties) {
                    this.groupJoinQuestions = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupJoinQuestionsWithVersion groupJoinQuestions.
                 * @member {Array.<im.turms.proto.IGroupJoinQuestion>} groupJoinQuestions
                 * @memberof im.turms.proto.GroupJoinQuestionsWithVersion
                 * @instance
                 */
                GroupJoinQuestionsWithVersion.prototype.groupJoinQuestions = $util.emptyArray;

                /**
                 * GroupJoinQuestionsWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.GroupJoinQuestionsWithVersion
                 * @instance
                 */
                GroupJoinQuestionsWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified GroupJoinQuestionsWithVersion message. Does not implicitly {@link im.turms.proto.GroupJoinQuestionsWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupJoinQuestionsWithVersion
                 * @static
                 * @param {im.turms.proto.IGroupJoinQuestionsWithVersion} message GroupJoinQuestionsWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupJoinQuestionsWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupJoinQuestions != null && message.groupJoinQuestions.length)
                        for (var i = 0; i < message.groupJoinQuestions.length; ++i)
                            $root.im.turms.proto.GroupJoinQuestion.encode(message.groupJoinQuestions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a GroupJoinQuestionsWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupJoinQuestionsWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupJoinQuestionsWithVersion} GroupJoinQuestionsWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupJoinQuestionsWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupJoinQuestionsWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.groupJoinQuestions && message.groupJoinQuestions.length))
                                message.groupJoinQuestions = [];
                            message.groupJoinQuestions.push($root.im.turms.proto.GroupJoinQuestion.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupJoinQuestionsWithVersion;
            })();

            proto.GroupJoinRequest = (function() {

                /**
                 * Properties of a GroupJoinRequest.
                 * @memberof im.turms.proto
                 * @interface IGroupJoinRequest
                 * @property {google.protobuf.IInt64Value|null} [id] GroupJoinRequest id
                 * @property {google.protobuf.IInt64Value|null} [creationDate] GroupJoinRequest creationDate
                 * @property {google.protobuf.IStringValue|null} [content] GroupJoinRequest content
                 * @property {im.turms.proto.RequestStatus|null} [status] GroupJoinRequest status
                 * @property {google.protobuf.IInt64Value|null} [expirationDate] GroupJoinRequest expirationDate
                 * @property {google.protobuf.IInt64Value|null} [groupId] GroupJoinRequest groupId
                 * @property {google.protobuf.IInt64Value|null} [requesterId] GroupJoinRequest requesterId
                 * @property {google.protobuf.IInt64Value|null} [responderId] GroupJoinRequest responderId
                 */

                /**
                 * Constructs a new GroupJoinRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupJoinRequest.
                 * @implements IGroupJoinRequest
                 * @constructor
                 * @param {im.turms.proto.IGroupJoinRequest=} [properties] Properties to set
                 */
                function GroupJoinRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupJoinRequest id.
                 * @member {google.protobuf.IInt64Value|null|undefined} id
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @instance
                 */
                GroupJoinRequest.prototype.id = null;

                /**
                 * GroupJoinRequest creationDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} creationDate
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @instance
                 */
                GroupJoinRequest.prototype.creationDate = null;

                /**
                 * GroupJoinRequest content.
                 * @member {google.protobuf.IStringValue|null|undefined} content
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @instance
                 */
                GroupJoinRequest.prototype.content = null;

                /**
                 * GroupJoinRequest status.
                 * @member {im.turms.proto.RequestStatus} status
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @instance
                 */
                GroupJoinRequest.prototype.status = 0;

                /**
                 * GroupJoinRequest expirationDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} expirationDate
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @instance
                 */
                GroupJoinRequest.prototype.expirationDate = null;

                /**
                 * GroupJoinRequest groupId.
                 * @member {google.protobuf.IInt64Value|null|undefined} groupId
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @instance
                 */
                GroupJoinRequest.prototype.groupId = null;

                /**
                 * GroupJoinRequest requesterId.
                 * @member {google.protobuf.IInt64Value|null|undefined} requesterId
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @instance
                 */
                GroupJoinRequest.prototype.requesterId = null;

                /**
                 * GroupJoinRequest responderId.
                 * @member {google.protobuf.IInt64Value|null|undefined} responderId
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @instance
                 */
                GroupJoinRequest.prototype.responderId = null;

                /**
                 * Encodes the specified GroupJoinRequest message. Does not implicitly {@link im.turms.proto.GroupJoinRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @static
                 * @param {im.turms.proto.IGroupJoinRequest} message GroupJoinRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupJoinRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        $root.google.protobuf.Int64Value.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.creationDate != null && Object.hasOwnProperty.call(message, "creationDate"))
                        $root.google.protobuf.Int64Value.encode(message.creationDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                        $root.google.protobuf.StringValue.encode(message.content, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.status);
                    if (message.expirationDate != null && Object.hasOwnProperty.call(message, "expirationDate"))
                        $root.google.protobuf.Int64Value.encode(message.expirationDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        $root.google.protobuf.Int64Value.encode(message.groupId, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.requesterId != null && Object.hasOwnProperty.call(message, "requesterId"))
                        $root.google.protobuf.Int64Value.encode(message.requesterId, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.responderId != null && Object.hasOwnProperty.call(message, "responderId"))
                        $root.google.protobuf.Int64Value.encode(message.responderId, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a GroupJoinRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupJoinRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupJoinRequest} GroupJoinRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupJoinRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupJoinRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.creationDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.content = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.status = reader.int32();
                            break;
                        case 5:
                            message.expirationDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.groupId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.requesterId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.responderId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupJoinRequest;
            })();

            proto.GroupJoinRequestsWithVersion = (function() {

                /**
                 * Properties of a GroupJoinRequestsWithVersion.
                 * @memberof im.turms.proto
                 * @interface IGroupJoinRequestsWithVersion
                 * @property {Array.<im.turms.proto.IGroupJoinRequest>|null} [groupJoinRequests] GroupJoinRequestsWithVersion groupJoinRequests
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] GroupJoinRequestsWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new GroupJoinRequestsWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupJoinRequestsWithVersion.
                 * @implements IGroupJoinRequestsWithVersion
                 * @constructor
                 * @param {im.turms.proto.IGroupJoinRequestsWithVersion=} [properties] Properties to set
                 */
                function GroupJoinRequestsWithVersion(properties) {
                    this.groupJoinRequests = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupJoinRequestsWithVersion groupJoinRequests.
                 * @member {Array.<im.turms.proto.IGroupJoinRequest>} groupJoinRequests
                 * @memberof im.turms.proto.GroupJoinRequestsWithVersion
                 * @instance
                 */
                GroupJoinRequestsWithVersion.prototype.groupJoinRequests = $util.emptyArray;

                /**
                 * GroupJoinRequestsWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.GroupJoinRequestsWithVersion
                 * @instance
                 */
                GroupJoinRequestsWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified GroupJoinRequestsWithVersion message. Does not implicitly {@link im.turms.proto.GroupJoinRequestsWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupJoinRequestsWithVersion
                 * @static
                 * @param {im.turms.proto.IGroupJoinRequestsWithVersion} message GroupJoinRequestsWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupJoinRequestsWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupJoinRequests != null && message.groupJoinRequests.length)
                        for (var i = 0; i < message.groupJoinRequests.length; ++i)
                            $root.im.turms.proto.GroupJoinRequest.encode(message.groupJoinRequests[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a GroupJoinRequestsWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupJoinRequestsWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupJoinRequestsWithVersion} GroupJoinRequestsWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupJoinRequestsWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupJoinRequestsWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.groupJoinRequests && message.groupJoinRequests.length))
                                message.groupJoinRequests = [];
                            message.groupJoinRequests.push($root.im.turms.proto.GroupJoinRequest.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupJoinRequestsWithVersion;
            })();

            proto.GroupMember = (function() {

                /**
                 * Properties of a GroupMember.
                 * @memberof im.turms.proto
                 * @interface IGroupMember
                 * @property {google.protobuf.IInt64Value|null} [groupId] GroupMember groupId
                 * @property {google.protobuf.IInt64Value|null} [userId] GroupMember userId
                 * @property {google.protobuf.IStringValue|null} [name] GroupMember name
                 * @property {im.turms.proto.GroupMemberRole|null} [role] GroupMember role
                 * @property {google.protobuf.IInt64Value|null} [joinDate] GroupMember joinDate
                 * @property {google.protobuf.IInt64Value|null} [muteEndDate] GroupMember muteEndDate
                 * @property {im.turms.proto.UserStatus|null} [userStatus] GroupMember userStatus
                 * @property {Array.<im.turms.proto.DeviceType>|null} [usingDeviceTypes] GroupMember usingDeviceTypes
                 */

                /**
                 * Constructs a new GroupMember.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupMember.
                 * @implements IGroupMember
                 * @constructor
                 * @param {im.turms.proto.IGroupMember=} [properties] Properties to set
                 */
                function GroupMember(properties) {
                    this.usingDeviceTypes = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupMember groupId.
                 * @member {google.protobuf.IInt64Value|null|undefined} groupId
                 * @memberof im.turms.proto.GroupMember
                 * @instance
                 */
                GroupMember.prototype.groupId = null;

                /**
                 * GroupMember userId.
                 * @member {google.protobuf.IInt64Value|null|undefined} userId
                 * @memberof im.turms.proto.GroupMember
                 * @instance
                 */
                GroupMember.prototype.userId = null;

                /**
                 * GroupMember name.
                 * @member {google.protobuf.IStringValue|null|undefined} name
                 * @memberof im.turms.proto.GroupMember
                 * @instance
                 */
                GroupMember.prototype.name = null;

                /**
                 * GroupMember role.
                 * @member {im.turms.proto.GroupMemberRole} role
                 * @memberof im.turms.proto.GroupMember
                 * @instance
                 */
                GroupMember.prototype.role = 0;

                /**
                 * GroupMember joinDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} joinDate
                 * @memberof im.turms.proto.GroupMember
                 * @instance
                 */
                GroupMember.prototype.joinDate = null;

                /**
                 * GroupMember muteEndDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} muteEndDate
                 * @memberof im.turms.proto.GroupMember
                 * @instance
                 */
                GroupMember.prototype.muteEndDate = null;

                /**
                 * GroupMember userStatus.
                 * @member {im.turms.proto.UserStatus} userStatus
                 * @memberof im.turms.proto.GroupMember
                 * @instance
                 */
                GroupMember.prototype.userStatus = 0;

                /**
                 * GroupMember usingDeviceTypes.
                 * @member {Array.<im.turms.proto.DeviceType>} usingDeviceTypes
                 * @memberof im.turms.proto.GroupMember
                 * @instance
                 */
                GroupMember.prototype.usingDeviceTypes = $util.emptyArray;

                /**
                 * Encodes the specified GroupMember message. Does not implicitly {@link im.turms.proto.GroupMember.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupMember
                 * @static
                 * @param {im.turms.proto.IGroupMember} message GroupMember message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupMember.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        $root.google.protobuf.Int64Value.encode(message.groupId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                        $root.google.protobuf.Int64Value.encode(message.userId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.role);
                    if (message.joinDate != null && Object.hasOwnProperty.call(message, "joinDate"))
                        $root.google.protobuf.Int64Value.encode(message.joinDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.muteEndDate != null && Object.hasOwnProperty.call(message, "muteEndDate"))
                        $root.google.protobuf.Int64Value.encode(message.muteEndDate, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.userStatus != null && Object.hasOwnProperty.call(message, "userStatus"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.userStatus);
                    if (message.usingDeviceTypes != null && message.usingDeviceTypes.length) {
                        writer.uint32(/* id 8, wireType 2 =*/66).fork();
                        for (var i = 0; i < message.usingDeviceTypes.length; ++i)
                            writer.int32(message.usingDeviceTypes[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Decodes a GroupMember message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupMember
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupMember} GroupMember
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupMember.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupMember();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.userId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.role = reader.int32();
                            break;
                        case 5:
                            message.joinDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.muteEndDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.userStatus = reader.int32();
                            break;
                        case 8:
                            if (!(message.usingDeviceTypes && message.usingDeviceTypes.length))
                                message.usingDeviceTypes = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.usingDeviceTypes.push(reader.int32());
                            } else
                                message.usingDeviceTypes.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupMember;
            })();

            proto.GroupMembersWithVersion = (function() {

                /**
                 * Properties of a GroupMembersWithVersion.
                 * @memberof im.turms.proto
                 * @interface IGroupMembersWithVersion
                 * @property {Array.<im.turms.proto.IGroupMember>|null} [groupMembers] GroupMembersWithVersion groupMembers
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] GroupMembersWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new GroupMembersWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupMembersWithVersion.
                 * @implements IGroupMembersWithVersion
                 * @constructor
                 * @param {im.turms.proto.IGroupMembersWithVersion=} [properties] Properties to set
                 */
                function GroupMembersWithVersion(properties) {
                    this.groupMembers = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupMembersWithVersion groupMembers.
                 * @member {Array.<im.turms.proto.IGroupMember>} groupMembers
                 * @memberof im.turms.proto.GroupMembersWithVersion
                 * @instance
                 */
                GroupMembersWithVersion.prototype.groupMembers = $util.emptyArray;

                /**
                 * GroupMembersWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.GroupMembersWithVersion
                 * @instance
                 */
                GroupMembersWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified GroupMembersWithVersion message. Does not implicitly {@link im.turms.proto.GroupMembersWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupMembersWithVersion
                 * @static
                 * @param {im.turms.proto.IGroupMembersWithVersion} message GroupMembersWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupMembersWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupMembers != null && message.groupMembers.length)
                        for (var i = 0; i < message.groupMembers.length; ++i)
                            $root.im.turms.proto.GroupMember.encode(message.groupMembers[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a GroupMembersWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupMembersWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupMembersWithVersion} GroupMembersWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupMembersWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupMembersWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.groupMembers && message.groupMembers.length))
                                message.groupMembers = [];
                            message.groupMembers.push($root.im.turms.proto.GroupMember.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupMembersWithVersion;
            })();

            proto.Group = (function() {

                /**
                 * Properties of a Group.
                 * @memberof im.turms.proto
                 * @interface IGroup
                 * @property {google.protobuf.IInt64Value|null} [id] Group id
                 * @property {google.protobuf.IInt64Value|null} [typeId] Group typeId
                 * @property {google.protobuf.IInt64Value|null} [creatorId] Group creatorId
                 * @property {google.protobuf.IInt64Value|null} [ownerId] Group ownerId
                 * @property {google.protobuf.IStringValue|null} [name] Group name
                 * @property {google.protobuf.IStringValue|null} [intro] Group intro
                 * @property {google.protobuf.IStringValue|null} [announcement] Group announcement
                 * @property {google.protobuf.IStringValue|null} [profilePictureUrl] Group profilePictureUrl
                 * @property {google.protobuf.IInt64Value|null} [creationDate] Group creationDate
                 * @property {google.protobuf.IInt64Value|null} [deletionDate] Group deletionDate
                 * @property {google.protobuf.IInt64Value|null} [muteEndDate] Group muteEndDate
                 * @property {google.protobuf.IBoolValue|null} [active] Group active
                 */

                /**
                 * Constructs a new Group.
                 * @memberof im.turms.proto
                 * @classdesc Represents a Group.
                 * @implements IGroup
                 * @constructor
                 * @param {im.turms.proto.IGroup=} [properties] Properties to set
                 */
                function Group(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Group id.
                 * @member {google.protobuf.IInt64Value|null|undefined} id
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.id = null;

                /**
                 * Group typeId.
                 * @member {google.protobuf.IInt64Value|null|undefined} typeId
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.typeId = null;

                /**
                 * Group creatorId.
                 * @member {google.protobuf.IInt64Value|null|undefined} creatorId
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.creatorId = null;

                /**
                 * Group ownerId.
                 * @member {google.protobuf.IInt64Value|null|undefined} ownerId
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.ownerId = null;

                /**
                 * Group name.
                 * @member {google.protobuf.IStringValue|null|undefined} name
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.name = null;

                /**
                 * Group intro.
                 * @member {google.protobuf.IStringValue|null|undefined} intro
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.intro = null;

                /**
                 * Group announcement.
                 * @member {google.protobuf.IStringValue|null|undefined} announcement
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.announcement = null;

                /**
                 * Group profilePictureUrl.
                 * @member {google.protobuf.IStringValue|null|undefined} profilePictureUrl
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.profilePictureUrl = null;

                /**
                 * Group creationDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} creationDate
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.creationDate = null;

                /**
                 * Group deletionDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} deletionDate
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.deletionDate = null;

                /**
                 * Group muteEndDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} muteEndDate
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.muteEndDate = null;

                /**
                 * Group active.
                 * @member {google.protobuf.IBoolValue|null|undefined} active
                 * @memberof im.turms.proto.Group
                 * @instance
                 */
                Group.prototype.active = null;

                /**
                 * Encodes the specified Group message. Does not implicitly {@link im.turms.proto.Group.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.Group
                 * @static
                 * @param {im.turms.proto.IGroup} message Group message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Group.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        $root.google.protobuf.Int64Value.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.typeId != null && Object.hasOwnProperty.call(message, "typeId"))
                        $root.google.protobuf.Int64Value.encode(message.typeId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.creatorId != null && Object.hasOwnProperty.call(message, "creatorId"))
                        $root.google.protobuf.Int64Value.encode(message.creatorId, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.ownerId != null && Object.hasOwnProperty.call(message, "ownerId"))
                        $root.google.protobuf.Int64Value.encode(message.ownerId, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.intro != null && Object.hasOwnProperty.call(message, "intro"))
                        $root.google.protobuf.StringValue.encode(message.intro, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.announcement != null && Object.hasOwnProperty.call(message, "announcement"))
                        $root.google.protobuf.StringValue.encode(message.announcement, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.profilePictureUrl != null && Object.hasOwnProperty.call(message, "profilePictureUrl"))
                        $root.google.protobuf.StringValue.encode(message.profilePictureUrl, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.creationDate != null && Object.hasOwnProperty.call(message, "creationDate"))
                        $root.google.protobuf.Int64Value.encode(message.creationDate, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.deletionDate != null && Object.hasOwnProperty.call(message, "deletionDate"))
                        $root.google.protobuf.Int64Value.encode(message.deletionDate, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.muteEndDate != null && Object.hasOwnProperty.call(message, "muteEndDate"))
                        $root.google.protobuf.Int64Value.encode(message.muteEndDate, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.active != null && Object.hasOwnProperty.call(message, "active"))
                        $root.google.protobuf.BoolValue.encode(message.active, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a Group message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.Group
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.Group} Group
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Group.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.Group();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.typeId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.creatorId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.ownerId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.intro = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.announcement = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.profilePictureUrl = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.creationDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.deletionDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 11:
                            message.muteEndDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.active = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return Group;
            })();

            proto.GroupsWithVersion = (function() {

                /**
                 * Properties of a GroupsWithVersion.
                 * @memberof im.turms.proto
                 * @interface IGroupsWithVersion
                 * @property {Array.<im.turms.proto.IGroup>|null} [groups] GroupsWithVersion groups
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] GroupsWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new GroupsWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a GroupsWithVersion.
                 * @implements IGroupsWithVersion
                 * @constructor
                 * @param {im.turms.proto.IGroupsWithVersion=} [properties] Properties to set
                 */
                function GroupsWithVersion(properties) {
                    this.groups = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GroupsWithVersion groups.
                 * @member {Array.<im.turms.proto.IGroup>} groups
                 * @memberof im.turms.proto.GroupsWithVersion
                 * @instance
                 */
                GroupsWithVersion.prototype.groups = $util.emptyArray;

                /**
                 * GroupsWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.GroupsWithVersion
                 * @instance
                 */
                GroupsWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified GroupsWithVersion message. Does not implicitly {@link im.turms.proto.GroupsWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.GroupsWithVersion
                 * @static
                 * @param {im.turms.proto.IGroupsWithVersion} message GroupsWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GroupsWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groups != null && message.groups.length)
                        for (var i = 0; i < message.groups.length; ++i)
                            $root.im.turms.proto.Group.encode(message.groups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a GroupsWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.GroupsWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.GroupsWithVersion} GroupsWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GroupsWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.GroupsWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.groups && message.groups.length))
                                message.groups = [];
                            message.groups.push($root.im.turms.proto.Group.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return GroupsWithVersion;
            })();

            proto.MessageStatus = (function() {

                /**
                 * Properties of a MessageStatus.
                 * @memberof im.turms.proto
                 * @interface IMessageStatus
                 * @property {google.protobuf.IInt64Value|null} [messageId] MessageStatus messageId
                 * @property {google.protobuf.IInt64Value|null} [toUserId] MessageStatus toUserId
                 * @property {im.turms.proto.MessageDeliveryStatus|null} [deliveryStatus] MessageStatus deliveryStatus
                 * @property {google.protobuf.IInt64Value|null} [receptionDate] MessageStatus receptionDate
                 * @property {google.protobuf.IInt64Value|null} [readDate] MessageStatus readDate
                 * @property {google.protobuf.IInt64Value|null} [recallDate] MessageStatus recallDate
                 */

                /**
                 * Constructs a new MessageStatus.
                 * @memberof im.turms.proto
                 * @classdesc Represents a MessageStatus.
                 * @implements IMessageStatus
                 * @constructor
                 * @param {im.turms.proto.IMessageStatus=} [properties] Properties to set
                 */
                function MessageStatus(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MessageStatus messageId.
                 * @member {google.protobuf.IInt64Value|null|undefined} messageId
                 * @memberof im.turms.proto.MessageStatus
                 * @instance
                 */
                MessageStatus.prototype.messageId = null;

                /**
                 * MessageStatus toUserId.
                 * @member {google.protobuf.IInt64Value|null|undefined} toUserId
                 * @memberof im.turms.proto.MessageStatus
                 * @instance
                 */
                MessageStatus.prototype.toUserId = null;

                /**
                 * MessageStatus deliveryStatus.
                 * @member {im.turms.proto.MessageDeliveryStatus} deliveryStatus
                 * @memberof im.turms.proto.MessageStatus
                 * @instance
                 */
                MessageStatus.prototype.deliveryStatus = 0;

                /**
                 * MessageStatus receptionDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} receptionDate
                 * @memberof im.turms.proto.MessageStatus
                 * @instance
                 */
                MessageStatus.prototype.receptionDate = null;

                /**
                 * MessageStatus readDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} readDate
                 * @memberof im.turms.proto.MessageStatus
                 * @instance
                 */
                MessageStatus.prototype.readDate = null;

                /**
                 * MessageStatus recallDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} recallDate
                 * @memberof im.turms.proto.MessageStatus
                 * @instance
                 */
                MessageStatus.prototype.recallDate = null;

                /**
                 * Encodes the specified MessageStatus message. Does not implicitly {@link im.turms.proto.MessageStatus.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.MessageStatus
                 * @static
                 * @param {im.turms.proto.IMessageStatus} message MessageStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageStatus.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                        $root.google.protobuf.Int64Value.encode(message.messageId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.toUserId != null && Object.hasOwnProperty.call(message, "toUserId"))
                        $root.google.protobuf.Int64Value.encode(message.toUserId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.deliveryStatus != null && Object.hasOwnProperty.call(message, "deliveryStatus"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deliveryStatus);
                    if (message.receptionDate != null && Object.hasOwnProperty.call(message, "receptionDate"))
                        $root.google.protobuf.Int64Value.encode(message.receptionDate, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.readDate != null && Object.hasOwnProperty.call(message, "readDate"))
                        $root.google.protobuf.Int64Value.encode(message.readDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.recallDate != null && Object.hasOwnProperty.call(message, "recallDate"))
                        $root.google.protobuf.Int64Value.encode(message.recallDate, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a MessageStatus message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.MessageStatus
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.MessageStatus} MessageStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageStatus.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.MessageStatus();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.toUserId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.deliveryStatus = reader.int32();
                            break;
                        case 4:
                            message.receptionDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.readDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.recallDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return MessageStatus;
            })();

            proto.MessageStatuses = (function() {

                /**
                 * Properties of a MessageStatuses.
                 * @memberof im.turms.proto
                 * @interface IMessageStatuses
                 * @property {Array.<im.turms.proto.IMessageStatus>|null} [messageStatuses] MessageStatuses messageStatuses
                 */

                /**
                 * Constructs a new MessageStatuses.
                 * @memberof im.turms.proto
                 * @classdesc Represents a MessageStatuses.
                 * @implements IMessageStatuses
                 * @constructor
                 * @param {im.turms.proto.IMessageStatuses=} [properties] Properties to set
                 */
                function MessageStatuses(properties) {
                    this.messageStatuses = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MessageStatuses messageStatuses.
                 * @member {Array.<im.turms.proto.IMessageStatus>} messageStatuses
                 * @memberof im.turms.proto.MessageStatuses
                 * @instance
                 */
                MessageStatuses.prototype.messageStatuses = $util.emptyArray;

                /**
                 * Encodes the specified MessageStatuses message. Does not implicitly {@link im.turms.proto.MessageStatuses.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.MessageStatuses
                 * @static
                 * @param {im.turms.proto.IMessageStatuses} message MessageStatuses message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageStatuses.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageStatuses != null && message.messageStatuses.length)
                        for (var i = 0; i < message.messageStatuses.length; ++i)
                            $root.im.turms.proto.MessageStatus.encode(message.messageStatuses[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a MessageStatuses message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.MessageStatuses
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.MessageStatuses} MessageStatuses
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageStatuses.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.MessageStatuses();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.messageStatuses && message.messageStatuses.length))
                                message.messageStatuses = [];
                            message.messageStatuses.push($root.im.turms.proto.MessageStatus.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return MessageStatuses;
            })();

            proto.Message = (function() {

                /**
                 * Properties of a Message.
                 * @memberof im.turms.proto
                 * @interface IMessage
                 * @property {google.protobuf.IInt64Value|null} [id] Message id
                 * @property {google.protobuf.IInt64Value|null} [deliveryDate] Message deliveryDate
                 * @property {google.protobuf.IInt64Value|null} [deletionDate] Message deletionDate
                 * @property {google.protobuf.IStringValue|null} [text] Message text
                 * @property {google.protobuf.IInt64Value|null} [senderId] Message senderId
                 * @property {google.protobuf.IInt64Value|null} [groupId] Message groupId
                 * @property {google.protobuf.IBoolValue|null} [isSystemMessage] Message isSystemMessage
                 * @property {google.protobuf.IInt64Value|null} [recipientId] Message recipientId
                 * @property {Array.<google.protobuf.IBytesValue>|null} [records] Message records
                 */

                /**
                 * Constructs a new Message.
                 * @memberof im.turms.proto
                 * @classdesc Represents a Message.
                 * @implements IMessage
                 * @constructor
                 * @param {im.turms.proto.IMessage=} [properties] Properties to set
                 */
                function Message(properties) {
                    this.records = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Message id.
                 * @member {google.protobuf.IInt64Value|null|undefined} id
                 * @memberof im.turms.proto.Message
                 * @instance
                 */
                Message.prototype.id = null;

                /**
                 * Message deliveryDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} deliveryDate
                 * @memberof im.turms.proto.Message
                 * @instance
                 */
                Message.prototype.deliveryDate = null;

                /**
                 * Message deletionDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} deletionDate
                 * @memberof im.turms.proto.Message
                 * @instance
                 */
                Message.prototype.deletionDate = null;

                /**
                 * Message text.
                 * @member {google.protobuf.IStringValue|null|undefined} text
                 * @memberof im.turms.proto.Message
                 * @instance
                 */
                Message.prototype.text = null;

                /**
                 * Message senderId.
                 * @member {google.protobuf.IInt64Value|null|undefined} senderId
                 * @memberof im.turms.proto.Message
                 * @instance
                 */
                Message.prototype.senderId = null;

                /**
                 * Message groupId.
                 * @member {google.protobuf.IInt64Value|null|undefined} groupId
                 * @memberof im.turms.proto.Message
                 * @instance
                 */
                Message.prototype.groupId = null;

                /**
                 * Message isSystemMessage.
                 * @member {google.protobuf.IBoolValue|null|undefined} isSystemMessage
                 * @memberof im.turms.proto.Message
                 * @instance
                 */
                Message.prototype.isSystemMessage = null;

                /**
                 * Message recipientId.
                 * @member {google.protobuf.IInt64Value|null|undefined} recipientId
                 * @memberof im.turms.proto.Message
                 * @instance
                 */
                Message.prototype.recipientId = null;

                /**
                 * Message records.
                 * @member {Array.<google.protobuf.IBytesValue>} records
                 * @memberof im.turms.proto.Message
                 * @instance
                 */
                Message.prototype.records = $util.emptyArray;

                /**
                 * Encodes the specified Message message. Does not implicitly {@link im.turms.proto.Message.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.Message
                 * @static
                 * @param {im.turms.proto.IMessage} message Message message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Message.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        $root.google.protobuf.Int64Value.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.deliveryDate != null && Object.hasOwnProperty.call(message, "deliveryDate"))
                        $root.google.protobuf.Int64Value.encode(message.deliveryDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.deletionDate != null && Object.hasOwnProperty.call(message, "deletionDate"))
                        $root.google.protobuf.Int64Value.encode(message.deletionDate, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                        $root.google.protobuf.StringValue.encode(message.text, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.senderId != null && Object.hasOwnProperty.call(message, "senderId"))
                        $root.google.protobuf.Int64Value.encode(message.senderId, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        $root.google.protobuf.Int64Value.encode(message.groupId, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.isSystemMessage != null && Object.hasOwnProperty.call(message, "isSystemMessage"))
                        $root.google.protobuf.BoolValue.encode(message.isSystemMessage, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.recipientId != null && Object.hasOwnProperty.call(message, "recipientId"))
                        $root.google.protobuf.Int64Value.encode(message.recipientId, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.records != null && message.records.length)
                        for (var i = 0; i < message.records.length; ++i)
                            $root.google.protobuf.BytesValue.encode(message.records[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a Message message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.Message
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.Message} Message
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Message.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.Message();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.deliveryDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.deletionDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.text = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.senderId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.groupId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.isSystemMessage = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.recipientId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.records && message.records.length))
                                message.records = [];
                            message.records.push($root.google.protobuf.BytesValue.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return Message;
            })();

            proto.MessagesWithTotalList = (function() {

                /**
                 * Properties of a MessagesWithTotalList.
                 * @memberof im.turms.proto
                 * @interface IMessagesWithTotalList
                 * @property {Array.<im.turms.proto.IMessagesWithTotal>|null} [messagesWithTotalList] MessagesWithTotalList messagesWithTotalList
                 */

                /**
                 * Constructs a new MessagesWithTotalList.
                 * @memberof im.turms.proto
                 * @classdesc Represents a MessagesWithTotalList.
                 * @implements IMessagesWithTotalList
                 * @constructor
                 * @param {im.turms.proto.IMessagesWithTotalList=} [properties] Properties to set
                 */
                function MessagesWithTotalList(properties) {
                    this.messagesWithTotalList = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MessagesWithTotalList messagesWithTotalList.
                 * @member {Array.<im.turms.proto.IMessagesWithTotal>} messagesWithTotalList
                 * @memberof im.turms.proto.MessagesWithTotalList
                 * @instance
                 */
                MessagesWithTotalList.prototype.messagesWithTotalList = $util.emptyArray;

                /**
                 * Encodes the specified MessagesWithTotalList message. Does not implicitly {@link im.turms.proto.MessagesWithTotalList.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.MessagesWithTotalList
                 * @static
                 * @param {im.turms.proto.IMessagesWithTotalList} message MessagesWithTotalList message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessagesWithTotalList.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messagesWithTotalList != null && message.messagesWithTotalList.length)
                        for (var i = 0; i < message.messagesWithTotalList.length; ++i)
                            $root.im.turms.proto.MessagesWithTotal.encode(message.messagesWithTotalList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a MessagesWithTotalList message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.MessagesWithTotalList
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.MessagesWithTotalList} MessagesWithTotalList
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessagesWithTotalList.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.MessagesWithTotalList();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.messagesWithTotalList && message.messagesWithTotalList.length))
                                message.messagesWithTotalList = [];
                            message.messagesWithTotalList.push($root.im.turms.proto.MessagesWithTotal.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return MessagesWithTotalList;
            })();

            proto.MessagesWithTotal = (function() {

                /**
                 * Properties of a MessagesWithTotal.
                 * @memberof im.turms.proto
                 * @interface IMessagesWithTotal
                 * @property {number|null} [total] MessagesWithTotal total
                 * @property {im.turms.proto.ChatType|null} [chatType] MessagesWithTotal chatType
                 * @property {string|null} [fromId] MessagesWithTotal fromId
                 * @property {Array.<im.turms.proto.IMessage>|null} [messages] MessagesWithTotal messages
                 */

                /**
                 * Constructs a new MessagesWithTotal.
                 * @memberof im.turms.proto
                 * @classdesc Represents a MessagesWithTotal.
                 * @implements IMessagesWithTotal
                 * @constructor
                 * @param {im.turms.proto.IMessagesWithTotal=} [properties] Properties to set
                 */
                function MessagesWithTotal(properties) {
                    this.messages = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MessagesWithTotal total.
                 * @member {number} total
                 * @memberof im.turms.proto.MessagesWithTotal
                 * @instance
                 */
                MessagesWithTotal.prototype.total = 0;

                /**
                 * MessagesWithTotal chatType.
                 * @member {im.turms.proto.ChatType} chatType
                 * @memberof im.turms.proto.MessagesWithTotal
                 * @instance
                 */
                MessagesWithTotal.prototype.chatType = 0;

                /**
                 * MessagesWithTotal fromId.
                 * @member {string} fromId
                 * @memberof im.turms.proto.MessagesWithTotal
                 * @instance
                 */
                MessagesWithTotal.prototype.fromId = "0";

                /**
                 * MessagesWithTotal messages.
                 * @member {Array.<im.turms.proto.IMessage>} messages
                 * @memberof im.turms.proto.MessagesWithTotal
                 * @instance
                 */
                MessagesWithTotal.prototype.messages = $util.emptyArray;

                /**
                 * Encodes the specified MessagesWithTotal message. Does not implicitly {@link im.turms.proto.MessagesWithTotal.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.MessagesWithTotal
                 * @static
                 * @param {im.turms.proto.IMessagesWithTotal} message MessagesWithTotal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessagesWithTotal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.total);
                    if (message.chatType != null && Object.hasOwnProperty.call(message, "chatType"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.chatType);
                    if (message.fromId != null && Object.hasOwnProperty.call(message, "fromId"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.fromId);
                    if (message.messages != null && message.messages.length)
                        for (var i = 0; i < message.messages.length; ++i)
                            $root.im.turms.proto.Message.encode(message.messages[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a MessagesWithTotal message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.MessagesWithTotal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.MessagesWithTotal} MessagesWithTotal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessagesWithTotal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.MessagesWithTotal();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.total = reader.int32();
                            break;
                        case 2:
                            message.chatType = reader.int32();
                            break;
                        case 3:
                            message.fromId = reader.int64().toString();
                            break;
                        case 4:
                            if (!(message.messages && message.messages.length))
                                message.messages = [];
                            message.messages.push($root.im.turms.proto.Message.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return MessagesWithTotal;
            })();

            proto.Messages = (function() {

                /**
                 * Properties of a Messages.
                 * @memberof im.turms.proto
                 * @interface IMessages
                 * @property {Array.<im.turms.proto.IMessage>|null} [messages] Messages messages
                 */

                /**
                 * Constructs a new Messages.
                 * @memberof im.turms.proto
                 * @classdesc Represents a Messages.
                 * @implements IMessages
                 * @constructor
                 * @param {im.turms.proto.IMessages=} [properties] Properties to set
                 */
                function Messages(properties) {
                    this.messages = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Messages messages.
                 * @member {Array.<im.turms.proto.IMessage>} messages
                 * @memberof im.turms.proto.Messages
                 * @instance
                 */
                Messages.prototype.messages = $util.emptyArray;

                /**
                 * Encodes the specified Messages message. Does not implicitly {@link im.turms.proto.Messages.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.Messages
                 * @static
                 * @param {im.turms.proto.IMessages} message Messages message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Messages.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messages != null && message.messages.length)
                        for (var i = 0; i < message.messages.length; ++i)
                            $root.im.turms.proto.Message.encode(message.messages[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a Messages message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.Messages
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.Messages} Messages
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Messages.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.Messages();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.messages && message.messages.length))
                                message.messages = [];
                            message.messages.push($root.im.turms.proto.Message.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return Messages;
            })();

            proto.Acknowledge = (function() {

                /**
                 * Properties of an Acknowledge.
                 * @memberof im.turms.proto
                 * @interface IAcknowledge
                 * @property {string|null} [deliveryDate] Acknowledge deliveryDate
                 * @property {google.protobuf.IInt64Value|null} [messageId] Acknowledge messageId
                 */

                /**
                 * Constructs a new Acknowledge.
                 * @memberof im.turms.proto
                 * @classdesc Represents an Acknowledge.
                 * @implements IAcknowledge
                 * @constructor
                 * @param {im.turms.proto.IAcknowledge=} [properties] Properties to set
                 */
                function Acknowledge(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Acknowledge deliveryDate.
                 * @member {string} deliveryDate
                 * @memberof im.turms.proto.Acknowledge
                 * @instance
                 */
                Acknowledge.prototype.deliveryDate = "0";

                /**
                 * Acknowledge messageId.
                 * @member {google.protobuf.IInt64Value|null|undefined} messageId
                 * @memberof im.turms.proto.Acknowledge
                 * @instance
                 */
                Acknowledge.prototype.messageId = null;

                /**
                 * Encodes the specified Acknowledge message. Does not implicitly {@link im.turms.proto.Acknowledge.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.Acknowledge
                 * @static
                 * @param {im.turms.proto.IAcknowledge} message Acknowledge message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Acknowledge.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deliveryDate != null && Object.hasOwnProperty.call(message, "deliveryDate"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.deliveryDate);
                    if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                        $root.google.protobuf.Int64Value.encode(message.messageId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an Acknowledge message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.Acknowledge
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.Acknowledge} Acknowledge
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Acknowledge.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.Acknowledge();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deliveryDate = reader.int64().toString();
                            break;
                        case 2:
                            message.messageId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return Acknowledge;
            })();

            proto.Session = (function() {

                /**
                 * Properties of a Session.
                 * @memberof im.turms.proto
                 * @interface ISession
                 * @property {string|null} [sessionId] Session sessionId
                 * @property {string|null} [address] Session address
                 */

                /**
                 * Constructs a new Session.
                 * @memberof im.turms.proto
                 * @classdesc Represents a Session.
                 * @implements ISession
                 * @constructor
                 * @param {im.turms.proto.ISession=} [properties] Properties to set
                 */
                function Session(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Session sessionId.
                 * @member {string} sessionId
                 * @memberof im.turms.proto.Session
                 * @instance
                 */
                Session.prototype.sessionId = "";

                /**
                 * Session address.
                 * @member {string} address
                 * @memberof im.turms.proto.Session
                 * @instance
                 */
                Session.prototype.address = "";

                /**
                 * Encodes the specified Session message. Does not implicitly {@link im.turms.proto.Session.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.Session
                 * @static
                 * @param {im.turms.proto.ISession} message Session message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Session.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sessionId != null && Object.hasOwnProperty.call(message, "sessionId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.sessionId);
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.address);
                    return writer;
                };

                /**
                 * Decodes a Session message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.Session
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.Session} Session
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Session.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.Session();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.sessionId = reader.string();
                            break;
                        case 2:
                            message.address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return Session;
            })();

            proto.UserFriendRequest = (function() {

                /**
                 * Properties of a UserFriendRequest.
                 * @memberof im.turms.proto
                 * @interface IUserFriendRequest
                 * @property {google.protobuf.IInt64Value|null} [id] UserFriendRequest id
                 * @property {google.protobuf.IInt64Value|null} [creationDate] UserFriendRequest creationDate
                 * @property {google.protobuf.IStringValue|null} [content] UserFriendRequest content
                 * @property {im.turms.proto.RequestStatus|null} [requestStatus] UserFriendRequest requestStatus
                 * @property {google.protobuf.IStringValue|null} [reason] UserFriendRequest reason
                 * @property {google.protobuf.IInt64Value|null} [expirationDate] UserFriendRequest expirationDate
                 * @property {google.protobuf.IInt64Value|null} [requesterId] UserFriendRequest requesterId
                 * @property {google.protobuf.IInt64Value|null} [recipientId] UserFriendRequest recipientId
                 */

                /**
                 * Constructs a new UserFriendRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UserFriendRequest.
                 * @implements IUserFriendRequest
                 * @constructor
                 * @param {im.turms.proto.IUserFriendRequest=} [properties] Properties to set
                 */
                function UserFriendRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserFriendRequest id.
                 * @member {google.protobuf.IInt64Value|null|undefined} id
                 * @memberof im.turms.proto.UserFriendRequest
                 * @instance
                 */
                UserFriendRequest.prototype.id = null;

                /**
                 * UserFriendRequest creationDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} creationDate
                 * @memberof im.turms.proto.UserFriendRequest
                 * @instance
                 */
                UserFriendRequest.prototype.creationDate = null;

                /**
                 * UserFriendRequest content.
                 * @member {google.protobuf.IStringValue|null|undefined} content
                 * @memberof im.turms.proto.UserFriendRequest
                 * @instance
                 */
                UserFriendRequest.prototype.content = null;

                /**
                 * UserFriendRequest requestStatus.
                 * @member {im.turms.proto.RequestStatus} requestStatus
                 * @memberof im.turms.proto.UserFriendRequest
                 * @instance
                 */
                UserFriendRequest.prototype.requestStatus = 0;

                /**
                 * UserFriendRequest reason.
                 * @member {google.protobuf.IStringValue|null|undefined} reason
                 * @memberof im.turms.proto.UserFriendRequest
                 * @instance
                 */
                UserFriendRequest.prototype.reason = null;

                /**
                 * UserFriendRequest expirationDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} expirationDate
                 * @memberof im.turms.proto.UserFriendRequest
                 * @instance
                 */
                UserFriendRequest.prototype.expirationDate = null;

                /**
                 * UserFriendRequest requesterId.
                 * @member {google.protobuf.IInt64Value|null|undefined} requesterId
                 * @memberof im.turms.proto.UserFriendRequest
                 * @instance
                 */
                UserFriendRequest.prototype.requesterId = null;

                /**
                 * UserFriendRequest recipientId.
                 * @member {google.protobuf.IInt64Value|null|undefined} recipientId
                 * @memberof im.turms.proto.UserFriendRequest
                 * @instance
                 */
                UserFriendRequest.prototype.recipientId = null;

                /**
                 * Encodes the specified UserFriendRequest message. Does not implicitly {@link im.turms.proto.UserFriendRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UserFriendRequest
                 * @static
                 * @param {im.turms.proto.IUserFriendRequest} message UserFriendRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserFriendRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        $root.google.protobuf.Int64Value.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.creationDate != null && Object.hasOwnProperty.call(message, "creationDate"))
                        $root.google.protobuf.Int64Value.encode(message.creationDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                        $root.google.protobuf.StringValue.encode(message.content, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.requestStatus != null && Object.hasOwnProperty.call(message, "requestStatus"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.requestStatus);
                    if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                        $root.google.protobuf.StringValue.encode(message.reason, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.expirationDate != null && Object.hasOwnProperty.call(message, "expirationDate"))
                        $root.google.protobuf.Int64Value.encode(message.expirationDate, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.requesterId != null && Object.hasOwnProperty.call(message, "requesterId"))
                        $root.google.protobuf.Int64Value.encode(message.requesterId, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.recipientId != null && Object.hasOwnProperty.call(message, "recipientId"))
                        $root.google.protobuf.Int64Value.encode(message.recipientId, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a UserFriendRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UserFriendRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UserFriendRequest} UserFriendRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserFriendRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UserFriendRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.creationDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.content = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.requestStatus = reader.int32();
                            break;
                        case 5:
                            message.reason = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.expirationDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.requesterId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.recipientId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UserFriendRequest;
            })();

            proto.UserFriendRequestsWithVersion = (function() {

                /**
                 * Properties of a UserFriendRequestsWithVersion.
                 * @memberof im.turms.proto
                 * @interface IUserFriendRequestsWithVersion
                 * @property {Array.<im.turms.proto.IUserFriendRequest>|null} [userFriendRequests] UserFriendRequestsWithVersion userFriendRequests
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] UserFriendRequestsWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new UserFriendRequestsWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UserFriendRequestsWithVersion.
                 * @implements IUserFriendRequestsWithVersion
                 * @constructor
                 * @param {im.turms.proto.IUserFriendRequestsWithVersion=} [properties] Properties to set
                 */
                function UserFriendRequestsWithVersion(properties) {
                    this.userFriendRequests = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserFriendRequestsWithVersion userFriendRequests.
                 * @member {Array.<im.turms.proto.IUserFriendRequest>} userFriendRequests
                 * @memberof im.turms.proto.UserFriendRequestsWithVersion
                 * @instance
                 */
                UserFriendRequestsWithVersion.prototype.userFriendRequests = $util.emptyArray;

                /**
                 * UserFriendRequestsWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.UserFriendRequestsWithVersion
                 * @instance
                 */
                UserFriendRequestsWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified UserFriendRequestsWithVersion message. Does not implicitly {@link im.turms.proto.UserFriendRequestsWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UserFriendRequestsWithVersion
                 * @static
                 * @param {im.turms.proto.IUserFriendRequestsWithVersion} message UserFriendRequestsWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserFriendRequestsWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userFriendRequests != null && message.userFriendRequests.length)
                        for (var i = 0; i < message.userFriendRequests.length; ++i)
                            $root.im.turms.proto.UserFriendRequest.encode(message.userFriendRequests[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a UserFriendRequestsWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UserFriendRequestsWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UserFriendRequestsWithVersion} UserFriendRequestsWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserFriendRequestsWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UserFriendRequestsWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.userFriendRequests && message.userFriendRequests.length))
                                message.userFriendRequests = [];
                            message.userFriendRequests.push($root.im.turms.proto.UserFriendRequest.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UserFriendRequestsWithVersion;
            })();

            proto.UserInfo = (function() {

                /**
                 * Properties of a UserInfo.
                 * @memberof im.turms.proto
                 * @interface IUserInfo
                 * @property {google.protobuf.IInt64Value|null} [id] UserInfo id
                 * @property {google.protobuf.IStringValue|null} [name] UserInfo name
                 * @property {google.protobuf.IStringValue|null} [intro] UserInfo intro
                 * @property {google.protobuf.IStringValue|null} [profilePictureUrl] UserInfo profilePictureUrl
                 * @property {google.protobuf.IInt64Value|null} [registrationDate] UserInfo registrationDate
                 * @property {google.protobuf.IInt64Value|null} [deletionDate] UserInfo deletionDate
                 * @property {google.protobuf.IBoolValue|null} [active] UserInfo active
                 * @property {im.turms.proto.ProfileAccessStrategy|null} [profileAccessStrategy] UserInfo profileAccessStrategy
                 */

                /**
                 * Constructs a new UserInfo.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UserInfo.
                 * @implements IUserInfo
                 * @constructor
                 * @param {im.turms.proto.IUserInfo=} [properties] Properties to set
                 */
                function UserInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserInfo id.
                 * @member {google.protobuf.IInt64Value|null|undefined} id
                 * @memberof im.turms.proto.UserInfo
                 * @instance
                 */
                UserInfo.prototype.id = null;

                /**
                 * UserInfo name.
                 * @member {google.protobuf.IStringValue|null|undefined} name
                 * @memberof im.turms.proto.UserInfo
                 * @instance
                 */
                UserInfo.prototype.name = null;

                /**
                 * UserInfo intro.
                 * @member {google.protobuf.IStringValue|null|undefined} intro
                 * @memberof im.turms.proto.UserInfo
                 * @instance
                 */
                UserInfo.prototype.intro = null;

                /**
                 * UserInfo profilePictureUrl.
                 * @member {google.protobuf.IStringValue|null|undefined} profilePictureUrl
                 * @memberof im.turms.proto.UserInfo
                 * @instance
                 */
                UserInfo.prototype.profilePictureUrl = null;

                /**
                 * UserInfo registrationDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} registrationDate
                 * @memberof im.turms.proto.UserInfo
                 * @instance
                 */
                UserInfo.prototype.registrationDate = null;

                /**
                 * UserInfo deletionDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} deletionDate
                 * @memberof im.turms.proto.UserInfo
                 * @instance
                 */
                UserInfo.prototype.deletionDate = null;

                /**
                 * UserInfo active.
                 * @member {google.protobuf.IBoolValue|null|undefined} active
                 * @memberof im.turms.proto.UserInfo
                 * @instance
                 */
                UserInfo.prototype.active = null;

                /**
                 * UserInfo profileAccessStrategy.
                 * @member {im.turms.proto.ProfileAccessStrategy} profileAccessStrategy
                 * @memberof im.turms.proto.UserInfo
                 * @instance
                 */
                UserInfo.prototype.profileAccessStrategy = 0;

                /**
                 * Encodes the specified UserInfo message. Does not implicitly {@link im.turms.proto.UserInfo.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UserInfo
                 * @static
                 * @param {im.turms.proto.IUserInfo} message UserInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        $root.google.protobuf.Int64Value.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.intro != null && Object.hasOwnProperty.call(message, "intro"))
                        $root.google.protobuf.StringValue.encode(message.intro, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.profilePictureUrl != null && Object.hasOwnProperty.call(message, "profilePictureUrl"))
                        $root.google.protobuf.StringValue.encode(message.profilePictureUrl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.registrationDate != null && Object.hasOwnProperty.call(message, "registrationDate"))
                        $root.google.protobuf.Int64Value.encode(message.registrationDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.deletionDate != null && Object.hasOwnProperty.call(message, "deletionDate"))
                        $root.google.protobuf.Int64Value.encode(message.deletionDate, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.active != null && Object.hasOwnProperty.call(message, "active"))
                        $root.google.protobuf.BoolValue.encode(message.active, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.profileAccessStrategy != null && Object.hasOwnProperty.call(message, "profileAccessStrategy"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.profileAccessStrategy);
                    return writer;
                };

                /**
                 * Decodes a UserInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UserInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UserInfo} UserInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UserInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.intro = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.profilePictureUrl = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.registrationDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.deletionDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.active = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.profileAccessStrategy = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UserInfo;
            })();

            proto.UserLocation = (function() {

                /**
                 * Properties of a UserLocation.
                 * @memberof im.turms.proto
                 * @interface IUserLocation
                 * @property {number|null} [latitude] UserLocation latitude
                 * @property {number|null} [longitude] UserLocation longitude
                 * @property {google.protobuf.IStringValue|null} [name] UserLocation name
                 * @property {google.protobuf.IStringValue|null} [address] UserLocation address
                 * @property {google.protobuf.IInt64Value|null} [timestamp] UserLocation timestamp
                 */

                /**
                 * Constructs a new UserLocation.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UserLocation.
                 * @implements IUserLocation
                 * @constructor
                 * @param {im.turms.proto.IUserLocation=} [properties] Properties to set
                 */
                function UserLocation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserLocation latitude.
                 * @member {number} latitude
                 * @memberof im.turms.proto.UserLocation
                 * @instance
                 */
                UserLocation.prototype.latitude = 0;

                /**
                 * UserLocation longitude.
                 * @member {number} longitude
                 * @memberof im.turms.proto.UserLocation
                 * @instance
                 */
                UserLocation.prototype.longitude = 0;

                /**
                 * UserLocation name.
                 * @member {google.protobuf.IStringValue|null|undefined} name
                 * @memberof im.turms.proto.UserLocation
                 * @instance
                 */
                UserLocation.prototype.name = null;

                /**
                 * UserLocation address.
                 * @member {google.protobuf.IStringValue|null|undefined} address
                 * @memberof im.turms.proto.UserLocation
                 * @instance
                 */
                UserLocation.prototype.address = null;

                /**
                 * UserLocation timestamp.
                 * @member {google.protobuf.IInt64Value|null|undefined} timestamp
                 * @memberof im.turms.proto.UserLocation
                 * @instance
                 */
                UserLocation.prototype.timestamp = null;

                /**
                 * Encodes the specified UserLocation message. Does not implicitly {@link im.turms.proto.UserLocation.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UserLocation
                 * @static
                 * @param {im.turms.proto.IUserLocation} message UserLocation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserLocation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.latitude != null && Object.hasOwnProperty.call(message, "latitude"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.latitude);
                    if (message.longitude != null && Object.hasOwnProperty.call(message, "longitude"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.longitude);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        $root.google.protobuf.StringValue.encode(message.address, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                        $root.google.protobuf.Int64Value.encode(message.timestamp, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a UserLocation message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UserLocation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UserLocation} UserLocation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserLocation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UserLocation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.latitude = reader.float();
                            break;
                        case 2:
                            message.longitude = reader.float();
                            break;
                        case 3:
                            message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.address = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.timestamp = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UserLocation;
            })();

            proto.UserRelationshipGroup = (function() {

                /**
                 * Properties of a UserRelationshipGroup.
                 * @memberof im.turms.proto
                 * @interface IUserRelationshipGroup
                 * @property {number|null} [index] UserRelationshipGroup index
                 * @property {string|null} [name] UserRelationshipGroup name
                 */

                /**
                 * Constructs a new UserRelationshipGroup.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UserRelationshipGroup.
                 * @implements IUserRelationshipGroup
                 * @constructor
                 * @param {im.turms.proto.IUserRelationshipGroup=} [properties] Properties to set
                 */
                function UserRelationshipGroup(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserRelationshipGroup index.
                 * @member {number} index
                 * @memberof im.turms.proto.UserRelationshipGroup
                 * @instance
                 */
                UserRelationshipGroup.prototype.index = 0;

                /**
                 * UserRelationshipGroup name.
                 * @member {string} name
                 * @memberof im.turms.proto.UserRelationshipGroup
                 * @instance
                 */
                UserRelationshipGroup.prototype.name = "";

                /**
                 * Encodes the specified UserRelationshipGroup message. Does not implicitly {@link im.turms.proto.UserRelationshipGroup.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UserRelationshipGroup
                 * @static
                 * @param {im.turms.proto.IUserRelationshipGroup} message UserRelationshipGroup message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserRelationshipGroup.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.index);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    return writer;
                };

                /**
                 * Decodes a UserRelationshipGroup message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UserRelationshipGroup
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UserRelationshipGroup} UserRelationshipGroup
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserRelationshipGroup.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UserRelationshipGroup();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.index = reader.int32();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UserRelationshipGroup;
            })();

            proto.UserRelationshipGroupsWithVersion = (function() {

                /**
                 * Properties of a UserRelationshipGroupsWithVersion.
                 * @memberof im.turms.proto
                 * @interface IUserRelationshipGroupsWithVersion
                 * @property {Array.<im.turms.proto.IUserRelationshipGroup>|null} [userRelationshipGroups] UserRelationshipGroupsWithVersion userRelationshipGroups
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] UserRelationshipGroupsWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new UserRelationshipGroupsWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UserRelationshipGroupsWithVersion.
                 * @implements IUserRelationshipGroupsWithVersion
                 * @constructor
                 * @param {im.turms.proto.IUserRelationshipGroupsWithVersion=} [properties] Properties to set
                 */
                function UserRelationshipGroupsWithVersion(properties) {
                    this.userRelationshipGroups = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserRelationshipGroupsWithVersion userRelationshipGroups.
                 * @member {Array.<im.turms.proto.IUserRelationshipGroup>} userRelationshipGroups
                 * @memberof im.turms.proto.UserRelationshipGroupsWithVersion
                 * @instance
                 */
                UserRelationshipGroupsWithVersion.prototype.userRelationshipGroups = $util.emptyArray;

                /**
                 * UserRelationshipGroupsWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.UserRelationshipGroupsWithVersion
                 * @instance
                 */
                UserRelationshipGroupsWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified UserRelationshipGroupsWithVersion message. Does not implicitly {@link im.turms.proto.UserRelationshipGroupsWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UserRelationshipGroupsWithVersion
                 * @static
                 * @param {im.turms.proto.IUserRelationshipGroupsWithVersion} message UserRelationshipGroupsWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserRelationshipGroupsWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userRelationshipGroups != null && message.userRelationshipGroups.length)
                        for (var i = 0; i < message.userRelationshipGroups.length; ++i)
                            $root.im.turms.proto.UserRelationshipGroup.encode(message.userRelationshipGroups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a UserRelationshipGroupsWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UserRelationshipGroupsWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UserRelationshipGroupsWithVersion} UserRelationshipGroupsWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserRelationshipGroupsWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UserRelationshipGroupsWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.userRelationshipGroups && message.userRelationshipGroups.length))
                                message.userRelationshipGroups = [];
                            message.userRelationshipGroups.push($root.im.turms.proto.UserRelationshipGroup.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UserRelationshipGroupsWithVersion;
            })();

            proto.UserRelationship = (function() {

                /**
                 * Properties of a UserRelationship.
                 * @memberof im.turms.proto
                 * @interface IUserRelationship
                 * @property {google.protobuf.IInt64Value|null} [ownerId] UserRelationship ownerId
                 * @property {google.protobuf.IInt64Value|null} [relatedUserId] UserRelationship relatedUserId
                 * @property {google.protobuf.IBoolValue|null} [isBlocked] UserRelationship isBlocked
                 * @property {google.protobuf.IInt64Value|null} [groupIndex] UserRelationship groupIndex
                 * @property {google.protobuf.IInt64Value|null} [establishmentDate] UserRelationship establishmentDate
                 */

                /**
                 * Constructs a new UserRelationship.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UserRelationship.
                 * @implements IUserRelationship
                 * @constructor
                 * @param {im.turms.proto.IUserRelationship=} [properties] Properties to set
                 */
                function UserRelationship(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserRelationship ownerId.
                 * @member {google.protobuf.IInt64Value|null|undefined} ownerId
                 * @memberof im.turms.proto.UserRelationship
                 * @instance
                 */
                UserRelationship.prototype.ownerId = null;

                /**
                 * UserRelationship relatedUserId.
                 * @member {google.protobuf.IInt64Value|null|undefined} relatedUserId
                 * @memberof im.turms.proto.UserRelationship
                 * @instance
                 */
                UserRelationship.prototype.relatedUserId = null;

                /**
                 * UserRelationship isBlocked.
                 * @member {google.protobuf.IBoolValue|null|undefined} isBlocked
                 * @memberof im.turms.proto.UserRelationship
                 * @instance
                 */
                UserRelationship.prototype.isBlocked = null;

                /**
                 * UserRelationship groupIndex.
                 * @member {google.protobuf.IInt64Value|null|undefined} groupIndex
                 * @memberof im.turms.proto.UserRelationship
                 * @instance
                 */
                UserRelationship.prototype.groupIndex = null;

                /**
                 * UserRelationship establishmentDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} establishmentDate
                 * @memberof im.turms.proto.UserRelationship
                 * @instance
                 */
                UserRelationship.prototype.establishmentDate = null;

                /**
                 * Encodes the specified UserRelationship message. Does not implicitly {@link im.turms.proto.UserRelationship.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UserRelationship
                 * @static
                 * @param {im.turms.proto.IUserRelationship} message UserRelationship message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserRelationship.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ownerId != null && Object.hasOwnProperty.call(message, "ownerId"))
                        $root.google.protobuf.Int64Value.encode(message.ownerId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.relatedUserId != null && Object.hasOwnProperty.call(message, "relatedUserId"))
                        $root.google.protobuf.Int64Value.encode(message.relatedUserId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.isBlocked != null && Object.hasOwnProperty.call(message, "isBlocked"))
                        $root.google.protobuf.BoolValue.encode(message.isBlocked, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.groupIndex != null && Object.hasOwnProperty.call(message, "groupIndex"))
                        $root.google.protobuf.Int64Value.encode(message.groupIndex, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.establishmentDate != null && Object.hasOwnProperty.call(message, "establishmentDate"))
                        $root.google.protobuf.Int64Value.encode(message.establishmentDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a UserRelationship message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UserRelationship
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UserRelationship} UserRelationship
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserRelationship.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UserRelationship();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ownerId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.relatedUserId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.isBlocked = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.groupIndex = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.establishmentDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UserRelationship;
            })();

            proto.UserRelationshipsWithVersion = (function() {

                /**
                 * Properties of a UserRelationshipsWithVersion.
                 * @memberof im.turms.proto
                 * @interface IUserRelationshipsWithVersion
                 * @property {Array.<im.turms.proto.IUserRelationship>|null} [userRelationships] UserRelationshipsWithVersion userRelationships
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] UserRelationshipsWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new UserRelationshipsWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UserRelationshipsWithVersion.
                 * @implements IUserRelationshipsWithVersion
                 * @constructor
                 * @param {im.turms.proto.IUserRelationshipsWithVersion=} [properties] Properties to set
                 */
                function UserRelationshipsWithVersion(properties) {
                    this.userRelationships = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserRelationshipsWithVersion userRelationships.
                 * @member {Array.<im.turms.proto.IUserRelationship>} userRelationships
                 * @memberof im.turms.proto.UserRelationshipsWithVersion
                 * @instance
                 */
                UserRelationshipsWithVersion.prototype.userRelationships = $util.emptyArray;

                /**
                 * UserRelationshipsWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.UserRelationshipsWithVersion
                 * @instance
                 */
                UserRelationshipsWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified UserRelationshipsWithVersion message. Does not implicitly {@link im.turms.proto.UserRelationshipsWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UserRelationshipsWithVersion
                 * @static
                 * @param {im.turms.proto.IUserRelationshipsWithVersion} message UserRelationshipsWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserRelationshipsWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userRelationships != null && message.userRelationships.length)
                        for (var i = 0; i < message.userRelationships.length; ++i)
                            $root.im.turms.proto.UserRelationship.encode(message.userRelationships[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a UserRelationshipsWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UserRelationshipsWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UserRelationshipsWithVersion} UserRelationshipsWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserRelationshipsWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UserRelationshipsWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.userRelationships && message.userRelationships.length))
                                message.userRelationships = [];
                            message.userRelationships.push($root.im.turms.proto.UserRelationship.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UserRelationshipsWithVersion;
            })();

            proto.UserStatusDetail = (function() {

                /**
                 * Properties of a UserStatusDetail.
                 * @memberof im.turms.proto
                 * @interface IUserStatusDetail
                 * @property {string|null} [userId] UserStatusDetail userId
                 * @property {im.turms.proto.UserStatus|null} [userStatus] UserStatusDetail userStatus
                 * @property {Array.<im.turms.proto.DeviceType>|null} [usingDeviceTypes] UserStatusDetail usingDeviceTypes
                 */

                /**
                 * Constructs a new UserStatusDetail.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UserStatusDetail.
                 * @implements IUserStatusDetail
                 * @constructor
                 * @param {im.turms.proto.IUserStatusDetail=} [properties] Properties to set
                 */
                function UserStatusDetail(properties) {
                    this.usingDeviceTypes = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserStatusDetail userId.
                 * @member {string} userId
                 * @memberof im.turms.proto.UserStatusDetail
                 * @instance
                 */
                UserStatusDetail.prototype.userId = "0";

                /**
                 * UserStatusDetail userStatus.
                 * @member {im.turms.proto.UserStatus} userStatus
                 * @memberof im.turms.proto.UserStatusDetail
                 * @instance
                 */
                UserStatusDetail.prototype.userStatus = 0;

                /**
                 * UserStatusDetail usingDeviceTypes.
                 * @member {Array.<im.turms.proto.DeviceType>} usingDeviceTypes
                 * @memberof im.turms.proto.UserStatusDetail
                 * @instance
                 */
                UserStatusDetail.prototype.usingDeviceTypes = $util.emptyArray;

                /**
                 * Encodes the specified UserStatusDetail message. Does not implicitly {@link im.turms.proto.UserStatusDetail.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UserStatusDetail
                 * @static
                 * @param {im.turms.proto.IUserStatusDetail} message UserStatusDetail message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserStatusDetail.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                    if (message.userStatus != null && Object.hasOwnProperty.call(message, "userStatus"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userStatus);
                    if (message.usingDeviceTypes != null && message.usingDeviceTypes.length) {
                        writer.uint32(/* id 3, wireType 2 =*/26).fork();
                        for (var i = 0; i < message.usingDeviceTypes.length; ++i)
                            writer.int32(message.usingDeviceTypes[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Decodes a UserStatusDetail message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UserStatusDetail
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UserStatusDetail} UserStatusDetail
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserStatusDetail.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UserStatusDetail();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.userId = reader.int64().toString();
                            break;
                        case 2:
                            message.userStatus = reader.int32();
                            break;
                        case 3:
                            if (!(message.usingDeviceTypes && message.usingDeviceTypes.length))
                                message.usingDeviceTypes = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.usingDeviceTypes.push(reader.int32());
                            } else
                                message.usingDeviceTypes.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UserStatusDetail;
            })();

            proto.UsersInfosWithVersion = (function() {

                /**
                 * Properties of a UsersInfosWithVersion.
                 * @memberof im.turms.proto
                 * @interface IUsersInfosWithVersion
                 * @property {Array.<im.turms.proto.IUserInfo>|null} [userInfos] UsersInfosWithVersion userInfos
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] UsersInfosWithVersion lastUpdatedDate
                 */

                /**
                 * Constructs a new UsersInfosWithVersion.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UsersInfosWithVersion.
                 * @implements IUsersInfosWithVersion
                 * @constructor
                 * @param {im.turms.proto.IUsersInfosWithVersion=} [properties] Properties to set
                 */
                function UsersInfosWithVersion(properties) {
                    this.userInfos = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UsersInfosWithVersion userInfos.
                 * @member {Array.<im.turms.proto.IUserInfo>} userInfos
                 * @memberof im.turms.proto.UsersInfosWithVersion
                 * @instance
                 */
                UsersInfosWithVersion.prototype.userInfos = $util.emptyArray;

                /**
                 * UsersInfosWithVersion lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.UsersInfosWithVersion
                 * @instance
                 */
                UsersInfosWithVersion.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified UsersInfosWithVersion message. Does not implicitly {@link im.turms.proto.UsersInfosWithVersion.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UsersInfosWithVersion
                 * @static
                 * @param {im.turms.proto.IUsersInfosWithVersion} message UsersInfosWithVersion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UsersInfosWithVersion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userInfos != null && message.userInfos.length)
                        for (var i = 0; i < message.userInfos.length; ++i)
                            $root.im.turms.proto.UserInfo.encode(message.userInfos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a UsersInfosWithVersion message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UsersInfosWithVersion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UsersInfosWithVersion} UsersInfosWithVersion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UsersInfosWithVersion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UsersInfosWithVersion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.userInfos && message.userInfos.length))
                                message.userInfos = [];
                            message.userInfos.push($root.im.turms.proto.UserInfo.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UsersInfosWithVersion;
            })();

            proto.UsersOnlineStatuses = (function() {

                /**
                 * Properties of a UsersOnlineStatuses.
                 * @memberof im.turms.proto
                 * @interface IUsersOnlineStatuses
                 * @property {Array.<im.turms.proto.IUserStatusDetail>|null} [userStatuses] UsersOnlineStatuses userStatuses
                 */

                /**
                 * Constructs a new UsersOnlineStatuses.
                 * @memberof im.turms.proto
                 * @classdesc Represents a UsersOnlineStatuses.
                 * @implements IUsersOnlineStatuses
                 * @constructor
                 * @param {im.turms.proto.IUsersOnlineStatuses=} [properties] Properties to set
                 */
                function UsersOnlineStatuses(properties) {
                    this.userStatuses = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UsersOnlineStatuses userStatuses.
                 * @member {Array.<im.turms.proto.IUserStatusDetail>} userStatuses
                 * @memberof im.turms.proto.UsersOnlineStatuses
                 * @instance
                 */
                UsersOnlineStatuses.prototype.userStatuses = $util.emptyArray;

                /**
                 * Encodes the specified UsersOnlineStatuses message. Does not implicitly {@link im.turms.proto.UsersOnlineStatuses.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UsersOnlineStatuses
                 * @static
                 * @param {im.turms.proto.IUsersOnlineStatuses} message UsersOnlineStatuses message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UsersOnlineStatuses.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userStatuses != null && message.userStatuses.length)
                        for (var i = 0; i < message.userStatuses.length; ++i)
                            $root.im.turms.proto.UserStatusDetail.encode(message.userStatuses[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a UsersOnlineStatuses message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UsersOnlineStatuses
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UsersOnlineStatuses} UsersOnlineStatuses
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UsersOnlineStatuses.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UsersOnlineStatuses();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.userStatuses && message.userStatuses.length))
                                message.userStatuses = [];
                            message.userStatuses.push($root.im.turms.proto.UserStatusDetail.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UsersOnlineStatuses;
            })();

            proto.TurmsNotification = (function() {

                /**
                 * Properties of a TurmsNotification.
                 * @memberof im.turms.proto
                 * @interface ITurmsNotification
                 * @property {google.protobuf.IInt64Value|null} [requestId] TurmsNotification requestId
                 * @property {google.protobuf.IInt32Value|null} [code] TurmsNotification code
                 * @property {google.protobuf.IStringValue|null} [reason] TurmsNotification reason
                 * @property {im.turms.proto.TurmsNotification.IData|null} [data] TurmsNotification data
                 * @property {im.turms.proto.ITurmsRequest|null} [relayedRequest] TurmsNotification relayedRequest
                 * @property {google.protobuf.IInt64Value|null} [requesterId] TurmsNotification requesterId
                 */

                /**
                 * Constructs a new TurmsNotification.
                 * @memberof im.turms.proto
                 * @classdesc Represents a TurmsNotification.
                 * @implements ITurmsNotification
                 * @constructor
                 * @param {im.turms.proto.ITurmsNotification=} [properties] Properties to set
                 */
                function TurmsNotification(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TurmsNotification requestId.
                 * @member {google.protobuf.IInt64Value|null|undefined} requestId
                 * @memberof im.turms.proto.TurmsNotification
                 * @instance
                 */
                TurmsNotification.prototype.requestId = null;

                /**
                 * TurmsNotification code.
                 * @member {google.protobuf.IInt32Value|null|undefined} code
                 * @memberof im.turms.proto.TurmsNotification
                 * @instance
                 */
                TurmsNotification.prototype.code = null;

                /**
                 * TurmsNotification reason.
                 * @member {google.protobuf.IStringValue|null|undefined} reason
                 * @memberof im.turms.proto.TurmsNotification
                 * @instance
                 */
                TurmsNotification.prototype.reason = null;

                /**
                 * TurmsNotification data.
                 * @member {im.turms.proto.TurmsNotification.IData|null|undefined} data
                 * @memberof im.turms.proto.TurmsNotification
                 * @instance
                 */
                TurmsNotification.prototype.data = null;

                /**
                 * TurmsNotification relayedRequest.
                 * @member {im.turms.proto.ITurmsRequest|null|undefined} relayedRequest
                 * @memberof im.turms.proto.TurmsNotification
                 * @instance
                 */
                TurmsNotification.prototype.relayedRequest = null;

                /**
                 * TurmsNotification requesterId.
                 * @member {google.protobuf.IInt64Value|null|undefined} requesterId
                 * @memberof im.turms.proto.TurmsNotification
                 * @instance
                 */
                TurmsNotification.prototype.requesterId = null;

                /**
                 * Encodes the specified TurmsNotification message. Does not implicitly {@link im.turms.proto.TurmsNotification.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.TurmsNotification
                 * @static
                 * @param {im.turms.proto.ITurmsNotification} message TurmsNotification message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TurmsNotification.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                        $root.google.protobuf.Int64Value.encode(message.requestId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        $root.google.protobuf.Int32Value.encode(message.code, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                        $root.google.protobuf.StringValue.encode(message.reason, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        $root.im.turms.proto.TurmsNotification.Data.encode(message.data, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.relayedRequest != null && Object.hasOwnProperty.call(message, "relayedRequest"))
                        $root.im.turms.proto.TurmsRequest.encode(message.relayedRequest, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.requesterId != null && Object.hasOwnProperty.call(message, "requesterId"))
                        $root.google.protobuf.Int64Value.encode(message.requesterId, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a TurmsNotification message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.TurmsNotification
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.TurmsNotification} TurmsNotification
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TurmsNotification.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.TurmsNotification();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.requestId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.code = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.reason = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.data = $root.im.turms.proto.TurmsNotification.Data.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.relayedRequest = $root.im.turms.proto.TurmsRequest.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.requesterId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                TurmsNotification.Data = (function() {

                    /**
                     * Properties of a Data.
                     * @memberof im.turms.proto.TurmsNotification
                     * @interface IData
                     * @property {im.turms.proto.IInt64Values|null} [ids] Data ids
                     * @property {im.turms.proto.IInt64ValuesWithVersion|null} [idsWithVersion] Data idsWithVersion
                     * @property {google.protobuf.IStringValue|null} [url] Data url
                     * @property {im.turms.proto.IAcknowledge|null} [acknowledge] Data acknowledge
                     * @property {im.turms.proto.ISession|null} [session] Data session
                     * @property {im.turms.proto.IMessages|null} [messages] Data messages
                     * @property {im.turms.proto.IMessageStatuses|null} [messageStatuses] Data messageStatuses
                     * @property {im.turms.proto.IMessagesWithTotalList|null} [messagesWithTotalList] Data messagesWithTotalList
                     * @property {im.turms.proto.IUsersInfosWithVersion|null} [usersInfosWithVersion] Data usersInfosWithVersion
                     * @property {im.turms.proto.IUsersOnlineStatuses|null} [usersOnlineStatuses] Data usersOnlineStatuses
                     * @property {im.turms.proto.IUserFriendRequestsWithVersion|null} [userFriendRequestsWithVersion] Data userFriendRequestsWithVersion
                     * @property {im.turms.proto.IUserRelationshipGroupsWithVersion|null} [userRelationshipGroupsWithVersion] Data userRelationshipGroupsWithVersion
                     * @property {im.turms.proto.IUserRelationshipsWithVersion|null} [userRelationshipsWithVersion] Data userRelationshipsWithVersion
                     * @property {im.turms.proto.IGroupInvitationsWithVersion|null} [groupInvitationsWithVersion] Data groupInvitationsWithVersion
                     * @property {im.turms.proto.IGroupJoinQuestionsAnswerResult|null} [groupJoinQuestionAnswerResult] Data groupJoinQuestionAnswerResult
                     * @property {im.turms.proto.IGroupJoinRequestsWithVersion|null} [groupJoinRequestsWithVersion] Data groupJoinRequestsWithVersion
                     * @property {im.turms.proto.IGroupJoinQuestionsWithVersion|null} [groupJoinQuestionsWithVersion] Data groupJoinQuestionsWithVersion
                     * @property {im.turms.proto.IGroupMembersWithVersion|null} [groupMembersWithVersion] Data groupMembersWithVersion
                     * @property {im.turms.proto.IGroupsWithVersion|null} [groupsWithVersion] Data groupsWithVersion
                     */

                    /**
                     * Constructs a new Data.
                     * @memberof im.turms.proto.TurmsNotification
                     * @classdesc Represents a Data.
                     * @implements IData
                     * @constructor
                     * @param {im.turms.proto.TurmsNotification.IData=} [properties] Properties to set
                     */
                    function Data(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Data ids.
                     * @member {im.turms.proto.IInt64Values|null|undefined} ids
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.ids = null;

                    /**
                     * Data idsWithVersion.
                     * @member {im.turms.proto.IInt64ValuesWithVersion|null|undefined} idsWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.idsWithVersion = null;

                    /**
                     * Data url.
                     * @member {google.protobuf.IStringValue|null|undefined} url
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.url = null;

                    /**
                     * Data acknowledge.
                     * @member {im.turms.proto.IAcknowledge|null|undefined} acknowledge
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.acknowledge = null;

                    /**
                     * Data session.
                     * @member {im.turms.proto.ISession|null|undefined} session
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.session = null;

                    /**
                     * Data messages.
                     * @member {im.turms.proto.IMessages|null|undefined} messages
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.messages = null;

                    /**
                     * Data messageStatuses.
                     * @member {im.turms.proto.IMessageStatuses|null|undefined} messageStatuses
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.messageStatuses = null;

                    /**
                     * Data messagesWithTotalList.
                     * @member {im.turms.proto.IMessagesWithTotalList|null|undefined} messagesWithTotalList
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.messagesWithTotalList = null;

                    /**
                     * Data usersInfosWithVersion.
                     * @member {im.turms.proto.IUsersInfosWithVersion|null|undefined} usersInfosWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.usersInfosWithVersion = null;

                    /**
                     * Data usersOnlineStatuses.
                     * @member {im.turms.proto.IUsersOnlineStatuses|null|undefined} usersOnlineStatuses
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.usersOnlineStatuses = null;

                    /**
                     * Data userFriendRequestsWithVersion.
                     * @member {im.turms.proto.IUserFriendRequestsWithVersion|null|undefined} userFriendRequestsWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.userFriendRequestsWithVersion = null;

                    /**
                     * Data userRelationshipGroupsWithVersion.
                     * @member {im.turms.proto.IUserRelationshipGroupsWithVersion|null|undefined} userRelationshipGroupsWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.userRelationshipGroupsWithVersion = null;

                    /**
                     * Data userRelationshipsWithVersion.
                     * @member {im.turms.proto.IUserRelationshipsWithVersion|null|undefined} userRelationshipsWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.userRelationshipsWithVersion = null;

                    /**
                     * Data groupInvitationsWithVersion.
                     * @member {im.turms.proto.IGroupInvitationsWithVersion|null|undefined} groupInvitationsWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.groupInvitationsWithVersion = null;

                    /**
                     * Data groupJoinQuestionAnswerResult.
                     * @member {im.turms.proto.IGroupJoinQuestionsAnswerResult|null|undefined} groupJoinQuestionAnswerResult
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.groupJoinQuestionAnswerResult = null;

                    /**
                     * Data groupJoinRequestsWithVersion.
                     * @member {im.turms.proto.IGroupJoinRequestsWithVersion|null|undefined} groupJoinRequestsWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.groupJoinRequestsWithVersion = null;

                    /**
                     * Data groupJoinQuestionsWithVersion.
                     * @member {im.turms.proto.IGroupJoinQuestionsWithVersion|null|undefined} groupJoinQuestionsWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.groupJoinQuestionsWithVersion = null;

                    /**
                     * Data groupMembersWithVersion.
                     * @member {im.turms.proto.IGroupMembersWithVersion|null|undefined} groupMembersWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.groupMembersWithVersion = null;

                    /**
                     * Data groupsWithVersion.
                     * @member {im.turms.proto.IGroupsWithVersion|null|undefined} groupsWithVersion
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Data.prototype.groupsWithVersion = null;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * Data kind.
                     * @member {"ids"|"idsWithVersion"|"url"|"acknowledge"|"session"|"messages"|"messageStatuses"|"messagesWithTotalList"|"usersInfosWithVersion"|"usersOnlineStatuses"|"userFriendRequestsWithVersion"|"userRelationshipGroupsWithVersion"|"userRelationshipsWithVersion"|"groupInvitationsWithVersion"|"groupJoinQuestionAnswerResult"|"groupJoinRequestsWithVersion"|"groupJoinQuestionsWithVersion"|"groupMembersWithVersion"|"groupsWithVersion"|undefined} kind
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @instance
                     */
                    Object.defineProperty(Data.prototype, "kind", {
                        get: $util.oneOfGetter($oneOfFields = ["ids", "idsWithVersion", "url", "acknowledge", "session", "messages", "messageStatuses", "messagesWithTotalList", "usersInfosWithVersion", "usersOnlineStatuses", "userFriendRequestsWithVersion", "userRelationshipGroupsWithVersion", "userRelationshipsWithVersion", "groupInvitationsWithVersion", "groupJoinQuestionAnswerResult", "groupJoinRequestsWithVersion", "groupJoinQuestionsWithVersion", "groupMembersWithVersion", "groupsWithVersion"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Encodes the specified Data message. Does not implicitly {@link im.turms.proto.TurmsNotification.Data.verify|verify} messages.
                     * @function encode
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @static
                     * @param {im.turms.proto.TurmsNotification.IData} message Data message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Data.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.ids != null && Object.hasOwnProperty.call(message, "ids"))
                            $root.im.turms.proto.Int64Values.encode(message.ids, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.idsWithVersion != null && Object.hasOwnProperty.call(message, "idsWithVersion"))
                            $root.im.turms.proto.Int64ValuesWithVersion.encode(message.idsWithVersion, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            $root.google.protobuf.StringValue.encode(message.url, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.acknowledge != null && Object.hasOwnProperty.call(message, "acknowledge"))
                            $root.im.turms.proto.Acknowledge.encode(message.acknowledge, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            $root.im.turms.proto.Session.encode(message.session, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.messages != null && Object.hasOwnProperty.call(message, "messages"))
                            $root.im.turms.proto.Messages.encode(message.messages, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.messageStatuses != null && Object.hasOwnProperty.call(message, "messageStatuses"))
                            $root.im.turms.proto.MessageStatuses.encode(message.messageStatuses, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.messagesWithTotalList != null && Object.hasOwnProperty.call(message, "messagesWithTotalList"))
                            $root.im.turms.proto.MessagesWithTotalList.encode(message.messagesWithTotalList, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.usersInfosWithVersion != null && Object.hasOwnProperty.call(message, "usersInfosWithVersion"))
                            $root.im.turms.proto.UsersInfosWithVersion.encode(message.usersInfosWithVersion, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.usersOnlineStatuses != null && Object.hasOwnProperty.call(message, "usersOnlineStatuses"))
                            $root.im.turms.proto.UsersOnlineStatuses.encode(message.usersOnlineStatuses, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.userFriendRequestsWithVersion != null && Object.hasOwnProperty.call(message, "userFriendRequestsWithVersion"))
                            $root.im.turms.proto.UserFriendRequestsWithVersion.encode(message.userFriendRequestsWithVersion, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.userRelationshipGroupsWithVersion != null && Object.hasOwnProperty.call(message, "userRelationshipGroupsWithVersion"))
                            $root.im.turms.proto.UserRelationshipGroupsWithVersion.encode(message.userRelationshipGroupsWithVersion, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                        if (message.userRelationshipsWithVersion != null && Object.hasOwnProperty.call(message, "userRelationshipsWithVersion"))
                            $root.im.turms.proto.UserRelationshipsWithVersion.encode(message.userRelationshipsWithVersion, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                        if (message.groupInvitationsWithVersion != null && Object.hasOwnProperty.call(message, "groupInvitationsWithVersion"))
                            $root.im.turms.proto.GroupInvitationsWithVersion.encode(message.groupInvitationsWithVersion, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                        if (message.groupJoinQuestionAnswerResult != null && Object.hasOwnProperty.call(message, "groupJoinQuestionAnswerResult"))
                            $root.im.turms.proto.GroupJoinQuestionsAnswerResult.encode(message.groupJoinQuestionAnswerResult, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                        if (message.groupJoinRequestsWithVersion != null && Object.hasOwnProperty.call(message, "groupJoinRequestsWithVersion"))
                            $root.im.turms.proto.GroupJoinRequestsWithVersion.encode(message.groupJoinRequestsWithVersion, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                        if (message.groupJoinQuestionsWithVersion != null && Object.hasOwnProperty.call(message, "groupJoinQuestionsWithVersion"))
                            $root.im.turms.proto.GroupJoinQuestionsWithVersion.encode(message.groupJoinQuestionsWithVersion, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                        if (message.groupMembersWithVersion != null && Object.hasOwnProperty.call(message, "groupMembersWithVersion"))
                            $root.im.turms.proto.GroupMembersWithVersion.encode(message.groupMembersWithVersion, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                        if (message.groupsWithVersion != null && Object.hasOwnProperty.call(message, "groupsWithVersion"))
                            $root.im.turms.proto.GroupsWithVersion.encode(message.groupsWithVersion, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Decodes a Data message from the specified reader or buffer.
                     * @function decode
                     * @memberof im.turms.proto.TurmsNotification.Data
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {im.turms.proto.TurmsNotification.Data} Data
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Data.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.TurmsNotification.Data();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.ids = $root.im.turms.proto.Int64Values.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.idsWithVersion = $root.im.turms.proto.Int64ValuesWithVersion.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.url = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.acknowledge = $root.im.turms.proto.Acknowledge.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.session = $root.im.turms.proto.Session.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.messages = $root.im.turms.proto.Messages.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.messageStatuses = $root.im.turms.proto.MessageStatuses.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.messagesWithTotalList = $root.im.turms.proto.MessagesWithTotalList.decode(reader, reader.uint32());
                                break;
                            case 9:
                                message.usersInfosWithVersion = $root.im.turms.proto.UsersInfosWithVersion.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.usersOnlineStatuses = $root.im.turms.proto.UsersOnlineStatuses.decode(reader, reader.uint32());
                                break;
                            case 11:
                                message.userFriendRequestsWithVersion = $root.im.turms.proto.UserFriendRequestsWithVersion.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.userRelationshipGroupsWithVersion = $root.im.turms.proto.UserRelationshipGroupsWithVersion.decode(reader, reader.uint32());
                                break;
                            case 13:
                                message.userRelationshipsWithVersion = $root.im.turms.proto.UserRelationshipsWithVersion.decode(reader, reader.uint32());
                                break;
                            case 14:
                                message.groupInvitationsWithVersion = $root.im.turms.proto.GroupInvitationsWithVersion.decode(reader, reader.uint32());
                                break;
                            case 15:
                                message.groupJoinQuestionAnswerResult = $root.im.turms.proto.GroupJoinQuestionsAnswerResult.decode(reader, reader.uint32());
                                break;
                            case 16:
                                message.groupJoinRequestsWithVersion = $root.im.turms.proto.GroupJoinRequestsWithVersion.decode(reader, reader.uint32());
                                break;
                            case 17:
                                message.groupJoinQuestionsWithVersion = $root.im.turms.proto.GroupJoinQuestionsWithVersion.decode(reader, reader.uint32());
                                break;
                            case 18:
                                message.groupMembersWithVersion = $root.im.turms.proto.GroupMembersWithVersion.decode(reader, reader.uint32());
                                break;
                            case 19:
                                message.groupsWithVersion = $root.im.turms.proto.GroupsWithVersion.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    return Data;
                })();

                return TurmsNotification;
            })();

            proto.CreateGroupBlacklistedUserRequest = (function() {

                /**
                 * Properties of a CreateGroupBlacklistedUserRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateGroupBlacklistedUserRequest
                 * @property {string|null} [groupId] CreateGroupBlacklistedUserRequest groupId
                 * @property {string|null} [blacklistedUserId] CreateGroupBlacklistedUserRequest blacklistedUserId
                 */

                /**
                 * Constructs a new CreateGroupBlacklistedUserRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateGroupBlacklistedUserRequest.
                 * @implements ICreateGroupBlacklistedUserRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateGroupBlacklistedUserRequest=} [properties] Properties to set
                 */
                function CreateGroupBlacklistedUserRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateGroupBlacklistedUserRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.CreateGroupBlacklistedUserRequest
                 * @instance
                 */
                CreateGroupBlacklistedUserRequest.prototype.groupId = "0";

                /**
                 * CreateGroupBlacklistedUserRequest blacklistedUserId.
                 * @member {string} blacklistedUserId
                 * @memberof im.turms.proto.CreateGroupBlacklistedUserRequest
                 * @instance
                 */
                CreateGroupBlacklistedUserRequest.prototype.blacklistedUserId = "0";

                /**
                 * Encodes the specified CreateGroupBlacklistedUserRequest message. Does not implicitly {@link im.turms.proto.CreateGroupBlacklistedUserRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateGroupBlacklistedUserRequest
                 * @static
                 * @param {im.turms.proto.ICreateGroupBlacklistedUserRequest} message CreateGroupBlacklistedUserRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateGroupBlacklistedUserRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.blacklistedUserId != null && Object.hasOwnProperty.call(message, "blacklistedUserId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.blacklistedUserId);
                    return writer;
                };

                /**
                 * Decodes a CreateGroupBlacklistedUserRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateGroupBlacklistedUserRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateGroupBlacklistedUserRequest} CreateGroupBlacklistedUserRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateGroupBlacklistedUserRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateGroupBlacklistedUserRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.blacklistedUserId = reader.int64().toString();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateGroupBlacklistedUserRequest;
            })();

            proto.DeleteGroupBlacklistedUserRequest = (function() {

                /**
                 * Properties of a DeleteGroupBlacklistedUserRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteGroupBlacklistedUserRequest
                 * @property {string|null} [groupId] DeleteGroupBlacklistedUserRequest groupId
                 * @property {string|null} [unblacklistedUserId] DeleteGroupBlacklistedUserRequest unblacklistedUserId
                 */

                /**
                 * Constructs a new DeleteGroupBlacklistedUserRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteGroupBlacklistedUserRequest.
                 * @implements IDeleteGroupBlacklistedUserRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteGroupBlacklistedUserRequest=} [properties] Properties to set
                 */
                function DeleteGroupBlacklistedUserRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteGroupBlacklistedUserRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.DeleteGroupBlacklistedUserRequest
                 * @instance
                 */
                DeleteGroupBlacklistedUserRequest.prototype.groupId = "0";

                /**
                 * DeleteGroupBlacklistedUserRequest unblacklistedUserId.
                 * @member {string} unblacklistedUserId
                 * @memberof im.turms.proto.DeleteGroupBlacklistedUserRequest
                 * @instance
                 */
                DeleteGroupBlacklistedUserRequest.prototype.unblacklistedUserId = "0";

                /**
                 * Encodes the specified DeleteGroupBlacklistedUserRequest message. Does not implicitly {@link im.turms.proto.DeleteGroupBlacklistedUserRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteGroupBlacklistedUserRequest
                 * @static
                 * @param {im.turms.proto.IDeleteGroupBlacklistedUserRequest} message DeleteGroupBlacklistedUserRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteGroupBlacklistedUserRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.unblacklistedUserId != null && Object.hasOwnProperty.call(message, "unblacklistedUserId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.unblacklistedUserId);
                    return writer;
                };

                /**
                 * Decodes a DeleteGroupBlacklistedUserRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteGroupBlacklistedUserRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteGroupBlacklistedUserRequest} DeleteGroupBlacklistedUserRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteGroupBlacklistedUserRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteGroupBlacklistedUserRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.unblacklistedUserId = reader.int64().toString();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteGroupBlacklistedUserRequest;
            })();

            proto.QueryGroupBlacklistedUsersIdsRequest = (function() {

                /**
                 * Properties of a QueryGroupBlacklistedUsersIdsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryGroupBlacklistedUsersIdsRequest
                 * @property {string|null} [groupId] QueryGroupBlacklistedUsersIdsRequest groupId
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryGroupBlacklistedUsersIdsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryGroupBlacklistedUsersIdsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryGroupBlacklistedUsersIdsRequest.
                 * @implements IQueryGroupBlacklistedUsersIdsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryGroupBlacklistedUsersIdsRequest=} [properties] Properties to set
                 */
                function QueryGroupBlacklistedUsersIdsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryGroupBlacklistedUsersIdsRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.QueryGroupBlacklistedUsersIdsRequest
                 * @instance
                 */
                QueryGroupBlacklistedUsersIdsRequest.prototype.groupId = "0";

                /**
                 * QueryGroupBlacklistedUsersIdsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryGroupBlacklistedUsersIdsRequest
                 * @instance
                 */
                QueryGroupBlacklistedUsersIdsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryGroupBlacklistedUsersIdsRequest message. Does not implicitly {@link im.turms.proto.QueryGroupBlacklistedUsersIdsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryGroupBlacklistedUsersIdsRequest
                 * @static
                 * @param {im.turms.proto.IQueryGroupBlacklistedUsersIdsRequest} message QueryGroupBlacklistedUsersIdsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGroupBlacklistedUsersIdsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryGroupBlacklistedUsersIdsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryGroupBlacklistedUsersIdsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryGroupBlacklistedUsersIdsRequest} QueryGroupBlacklistedUsersIdsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGroupBlacklistedUsersIdsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryGroupBlacklistedUsersIdsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryGroupBlacklistedUsersIdsRequest;
            })();

            proto.QueryGroupBlacklistedUsersInfosRequest = (function() {

                /**
                 * Properties of a QueryGroupBlacklistedUsersInfosRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryGroupBlacklistedUsersInfosRequest
                 * @property {string|null} [groupId] QueryGroupBlacklistedUsersInfosRequest groupId
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryGroupBlacklistedUsersInfosRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryGroupBlacklistedUsersInfosRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryGroupBlacklistedUsersInfosRequest.
                 * @implements IQueryGroupBlacklistedUsersInfosRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryGroupBlacklistedUsersInfosRequest=} [properties] Properties to set
                 */
                function QueryGroupBlacklistedUsersInfosRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryGroupBlacklistedUsersInfosRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.QueryGroupBlacklistedUsersInfosRequest
                 * @instance
                 */
                QueryGroupBlacklistedUsersInfosRequest.prototype.groupId = "0";

                /**
                 * QueryGroupBlacklistedUsersInfosRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryGroupBlacklistedUsersInfosRequest
                 * @instance
                 */
                QueryGroupBlacklistedUsersInfosRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryGroupBlacklistedUsersInfosRequest message. Does not implicitly {@link im.turms.proto.QueryGroupBlacklistedUsersInfosRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryGroupBlacklistedUsersInfosRequest
                 * @static
                 * @param {im.turms.proto.IQueryGroupBlacklistedUsersInfosRequest} message QueryGroupBlacklistedUsersInfosRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGroupBlacklistedUsersInfosRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryGroupBlacklistedUsersInfosRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryGroupBlacklistedUsersInfosRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryGroupBlacklistedUsersInfosRequest} QueryGroupBlacklistedUsersInfosRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGroupBlacklistedUsersInfosRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryGroupBlacklistedUsersInfosRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryGroupBlacklistedUsersInfosRequest;
            })();

            proto.CreateGroupRequest = (function() {

                /**
                 * Properties of a CreateGroupRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateGroupRequest
                 * @property {string|null} [name] CreateGroupRequest name
                 * @property {google.protobuf.IStringValue|null} [intro] CreateGroupRequest intro
                 * @property {google.protobuf.IStringValue|null} [announcement] CreateGroupRequest announcement
                 * @property {google.protobuf.IStringValue|null} [profilePictureUrl] CreateGroupRequest profilePictureUrl
                 * @property {google.protobuf.IInt32Value|null} [minimumScore] CreateGroupRequest minimumScore
                 * @property {google.protobuf.IInt64Value|null} [groupTypeId] CreateGroupRequest groupTypeId
                 * @property {google.protobuf.IInt64Value|null} [muteEndDate] CreateGroupRequest muteEndDate
                 */

                /**
                 * Constructs a new CreateGroupRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateGroupRequest.
                 * @implements ICreateGroupRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateGroupRequest=} [properties] Properties to set
                 */
                function CreateGroupRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateGroupRequest name.
                 * @member {string} name
                 * @memberof im.turms.proto.CreateGroupRequest
                 * @instance
                 */
                CreateGroupRequest.prototype.name = "";

                /**
                 * CreateGroupRequest intro.
                 * @member {google.protobuf.IStringValue|null|undefined} intro
                 * @memberof im.turms.proto.CreateGroupRequest
                 * @instance
                 */
                CreateGroupRequest.prototype.intro = null;

                /**
                 * CreateGroupRequest announcement.
                 * @member {google.protobuf.IStringValue|null|undefined} announcement
                 * @memberof im.turms.proto.CreateGroupRequest
                 * @instance
                 */
                CreateGroupRequest.prototype.announcement = null;

                /**
                 * CreateGroupRequest profilePictureUrl.
                 * @member {google.protobuf.IStringValue|null|undefined} profilePictureUrl
                 * @memberof im.turms.proto.CreateGroupRequest
                 * @instance
                 */
                CreateGroupRequest.prototype.profilePictureUrl = null;

                /**
                 * CreateGroupRequest minimumScore.
                 * @member {google.protobuf.IInt32Value|null|undefined} minimumScore
                 * @memberof im.turms.proto.CreateGroupRequest
                 * @instance
                 */
                CreateGroupRequest.prototype.minimumScore = null;

                /**
                 * CreateGroupRequest groupTypeId.
                 * @member {google.protobuf.IInt64Value|null|undefined} groupTypeId
                 * @memberof im.turms.proto.CreateGroupRequest
                 * @instance
                 */
                CreateGroupRequest.prototype.groupTypeId = null;

                /**
                 * CreateGroupRequest muteEndDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} muteEndDate
                 * @memberof im.turms.proto.CreateGroupRequest
                 * @instance
                 */
                CreateGroupRequest.prototype.muteEndDate = null;

                /**
                 * Encodes the specified CreateGroupRequest message. Does not implicitly {@link im.turms.proto.CreateGroupRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateGroupRequest
                 * @static
                 * @param {im.turms.proto.ICreateGroupRequest} message CreateGroupRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateGroupRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.intro != null && Object.hasOwnProperty.call(message, "intro"))
                        $root.google.protobuf.StringValue.encode(message.intro, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.announcement != null && Object.hasOwnProperty.call(message, "announcement"))
                        $root.google.protobuf.StringValue.encode(message.announcement, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.profilePictureUrl != null && Object.hasOwnProperty.call(message, "profilePictureUrl"))
                        $root.google.protobuf.StringValue.encode(message.profilePictureUrl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.minimumScore != null && Object.hasOwnProperty.call(message, "minimumScore"))
                        $root.google.protobuf.Int32Value.encode(message.minimumScore, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.groupTypeId != null && Object.hasOwnProperty.call(message, "groupTypeId"))
                        $root.google.protobuf.Int64Value.encode(message.groupTypeId, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.muteEndDate != null && Object.hasOwnProperty.call(message, "muteEndDate"))
                        $root.google.protobuf.Int64Value.encode(message.muteEndDate, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a CreateGroupRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateGroupRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateGroupRequest} CreateGroupRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateGroupRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateGroupRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.intro = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.announcement = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.profilePictureUrl = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.minimumScore = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.groupTypeId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.muteEndDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateGroupRequest;
            })();

            proto.DeleteGroupRequest = (function() {

                /**
                 * Properties of a DeleteGroupRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteGroupRequest
                 * @property {string|null} [groupId] DeleteGroupRequest groupId
                 */

                /**
                 * Constructs a new DeleteGroupRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteGroupRequest.
                 * @implements IDeleteGroupRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteGroupRequest=} [properties] Properties to set
                 */
                function DeleteGroupRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteGroupRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.DeleteGroupRequest
                 * @instance
                 */
                DeleteGroupRequest.prototype.groupId = "0";

                /**
                 * Encodes the specified DeleteGroupRequest message. Does not implicitly {@link im.turms.proto.DeleteGroupRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteGroupRequest
                 * @static
                 * @param {im.turms.proto.IDeleteGroupRequest} message DeleteGroupRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteGroupRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    return writer;
                };

                /**
                 * Decodes a DeleteGroupRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteGroupRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteGroupRequest} DeleteGroupRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteGroupRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteGroupRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteGroupRequest;
            })();

            proto.CheckGroupJoinQuestionsAnswersRequest = (function() {

                /**
                 * Properties of a CheckGroupJoinQuestionsAnswersRequest.
                 * @memberof im.turms.proto
                 * @interface ICheckGroupJoinQuestionsAnswersRequest
                 * @property {Object.<string,string>|null} [questionIdAndAnswer] CheckGroupJoinQuestionsAnswersRequest questionIdAndAnswer
                 */

                /**
                 * Constructs a new CheckGroupJoinQuestionsAnswersRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CheckGroupJoinQuestionsAnswersRequest.
                 * @implements ICheckGroupJoinQuestionsAnswersRequest
                 * @constructor
                 * @param {im.turms.proto.ICheckGroupJoinQuestionsAnswersRequest=} [properties] Properties to set
                 */
                function CheckGroupJoinQuestionsAnswersRequest(properties) {
                    this.questionIdAndAnswer = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CheckGroupJoinQuestionsAnswersRequest questionIdAndAnswer.
                 * @member {Object.<string,string>} questionIdAndAnswer
                 * @memberof im.turms.proto.CheckGroupJoinQuestionsAnswersRequest
                 * @instance
                 */
                CheckGroupJoinQuestionsAnswersRequest.prototype.questionIdAndAnswer = $util.emptyObject;

                /**
                 * Encodes the specified CheckGroupJoinQuestionsAnswersRequest message. Does not implicitly {@link im.turms.proto.CheckGroupJoinQuestionsAnswersRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CheckGroupJoinQuestionsAnswersRequest
                 * @static
                 * @param {im.turms.proto.ICheckGroupJoinQuestionsAnswersRequest} message CheckGroupJoinQuestionsAnswersRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CheckGroupJoinQuestionsAnswersRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.questionIdAndAnswer != null && Object.hasOwnProperty.call(message, "questionIdAndAnswer"))
                        for (var keys = Object.keys(message.questionIdAndAnswer), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int64(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.questionIdAndAnswer[keys[i]]).ldelim();
                    return writer;
                };

                /**
                 * Decodes a CheckGroupJoinQuestionsAnswersRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CheckGroupJoinQuestionsAnswersRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CheckGroupJoinQuestionsAnswersRequest} CheckGroupJoinQuestionsAnswersRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CheckGroupJoinQuestionsAnswersRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CheckGroupJoinQuestionsAnswersRequest(), key;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            reader.skip().pos++;
                            if (message.questionIdAndAnswer === $util.emptyObject)
                                message.questionIdAndAnswer = {};
                            key = reader.int64();
                            reader.pos++;
                            message.questionIdAndAnswer[typeof key === "object" ? $util.longToHash(key) : key] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CheckGroupJoinQuestionsAnswersRequest;
            })();

            proto.CreateGroupInvitationRequest = (function() {

                /**
                 * Properties of a CreateGroupInvitationRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateGroupInvitationRequest
                 * @property {string|null} [groupId] CreateGroupInvitationRequest groupId
                 * @property {string|null} [inviteeId] CreateGroupInvitationRequest inviteeId
                 * @property {string|null} [content] CreateGroupInvitationRequest content
                 */

                /**
                 * Constructs a new CreateGroupInvitationRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateGroupInvitationRequest.
                 * @implements ICreateGroupInvitationRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateGroupInvitationRequest=} [properties] Properties to set
                 */
                function CreateGroupInvitationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateGroupInvitationRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.CreateGroupInvitationRequest
                 * @instance
                 */
                CreateGroupInvitationRequest.prototype.groupId = "0";

                /**
                 * CreateGroupInvitationRequest inviteeId.
                 * @member {string} inviteeId
                 * @memberof im.turms.proto.CreateGroupInvitationRequest
                 * @instance
                 */
                CreateGroupInvitationRequest.prototype.inviteeId = "0";

                /**
                 * CreateGroupInvitationRequest content.
                 * @member {string} content
                 * @memberof im.turms.proto.CreateGroupInvitationRequest
                 * @instance
                 */
                CreateGroupInvitationRequest.prototype.content = "";

                /**
                 * Encodes the specified CreateGroupInvitationRequest message. Does not implicitly {@link im.turms.proto.CreateGroupInvitationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateGroupInvitationRequest
                 * @static
                 * @param {im.turms.proto.ICreateGroupInvitationRequest} message CreateGroupInvitationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateGroupInvitationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.inviteeId != null && Object.hasOwnProperty.call(message, "inviteeId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.inviteeId);
                    if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);
                    return writer;
                };

                /**
                 * Decodes a CreateGroupInvitationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateGroupInvitationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateGroupInvitationRequest} CreateGroupInvitationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateGroupInvitationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateGroupInvitationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.inviteeId = reader.int64().toString();
                            break;
                        case 3:
                            message.content = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateGroupInvitationRequest;
            })();

            proto.CreateGroupJoinQuestionRequest = (function() {

                /**
                 * Properties of a CreateGroupJoinQuestionRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateGroupJoinQuestionRequest
                 * @property {string|null} [groupId] CreateGroupJoinQuestionRequest groupId
                 * @property {string|null} [question] CreateGroupJoinQuestionRequest question
                 * @property {Array.<string>|null} [answers] CreateGroupJoinQuestionRequest answers
                 * @property {number|null} [score] CreateGroupJoinQuestionRequest score
                 */

                /**
                 * Constructs a new CreateGroupJoinQuestionRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateGroupJoinQuestionRequest.
                 * @implements ICreateGroupJoinQuestionRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateGroupJoinQuestionRequest=} [properties] Properties to set
                 */
                function CreateGroupJoinQuestionRequest(properties) {
                    this.answers = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateGroupJoinQuestionRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.CreateGroupJoinQuestionRequest
                 * @instance
                 */
                CreateGroupJoinQuestionRequest.prototype.groupId = "0";

                /**
                 * CreateGroupJoinQuestionRequest question.
                 * @member {string} question
                 * @memberof im.turms.proto.CreateGroupJoinQuestionRequest
                 * @instance
                 */
                CreateGroupJoinQuestionRequest.prototype.question = "";

                /**
                 * CreateGroupJoinQuestionRequest answers.
                 * @member {Array.<string>} answers
                 * @memberof im.turms.proto.CreateGroupJoinQuestionRequest
                 * @instance
                 */
                CreateGroupJoinQuestionRequest.prototype.answers = $util.emptyArray;

                /**
                 * CreateGroupJoinQuestionRequest score.
                 * @member {number} score
                 * @memberof im.turms.proto.CreateGroupJoinQuestionRequest
                 * @instance
                 */
                CreateGroupJoinQuestionRequest.prototype.score = 0;

                /**
                 * Encodes the specified CreateGroupJoinQuestionRequest message. Does not implicitly {@link im.turms.proto.CreateGroupJoinQuestionRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateGroupJoinQuestionRequest
                 * @static
                 * @param {im.turms.proto.ICreateGroupJoinQuestionRequest} message CreateGroupJoinQuestionRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateGroupJoinQuestionRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.question != null && Object.hasOwnProperty.call(message, "question"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.question);
                    if (message.answers != null && message.answers.length)
                        for (var i = 0; i < message.answers.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.answers[i]);
                    if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.score);
                    return writer;
                };

                /**
                 * Decodes a CreateGroupJoinQuestionRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateGroupJoinQuestionRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateGroupJoinQuestionRequest} CreateGroupJoinQuestionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateGroupJoinQuestionRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateGroupJoinQuestionRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.question = reader.string();
                            break;
                        case 3:
                            if (!(message.answers && message.answers.length))
                                message.answers = [];
                            message.answers.push(reader.string());
                            break;
                        case 4:
                            message.score = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateGroupJoinQuestionRequest;
            })();

            proto.CreateGroupJoinRequestRequest = (function() {

                /**
                 * Properties of a CreateGroupJoinRequestRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateGroupJoinRequestRequest
                 * @property {string|null} [groupId] CreateGroupJoinRequestRequest groupId
                 * @property {string|null} [content] CreateGroupJoinRequestRequest content
                 */

                /**
                 * Constructs a new CreateGroupJoinRequestRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateGroupJoinRequestRequest.
                 * @implements ICreateGroupJoinRequestRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateGroupJoinRequestRequest=} [properties] Properties to set
                 */
                function CreateGroupJoinRequestRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateGroupJoinRequestRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.CreateGroupJoinRequestRequest
                 * @instance
                 */
                CreateGroupJoinRequestRequest.prototype.groupId = "0";

                /**
                 * CreateGroupJoinRequestRequest content.
                 * @member {string} content
                 * @memberof im.turms.proto.CreateGroupJoinRequestRequest
                 * @instance
                 */
                CreateGroupJoinRequestRequest.prototype.content = "";

                /**
                 * Encodes the specified CreateGroupJoinRequestRequest message. Does not implicitly {@link im.turms.proto.CreateGroupJoinRequestRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateGroupJoinRequestRequest
                 * @static
                 * @param {im.turms.proto.ICreateGroupJoinRequestRequest} message CreateGroupJoinRequestRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateGroupJoinRequestRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
                    return writer;
                };

                /**
                 * Decodes a CreateGroupJoinRequestRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateGroupJoinRequestRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateGroupJoinRequestRequest} CreateGroupJoinRequestRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateGroupJoinRequestRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateGroupJoinRequestRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.content = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateGroupJoinRequestRequest;
            })();

            proto.DeleteGroupInvitationRequest = (function() {

                /**
                 * Properties of a DeleteGroupInvitationRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteGroupInvitationRequest
                 * @property {string|null} [invitationId] DeleteGroupInvitationRequest invitationId
                 */

                /**
                 * Constructs a new DeleteGroupInvitationRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteGroupInvitationRequest.
                 * @implements IDeleteGroupInvitationRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteGroupInvitationRequest=} [properties] Properties to set
                 */
                function DeleteGroupInvitationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteGroupInvitationRequest invitationId.
                 * @member {string} invitationId
                 * @memberof im.turms.proto.DeleteGroupInvitationRequest
                 * @instance
                 */
                DeleteGroupInvitationRequest.prototype.invitationId = "0";

                /**
                 * Encodes the specified DeleteGroupInvitationRequest message. Does not implicitly {@link im.turms.proto.DeleteGroupInvitationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteGroupInvitationRequest
                 * @static
                 * @param {im.turms.proto.IDeleteGroupInvitationRequest} message DeleteGroupInvitationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteGroupInvitationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.invitationId != null && Object.hasOwnProperty.call(message, "invitationId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.invitationId);
                    return writer;
                };

                /**
                 * Decodes a DeleteGroupInvitationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteGroupInvitationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteGroupInvitationRequest} DeleteGroupInvitationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteGroupInvitationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteGroupInvitationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.invitationId = reader.int64().toString();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteGroupInvitationRequest;
            })();

            proto.DeleteGroupJoinQuestionRequest = (function() {

                /**
                 * Properties of a DeleteGroupJoinQuestionRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteGroupJoinQuestionRequest
                 * @property {string|null} [questionId] DeleteGroupJoinQuestionRequest questionId
                 */

                /**
                 * Constructs a new DeleteGroupJoinQuestionRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteGroupJoinQuestionRequest.
                 * @implements IDeleteGroupJoinQuestionRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteGroupJoinQuestionRequest=} [properties] Properties to set
                 */
                function DeleteGroupJoinQuestionRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteGroupJoinQuestionRequest questionId.
                 * @member {string} questionId
                 * @memberof im.turms.proto.DeleteGroupJoinQuestionRequest
                 * @instance
                 */
                DeleteGroupJoinQuestionRequest.prototype.questionId = "0";

                /**
                 * Encodes the specified DeleteGroupJoinQuestionRequest message. Does not implicitly {@link im.turms.proto.DeleteGroupJoinQuestionRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteGroupJoinQuestionRequest
                 * @static
                 * @param {im.turms.proto.IDeleteGroupJoinQuestionRequest} message DeleteGroupJoinQuestionRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteGroupJoinQuestionRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.questionId != null && Object.hasOwnProperty.call(message, "questionId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.questionId);
                    return writer;
                };

                /**
                 * Decodes a DeleteGroupJoinQuestionRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteGroupJoinQuestionRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteGroupJoinQuestionRequest} DeleteGroupJoinQuestionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteGroupJoinQuestionRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteGroupJoinQuestionRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.questionId = reader.int64().toString();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteGroupJoinQuestionRequest;
            })();

            proto.DeleteGroupJoinRequestRequest = (function() {

                /**
                 * Properties of a DeleteGroupJoinRequestRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteGroupJoinRequestRequest
                 * @property {string|null} [requestId] DeleteGroupJoinRequestRequest requestId
                 */

                /**
                 * Constructs a new DeleteGroupJoinRequestRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteGroupJoinRequestRequest.
                 * @implements IDeleteGroupJoinRequestRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteGroupJoinRequestRequest=} [properties] Properties to set
                 */
                function DeleteGroupJoinRequestRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteGroupJoinRequestRequest requestId.
                 * @member {string} requestId
                 * @memberof im.turms.proto.DeleteGroupJoinRequestRequest
                 * @instance
                 */
                DeleteGroupJoinRequestRequest.prototype.requestId = "0";

                /**
                 * Encodes the specified DeleteGroupJoinRequestRequest message. Does not implicitly {@link im.turms.proto.DeleteGroupJoinRequestRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteGroupJoinRequestRequest
                 * @static
                 * @param {im.turms.proto.IDeleteGroupJoinRequestRequest} message DeleteGroupJoinRequestRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteGroupJoinRequestRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.requestId);
                    return writer;
                };

                /**
                 * Decodes a DeleteGroupJoinRequestRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteGroupJoinRequestRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteGroupJoinRequestRequest} DeleteGroupJoinRequestRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteGroupJoinRequestRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteGroupJoinRequestRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.requestId = reader.int64().toString();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteGroupJoinRequestRequest;
            })();

            proto.QueryGroupInvitationsRequest = (function() {

                /**
                 * Properties of a QueryGroupInvitationsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryGroupInvitationsRequest
                 * @property {string|null} [groupId] QueryGroupInvitationsRequest groupId
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryGroupInvitationsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryGroupInvitationsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryGroupInvitationsRequest.
                 * @implements IQueryGroupInvitationsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryGroupInvitationsRequest=} [properties] Properties to set
                 */
                function QueryGroupInvitationsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryGroupInvitationsRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.QueryGroupInvitationsRequest
                 * @instance
                 */
                QueryGroupInvitationsRequest.prototype.groupId = "0";

                /**
                 * QueryGroupInvitationsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryGroupInvitationsRequest
                 * @instance
                 */
                QueryGroupInvitationsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryGroupInvitationsRequest message. Does not implicitly {@link im.turms.proto.QueryGroupInvitationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryGroupInvitationsRequest
                 * @static
                 * @param {im.turms.proto.IQueryGroupInvitationsRequest} message QueryGroupInvitationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGroupInvitationsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryGroupInvitationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryGroupInvitationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryGroupInvitationsRequest} QueryGroupInvitationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGroupInvitationsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryGroupInvitationsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryGroupInvitationsRequest;
            })();

            proto.QueryGroupJoinQuestionsRequest = (function() {

                /**
                 * Properties of a QueryGroupJoinQuestionsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryGroupJoinQuestionsRequest
                 * @property {string|null} [groupId] QueryGroupJoinQuestionsRequest groupId
                 * @property {boolean|null} [withAnswers] QueryGroupJoinQuestionsRequest withAnswers
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryGroupJoinQuestionsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryGroupJoinQuestionsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryGroupJoinQuestionsRequest.
                 * @implements IQueryGroupJoinQuestionsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryGroupJoinQuestionsRequest=} [properties] Properties to set
                 */
                function QueryGroupJoinQuestionsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryGroupJoinQuestionsRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.QueryGroupJoinQuestionsRequest
                 * @instance
                 */
                QueryGroupJoinQuestionsRequest.prototype.groupId = "0";

                /**
                 * QueryGroupJoinQuestionsRequest withAnswers.
                 * @member {boolean} withAnswers
                 * @memberof im.turms.proto.QueryGroupJoinQuestionsRequest
                 * @instance
                 */
                QueryGroupJoinQuestionsRequest.prototype.withAnswers = false;

                /**
                 * QueryGroupJoinQuestionsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryGroupJoinQuestionsRequest
                 * @instance
                 */
                QueryGroupJoinQuestionsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryGroupJoinQuestionsRequest message. Does not implicitly {@link im.turms.proto.QueryGroupJoinQuestionsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryGroupJoinQuestionsRequest
                 * @static
                 * @param {im.turms.proto.IQueryGroupJoinQuestionsRequest} message QueryGroupJoinQuestionsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGroupJoinQuestionsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.withAnswers != null && Object.hasOwnProperty.call(message, "withAnswers"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.withAnswers);
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryGroupJoinQuestionsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryGroupJoinQuestionsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryGroupJoinQuestionsRequest} QueryGroupJoinQuestionsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGroupJoinQuestionsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryGroupJoinQuestionsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.withAnswers = reader.bool();
                            break;
                        case 3:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryGroupJoinQuestionsRequest;
            })();

            proto.QueryGroupJoinRequestsRequest = (function() {

                /**
                 * Properties of a QueryGroupJoinRequestsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryGroupJoinRequestsRequest
                 * @property {string|null} [groupId] QueryGroupJoinRequestsRequest groupId
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryGroupJoinRequestsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryGroupJoinRequestsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryGroupJoinRequestsRequest.
                 * @implements IQueryGroupJoinRequestsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryGroupJoinRequestsRequest=} [properties] Properties to set
                 */
                function QueryGroupJoinRequestsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryGroupJoinRequestsRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.QueryGroupJoinRequestsRequest
                 * @instance
                 */
                QueryGroupJoinRequestsRequest.prototype.groupId = "0";

                /**
                 * QueryGroupJoinRequestsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryGroupJoinRequestsRequest
                 * @instance
                 */
                QueryGroupJoinRequestsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryGroupJoinRequestsRequest message. Does not implicitly {@link im.turms.proto.QueryGroupJoinRequestsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryGroupJoinRequestsRequest
                 * @static
                 * @param {im.turms.proto.IQueryGroupJoinRequestsRequest} message QueryGroupJoinRequestsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGroupJoinRequestsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryGroupJoinRequestsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryGroupJoinRequestsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryGroupJoinRequestsRequest} QueryGroupJoinRequestsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGroupJoinRequestsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryGroupJoinRequestsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryGroupJoinRequestsRequest;
            })();

            proto.UpdateGroupJoinQuestionRequest = (function() {

                /**
                 * Properties of an UpdateGroupJoinQuestionRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateGroupJoinQuestionRequest
                 * @property {string|null} [questionId] UpdateGroupJoinQuestionRequest questionId
                 * @property {google.protobuf.IStringValue|null} [question] UpdateGroupJoinQuestionRequest question
                 * @property {Array.<string>|null} [answers] UpdateGroupJoinQuestionRequest answers
                 * @property {google.protobuf.IInt32Value|null} [score] UpdateGroupJoinQuestionRequest score
                 */

                /**
                 * Constructs a new UpdateGroupJoinQuestionRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateGroupJoinQuestionRequest.
                 * @implements IUpdateGroupJoinQuestionRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateGroupJoinQuestionRequest=} [properties] Properties to set
                 */
                function UpdateGroupJoinQuestionRequest(properties) {
                    this.answers = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateGroupJoinQuestionRequest questionId.
                 * @member {string} questionId
                 * @memberof im.turms.proto.UpdateGroupJoinQuestionRequest
                 * @instance
                 */
                UpdateGroupJoinQuestionRequest.prototype.questionId = "0";

                /**
                 * UpdateGroupJoinQuestionRequest question.
                 * @member {google.protobuf.IStringValue|null|undefined} question
                 * @memberof im.turms.proto.UpdateGroupJoinQuestionRequest
                 * @instance
                 */
                UpdateGroupJoinQuestionRequest.prototype.question = null;

                /**
                 * UpdateGroupJoinQuestionRequest answers.
                 * @member {Array.<string>} answers
                 * @memberof im.turms.proto.UpdateGroupJoinQuestionRequest
                 * @instance
                 */
                UpdateGroupJoinQuestionRequest.prototype.answers = $util.emptyArray;

                /**
                 * UpdateGroupJoinQuestionRequest score.
                 * @member {google.protobuf.IInt32Value|null|undefined} score
                 * @memberof im.turms.proto.UpdateGroupJoinQuestionRequest
                 * @instance
                 */
                UpdateGroupJoinQuestionRequest.prototype.score = null;

                /**
                 * Encodes the specified UpdateGroupJoinQuestionRequest message. Does not implicitly {@link im.turms.proto.UpdateGroupJoinQuestionRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateGroupJoinQuestionRequest
                 * @static
                 * @param {im.turms.proto.IUpdateGroupJoinQuestionRequest} message UpdateGroupJoinQuestionRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateGroupJoinQuestionRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.questionId != null && Object.hasOwnProperty.call(message, "questionId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.questionId);
                    if (message.question != null && Object.hasOwnProperty.call(message, "question"))
                        $root.google.protobuf.StringValue.encode(message.question, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.answers != null && message.answers.length)
                        for (var i = 0; i < message.answers.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.answers[i]);
                    if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                        $root.google.protobuf.Int32Value.encode(message.score, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an UpdateGroupJoinQuestionRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateGroupJoinQuestionRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateGroupJoinQuestionRequest} UpdateGroupJoinQuestionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateGroupJoinQuestionRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateGroupJoinQuestionRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.questionId = reader.int64().toString();
                            break;
                        case 2:
                            message.question = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            if (!(message.answers && message.answers.length))
                                message.answers = [];
                            message.answers.push(reader.string());
                            break;
                        case 4:
                            message.score = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateGroupJoinQuestionRequest;
            })();

            proto.CreateGroupMemberRequest = (function() {

                /**
                 * Properties of a CreateGroupMemberRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateGroupMemberRequest
                 * @property {string|null} [groupId] CreateGroupMemberRequest groupId
                 * @property {string|null} [userId] CreateGroupMemberRequest userId
                 * @property {google.protobuf.IStringValue|null} [name] CreateGroupMemberRequest name
                 * @property {im.turms.proto.GroupMemberRole|null} [role] CreateGroupMemberRequest role
                 * @property {google.protobuf.IInt64Value|null} [muteEndDate] CreateGroupMemberRequest muteEndDate
                 */

                /**
                 * Constructs a new CreateGroupMemberRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateGroupMemberRequest.
                 * @implements ICreateGroupMemberRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateGroupMemberRequest=} [properties] Properties to set
                 */
                function CreateGroupMemberRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateGroupMemberRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.CreateGroupMemberRequest
                 * @instance
                 */
                CreateGroupMemberRequest.prototype.groupId = "0";

                /**
                 * CreateGroupMemberRequest userId.
                 * @member {string} userId
                 * @memberof im.turms.proto.CreateGroupMemberRequest
                 * @instance
                 */
                CreateGroupMemberRequest.prototype.userId = "0";

                /**
                 * CreateGroupMemberRequest name.
                 * @member {google.protobuf.IStringValue|null|undefined} name
                 * @memberof im.turms.proto.CreateGroupMemberRequest
                 * @instance
                 */
                CreateGroupMemberRequest.prototype.name = null;

                /**
                 * CreateGroupMemberRequest role.
                 * @member {im.turms.proto.GroupMemberRole} role
                 * @memberof im.turms.proto.CreateGroupMemberRequest
                 * @instance
                 */
                CreateGroupMemberRequest.prototype.role = 0;

                /**
                 * CreateGroupMemberRequest muteEndDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} muteEndDate
                 * @memberof im.turms.proto.CreateGroupMemberRequest
                 * @instance
                 */
                CreateGroupMemberRequest.prototype.muteEndDate = null;

                /**
                 * Encodes the specified CreateGroupMemberRequest message. Does not implicitly {@link im.turms.proto.CreateGroupMemberRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateGroupMemberRequest
                 * @static
                 * @param {im.turms.proto.ICreateGroupMemberRequest} message CreateGroupMemberRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateGroupMemberRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.role);
                    if (message.muteEndDate != null && Object.hasOwnProperty.call(message, "muteEndDate"))
                        $root.google.protobuf.Int64Value.encode(message.muteEndDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a CreateGroupMemberRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateGroupMemberRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateGroupMemberRequest} CreateGroupMemberRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateGroupMemberRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateGroupMemberRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.userId = reader.int64().toString();
                            break;
                        case 3:
                            message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.role = reader.int32();
                            break;
                        case 5:
                            message.muteEndDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateGroupMemberRequest;
            })();

            proto.DeleteGroupMemberRequest = (function() {

                /**
                 * Properties of a DeleteGroupMemberRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteGroupMemberRequest
                 * @property {string|null} [groupId] DeleteGroupMemberRequest groupId
                 * @property {string|null} [groupMemberId] DeleteGroupMemberRequest groupMemberId
                 * @property {google.protobuf.IInt64Value|null} [successorId] DeleteGroupMemberRequest successorId
                 * @property {google.protobuf.IBoolValue|null} [quitAfterTransfer] DeleteGroupMemberRequest quitAfterTransfer
                 */

                /**
                 * Constructs a new DeleteGroupMemberRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteGroupMemberRequest.
                 * @implements IDeleteGroupMemberRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteGroupMemberRequest=} [properties] Properties to set
                 */
                function DeleteGroupMemberRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteGroupMemberRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.DeleteGroupMemberRequest
                 * @instance
                 */
                DeleteGroupMemberRequest.prototype.groupId = "0";

                /**
                 * DeleteGroupMemberRequest groupMemberId.
                 * @member {string} groupMemberId
                 * @memberof im.turms.proto.DeleteGroupMemberRequest
                 * @instance
                 */
                DeleteGroupMemberRequest.prototype.groupMemberId = "0";

                /**
                 * DeleteGroupMemberRequest successorId.
                 * @member {google.protobuf.IInt64Value|null|undefined} successorId
                 * @memberof im.turms.proto.DeleteGroupMemberRequest
                 * @instance
                 */
                DeleteGroupMemberRequest.prototype.successorId = null;

                /**
                 * DeleteGroupMemberRequest quitAfterTransfer.
                 * @member {google.protobuf.IBoolValue|null|undefined} quitAfterTransfer
                 * @memberof im.turms.proto.DeleteGroupMemberRequest
                 * @instance
                 */
                DeleteGroupMemberRequest.prototype.quitAfterTransfer = null;

                /**
                 * Encodes the specified DeleteGroupMemberRequest message. Does not implicitly {@link im.turms.proto.DeleteGroupMemberRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteGroupMemberRequest
                 * @static
                 * @param {im.turms.proto.IDeleteGroupMemberRequest} message DeleteGroupMemberRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteGroupMemberRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.groupMemberId != null && Object.hasOwnProperty.call(message, "groupMemberId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.groupMemberId);
                    if (message.successorId != null && Object.hasOwnProperty.call(message, "successorId"))
                        $root.google.protobuf.Int64Value.encode(message.successorId, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.quitAfterTransfer != null && Object.hasOwnProperty.call(message, "quitAfterTransfer"))
                        $root.google.protobuf.BoolValue.encode(message.quitAfterTransfer, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a DeleteGroupMemberRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteGroupMemberRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteGroupMemberRequest} DeleteGroupMemberRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteGroupMemberRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteGroupMemberRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.groupMemberId = reader.int64().toString();
                            break;
                        case 3:
                            message.successorId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.quitAfterTransfer = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteGroupMemberRequest;
            })();

            proto.QueryGroupMembersRequest = (function() {

                /**
                 * Properties of a QueryGroupMembersRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryGroupMembersRequest
                 * @property {string|null} [groupId] QueryGroupMembersRequest groupId
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryGroupMembersRequest lastUpdatedDate
                 * @property {Array.<string>|null} [groupMembersIds] QueryGroupMembersRequest groupMembersIds
                 * @property {google.protobuf.IBoolValue|null} [withStatus] QueryGroupMembersRequest withStatus
                 */

                /**
                 * Constructs a new QueryGroupMembersRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryGroupMembersRequest.
                 * @implements IQueryGroupMembersRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryGroupMembersRequest=} [properties] Properties to set
                 */
                function QueryGroupMembersRequest(properties) {
                    this.groupMembersIds = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryGroupMembersRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.QueryGroupMembersRequest
                 * @instance
                 */
                QueryGroupMembersRequest.prototype.groupId = "0";

                /**
                 * QueryGroupMembersRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryGroupMembersRequest
                 * @instance
                 */
                QueryGroupMembersRequest.prototype.lastUpdatedDate = null;

                /**
                 * QueryGroupMembersRequest groupMembersIds.
                 * @member {Array.<string>} groupMembersIds
                 * @memberof im.turms.proto.QueryGroupMembersRequest
                 * @instance
                 */
                QueryGroupMembersRequest.prototype.groupMembersIds = $util.emptyArray;

                /**
                 * QueryGroupMembersRequest withStatus.
                 * @member {google.protobuf.IBoolValue|null|undefined} withStatus
                 * @memberof im.turms.proto.QueryGroupMembersRequest
                 * @instance
                 */
                QueryGroupMembersRequest.prototype.withStatus = null;

                /**
                 * Encodes the specified QueryGroupMembersRequest message. Does not implicitly {@link im.turms.proto.QueryGroupMembersRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryGroupMembersRequest
                 * @static
                 * @param {im.turms.proto.IQueryGroupMembersRequest} message QueryGroupMembersRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGroupMembersRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.groupMembersIds != null && message.groupMembersIds.length) {
                        writer.uint32(/* id 3, wireType 2 =*/26).fork();
                        for (var i = 0; i < message.groupMembersIds.length; ++i)
                            writer.int64(message.groupMembersIds[i]);
                        writer.ldelim();
                    }
                    if (message.withStatus != null && Object.hasOwnProperty.call(message, "withStatus"))
                        $root.google.protobuf.BoolValue.encode(message.withStatus, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryGroupMembersRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryGroupMembersRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryGroupMembersRequest} QueryGroupMembersRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGroupMembersRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryGroupMembersRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            if (!(message.groupMembersIds && message.groupMembersIds.length))
                                message.groupMembersIds = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.groupMembersIds.push(reader.int64().toString());
                            } else
                                message.groupMembersIds.push(reader.int64().toString());
                            break;
                        case 4:
                            message.withStatus = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryGroupMembersRequest;
            })();

            proto.UpdateGroupMemberRequest = (function() {

                /**
                 * Properties of an UpdateGroupMemberRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateGroupMemberRequest
                 * @property {string|null} [groupId] UpdateGroupMemberRequest groupId
                 * @property {string|null} [memberId] UpdateGroupMemberRequest memberId
                 * @property {google.protobuf.IStringValue|null} [name] UpdateGroupMemberRequest name
                 * @property {im.turms.proto.GroupMemberRole|null} [role] UpdateGroupMemberRequest role
                 * @property {google.protobuf.IInt64Value|null} [muteEndDate] UpdateGroupMemberRequest muteEndDate
                 */

                /**
                 * Constructs a new UpdateGroupMemberRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateGroupMemberRequest.
                 * @implements IUpdateGroupMemberRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateGroupMemberRequest=} [properties] Properties to set
                 */
                function UpdateGroupMemberRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateGroupMemberRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.UpdateGroupMemberRequest
                 * @instance
                 */
                UpdateGroupMemberRequest.prototype.groupId = "0";

                /**
                 * UpdateGroupMemberRequest memberId.
                 * @member {string} memberId
                 * @memberof im.turms.proto.UpdateGroupMemberRequest
                 * @instance
                 */
                UpdateGroupMemberRequest.prototype.memberId = "0";

                /**
                 * UpdateGroupMemberRequest name.
                 * @member {google.protobuf.IStringValue|null|undefined} name
                 * @memberof im.turms.proto.UpdateGroupMemberRequest
                 * @instance
                 */
                UpdateGroupMemberRequest.prototype.name = null;

                /**
                 * UpdateGroupMemberRequest role.
                 * @member {im.turms.proto.GroupMemberRole} role
                 * @memberof im.turms.proto.UpdateGroupMemberRequest
                 * @instance
                 */
                UpdateGroupMemberRequest.prototype.role = 0;

                /**
                 * UpdateGroupMemberRequest muteEndDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} muteEndDate
                 * @memberof im.turms.proto.UpdateGroupMemberRequest
                 * @instance
                 */
                UpdateGroupMemberRequest.prototype.muteEndDate = null;

                /**
                 * Encodes the specified UpdateGroupMemberRequest message. Does not implicitly {@link im.turms.proto.UpdateGroupMemberRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateGroupMemberRequest
                 * @static
                 * @param {im.turms.proto.IUpdateGroupMemberRequest} message UpdateGroupMemberRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateGroupMemberRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.memberId != null && Object.hasOwnProperty.call(message, "memberId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.memberId);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.role);
                    if (message.muteEndDate != null && Object.hasOwnProperty.call(message, "muteEndDate"))
                        $root.google.protobuf.Int64Value.encode(message.muteEndDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an UpdateGroupMemberRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateGroupMemberRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateGroupMemberRequest} UpdateGroupMemberRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateGroupMemberRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateGroupMemberRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.memberId = reader.int64().toString();
                            break;
                        case 3:
                            message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.role = reader.int32();
                            break;
                        case 5:
                            message.muteEndDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateGroupMemberRequest;
            })();

            proto.QueryGroupRequest = (function() {

                /**
                 * Properties of a QueryGroupRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryGroupRequest
                 * @property {string|null} [groupId] QueryGroupRequest groupId
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryGroupRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryGroupRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryGroupRequest.
                 * @implements IQueryGroupRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryGroupRequest=} [properties] Properties to set
                 */
                function QueryGroupRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryGroupRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.QueryGroupRequest
                 * @instance
                 */
                QueryGroupRequest.prototype.groupId = "0";

                /**
                 * QueryGroupRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryGroupRequest
                 * @instance
                 */
                QueryGroupRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryGroupRequest message. Does not implicitly {@link im.turms.proto.QueryGroupRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryGroupRequest
                 * @static
                 * @param {im.turms.proto.IQueryGroupRequest} message QueryGroupRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGroupRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryGroupRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryGroupRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryGroupRequest} QueryGroupRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGroupRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryGroupRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryGroupRequest;
            })();

            proto.QueryJoinedGroupsIdsRequest = (function() {

                /**
                 * Properties of a QueryJoinedGroupsIdsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryJoinedGroupsIdsRequest
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryJoinedGroupsIdsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryJoinedGroupsIdsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryJoinedGroupsIdsRequest.
                 * @implements IQueryJoinedGroupsIdsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryJoinedGroupsIdsRequest=} [properties] Properties to set
                 */
                function QueryJoinedGroupsIdsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryJoinedGroupsIdsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryJoinedGroupsIdsRequest
                 * @instance
                 */
                QueryJoinedGroupsIdsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryJoinedGroupsIdsRequest message. Does not implicitly {@link im.turms.proto.QueryJoinedGroupsIdsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryJoinedGroupsIdsRequest
                 * @static
                 * @param {im.turms.proto.IQueryJoinedGroupsIdsRequest} message QueryJoinedGroupsIdsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryJoinedGroupsIdsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryJoinedGroupsIdsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryJoinedGroupsIdsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryJoinedGroupsIdsRequest} QueryJoinedGroupsIdsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryJoinedGroupsIdsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryJoinedGroupsIdsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryJoinedGroupsIdsRequest;
            })();

            proto.QueryJoinedGroupsInfosRequest = (function() {

                /**
                 * Properties of a QueryJoinedGroupsInfosRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryJoinedGroupsInfosRequest
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryJoinedGroupsInfosRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryJoinedGroupsInfosRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryJoinedGroupsInfosRequest.
                 * @implements IQueryJoinedGroupsInfosRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryJoinedGroupsInfosRequest=} [properties] Properties to set
                 */
                function QueryJoinedGroupsInfosRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryJoinedGroupsInfosRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryJoinedGroupsInfosRequest
                 * @instance
                 */
                QueryJoinedGroupsInfosRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryJoinedGroupsInfosRequest message. Does not implicitly {@link im.turms.proto.QueryJoinedGroupsInfosRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryJoinedGroupsInfosRequest
                 * @static
                 * @param {im.turms.proto.IQueryJoinedGroupsInfosRequest} message QueryJoinedGroupsInfosRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryJoinedGroupsInfosRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryJoinedGroupsInfosRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryJoinedGroupsInfosRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryJoinedGroupsInfosRequest} QueryJoinedGroupsInfosRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryJoinedGroupsInfosRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryJoinedGroupsInfosRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryJoinedGroupsInfosRequest;
            })();

            proto.UpdateGroupRequest = (function() {

                /**
                 * Properties of an UpdateGroupRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateGroupRequest
                 * @property {string|null} [groupId] UpdateGroupRequest groupId
                 * @property {google.protobuf.IStringValue|null} [groupName] UpdateGroupRequest groupName
                 * @property {google.protobuf.IStringValue|null} [intro] UpdateGroupRequest intro
                 * @property {google.protobuf.IStringValue|null} [announcement] UpdateGroupRequest announcement
                 * @property {google.protobuf.IStringValue|null} [profilePictureUrl] UpdateGroupRequest profilePictureUrl
                 * @property {google.protobuf.IInt32Value|null} [minimumScore] UpdateGroupRequest minimumScore
                 * @property {google.protobuf.IInt64Value|null} [groupTypeId] UpdateGroupRequest groupTypeId
                 * @property {google.protobuf.IInt64Value|null} [muteEndDate] UpdateGroupRequest muteEndDate
                 * @property {google.protobuf.IInt64Value|null} [successorId] UpdateGroupRequest successorId
                 * @property {google.protobuf.IBoolValue|null} [quitAfterTransfer] UpdateGroupRequest quitAfterTransfer
                 */

                /**
                 * Constructs a new UpdateGroupRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateGroupRequest.
                 * @implements IUpdateGroupRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateGroupRequest=} [properties] Properties to set
                 */
                function UpdateGroupRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateGroupRequest groupId.
                 * @member {string} groupId
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.groupId = "0";

                /**
                 * UpdateGroupRequest groupName.
                 * @member {google.protobuf.IStringValue|null|undefined} groupName
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.groupName = null;

                /**
                 * UpdateGroupRequest intro.
                 * @member {google.protobuf.IStringValue|null|undefined} intro
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.intro = null;

                /**
                 * UpdateGroupRequest announcement.
                 * @member {google.protobuf.IStringValue|null|undefined} announcement
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.announcement = null;

                /**
                 * UpdateGroupRequest profilePictureUrl.
                 * @member {google.protobuf.IStringValue|null|undefined} profilePictureUrl
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.profilePictureUrl = null;

                /**
                 * UpdateGroupRequest minimumScore.
                 * @member {google.protobuf.IInt32Value|null|undefined} minimumScore
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.minimumScore = null;

                /**
                 * UpdateGroupRequest groupTypeId.
                 * @member {google.protobuf.IInt64Value|null|undefined} groupTypeId
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.groupTypeId = null;

                /**
                 * UpdateGroupRequest muteEndDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} muteEndDate
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.muteEndDate = null;

                /**
                 * UpdateGroupRequest successorId.
                 * @member {google.protobuf.IInt64Value|null|undefined} successorId
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.successorId = null;

                /**
                 * UpdateGroupRequest quitAfterTransfer.
                 * @member {google.protobuf.IBoolValue|null|undefined} quitAfterTransfer
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @instance
                 */
                UpdateGroupRequest.prototype.quitAfterTransfer = null;

                /**
                 * Encodes the specified UpdateGroupRequest message. Does not implicitly {@link im.turms.proto.UpdateGroupRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @static
                 * @param {im.turms.proto.IUpdateGroupRequest} message UpdateGroupRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateGroupRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.groupId);
                    if (message.groupName != null && Object.hasOwnProperty.call(message, "groupName"))
                        $root.google.protobuf.StringValue.encode(message.groupName, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.intro != null && Object.hasOwnProperty.call(message, "intro"))
                        $root.google.protobuf.StringValue.encode(message.intro, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.announcement != null && Object.hasOwnProperty.call(message, "announcement"))
                        $root.google.protobuf.StringValue.encode(message.announcement, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.profilePictureUrl != null && Object.hasOwnProperty.call(message, "profilePictureUrl"))
                        $root.google.protobuf.StringValue.encode(message.profilePictureUrl, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.minimumScore != null && Object.hasOwnProperty.call(message, "minimumScore"))
                        $root.google.protobuf.Int32Value.encode(message.minimumScore, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.groupTypeId != null && Object.hasOwnProperty.call(message, "groupTypeId"))
                        $root.google.protobuf.Int64Value.encode(message.groupTypeId, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.muteEndDate != null && Object.hasOwnProperty.call(message, "muteEndDate"))
                        $root.google.protobuf.Int64Value.encode(message.muteEndDate, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.successorId != null && Object.hasOwnProperty.call(message, "successorId"))
                        $root.google.protobuf.Int64Value.encode(message.successorId, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.quitAfterTransfer != null && Object.hasOwnProperty.call(message, "quitAfterTransfer"))
                        $root.google.protobuf.BoolValue.encode(message.quitAfterTransfer, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an UpdateGroupRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateGroupRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateGroupRequest} UpdateGroupRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateGroupRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateGroupRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupId = reader.int64().toString();
                            break;
                        case 2:
                            message.groupName = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.intro = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.announcement = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.profilePictureUrl = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.minimumScore = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.groupTypeId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.muteEndDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.successorId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.quitAfterTransfer = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateGroupRequest;
            })();

            proto.CreateMessageRequest = (function() {

                /**
                 * Properties of a CreateMessageRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateMessageRequest
                 * @property {google.protobuf.IInt64Value|null} [messageId] CreateMessageRequest messageId
                 * @property {im.turms.proto.ChatType|null} [chatType] CreateMessageRequest chatType
                 * @property {google.protobuf.IBoolValue|null} [isSystemMessage] CreateMessageRequest isSystemMessage
                 * @property {string|null} [toId] CreateMessageRequest toId
                 * @property {string|null} [deliveryDate] CreateMessageRequest deliveryDate
                 * @property {google.protobuf.IStringValue|null} [text] CreateMessageRequest text
                 * @property {Array.<Uint8Array>|null} [records] CreateMessageRequest records
                 * @property {google.protobuf.IInt32Value|null} [burnAfter] CreateMessageRequest burnAfter
                 */

                /**
                 * Constructs a new CreateMessageRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateMessageRequest.
                 * @implements ICreateMessageRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateMessageRequest=} [properties] Properties to set
                 */
                function CreateMessageRequest(properties) {
                    this.records = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateMessageRequest messageId.
                 * @member {google.protobuf.IInt64Value|null|undefined} messageId
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @instance
                 */
                CreateMessageRequest.prototype.messageId = null;

                /**
                 * CreateMessageRequest chatType.
                 * @member {im.turms.proto.ChatType} chatType
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @instance
                 */
                CreateMessageRequest.prototype.chatType = 0;

                /**
                 * CreateMessageRequest isSystemMessage.
                 * @member {google.protobuf.IBoolValue|null|undefined} isSystemMessage
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @instance
                 */
                CreateMessageRequest.prototype.isSystemMessage = null;

                /**
                 * CreateMessageRequest toId.
                 * @member {string} toId
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @instance
                 */
                CreateMessageRequest.prototype.toId = "0";

                /**
                 * CreateMessageRequest deliveryDate.
                 * @member {string} deliveryDate
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @instance
                 */
                CreateMessageRequest.prototype.deliveryDate = "0";

                /**
                 * CreateMessageRequest text.
                 * @member {google.protobuf.IStringValue|null|undefined} text
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @instance
                 */
                CreateMessageRequest.prototype.text = null;

                /**
                 * CreateMessageRequest records.
                 * @member {Array.<Uint8Array>} records
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @instance
                 */
                CreateMessageRequest.prototype.records = $util.emptyArray;

                /**
                 * CreateMessageRequest burnAfter.
                 * @member {google.protobuf.IInt32Value|null|undefined} burnAfter
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @instance
                 */
                CreateMessageRequest.prototype.burnAfter = null;

                /**
                 * Encodes the specified CreateMessageRequest message. Does not implicitly {@link im.turms.proto.CreateMessageRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @static
                 * @param {im.turms.proto.ICreateMessageRequest} message CreateMessageRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateMessageRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                        $root.google.protobuf.Int64Value.encode(message.messageId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.chatType != null && Object.hasOwnProperty.call(message, "chatType"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.chatType);
                    if (message.isSystemMessage != null && Object.hasOwnProperty.call(message, "isSystemMessage"))
                        $root.google.protobuf.BoolValue.encode(message.isSystemMessage, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.toId != null && Object.hasOwnProperty.call(message, "toId"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.toId);
                    if (message.deliveryDate != null && Object.hasOwnProperty.call(message, "deliveryDate"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.deliveryDate);
                    if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                        $root.google.protobuf.StringValue.encode(message.text, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.records != null && message.records.length)
                        for (var i = 0; i < message.records.length; ++i)
                            writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.records[i]);
                    if (message.burnAfter != null && Object.hasOwnProperty.call(message, "burnAfter"))
                        $root.google.protobuf.Int32Value.encode(message.burnAfter, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a CreateMessageRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateMessageRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateMessageRequest} CreateMessageRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateMessageRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateMessageRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.chatType = reader.int32();
                            break;
                        case 3:
                            message.isSystemMessage = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.toId = reader.int64().toString();
                            break;
                        case 5:
                            message.deliveryDate = reader.int64().toString();
                            break;
                        case 6:
                            message.text = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 7:
                            if (!(message.records && message.records.length))
                                message.records = [];
                            message.records.push(reader.bytes());
                            break;
                        case 8:
                            message.burnAfter = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateMessageRequest;
            })();

            proto.QueryMessageStatusesRequest = (function() {

                /**
                 * Properties of a QueryMessageStatusesRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryMessageStatusesRequest
                 * @property {string|null} [messageId] QueryMessageStatusesRequest messageId
                 */

                /**
                 * Constructs a new QueryMessageStatusesRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryMessageStatusesRequest.
                 * @implements IQueryMessageStatusesRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryMessageStatusesRequest=} [properties] Properties to set
                 */
                function QueryMessageStatusesRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryMessageStatusesRequest messageId.
                 * @member {string} messageId
                 * @memberof im.turms.proto.QueryMessageStatusesRequest
                 * @instance
                 */
                QueryMessageStatusesRequest.prototype.messageId = "0";

                /**
                 * Encodes the specified QueryMessageStatusesRequest message. Does not implicitly {@link im.turms.proto.QueryMessageStatusesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryMessageStatusesRequest
                 * @static
                 * @param {im.turms.proto.IQueryMessageStatusesRequest} message QueryMessageStatusesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryMessageStatusesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.messageId);
                    return writer;
                };

                /**
                 * Decodes a QueryMessageStatusesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryMessageStatusesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryMessageStatusesRequest} QueryMessageStatusesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryMessageStatusesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryMessageStatusesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageId = reader.int64().toString();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryMessageStatusesRequest;
            })();

            proto.QueryMessagesRequest = (function() {

                /**
                 * Properties of a QueryMessagesRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryMessagesRequest
                 * @property {Array.<string>|null} [ids] QueryMessagesRequest ids
                 * @property {google.protobuf.IInt32Value|null} [size] QueryMessagesRequest size
                 * @property {im.turms.proto.ChatType|null} [chatType] QueryMessagesRequest chatType
                 * @property {google.protobuf.IBoolValue|null} [areSystemMessages] QueryMessagesRequest areSystemMessages
                 * @property {google.protobuf.IInt64Value|null} [fromId] QueryMessagesRequest fromId
                 * @property {google.protobuf.IInt64Value|null} [deliveryDateAfter] QueryMessagesRequest deliveryDateAfter
                 * @property {google.protobuf.IInt64Value|null} [deliveryDateBefore] QueryMessagesRequest deliveryDateBefore
                 * @property {im.turms.proto.MessageDeliveryStatus|null} [deliveryStatus] QueryMessagesRequest deliveryStatus
                 */

                /**
                 * Constructs a new QueryMessagesRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryMessagesRequest.
                 * @implements IQueryMessagesRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryMessagesRequest=} [properties] Properties to set
                 */
                function QueryMessagesRequest(properties) {
                    this.ids = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryMessagesRequest ids.
                 * @member {Array.<string>} ids
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @instance
                 */
                QueryMessagesRequest.prototype.ids = $util.emptyArray;

                /**
                 * QueryMessagesRequest size.
                 * @member {google.protobuf.IInt32Value|null|undefined} size
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @instance
                 */
                QueryMessagesRequest.prototype.size = null;

                /**
                 * QueryMessagesRequest chatType.
                 * @member {im.turms.proto.ChatType} chatType
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @instance
                 */
                QueryMessagesRequest.prototype.chatType = 0;

                /**
                 * QueryMessagesRequest areSystemMessages.
                 * @member {google.protobuf.IBoolValue|null|undefined} areSystemMessages
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @instance
                 */
                QueryMessagesRequest.prototype.areSystemMessages = null;

                /**
                 * QueryMessagesRequest fromId.
                 * @member {google.protobuf.IInt64Value|null|undefined} fromId
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @instance
                 */
                QueryMessagesRequest.prototype.fromId = null;

                /**
                 * QueryMessagesRequest deliveryDateAfter.
                 * @member {google.protobuf.IInt64Value|null|undefined} deliveryDateAfter
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @instance
                 */
                QueryMessagesRequest.prototype.deliveryDateAfter = null;

                /**
                 * QueryMessagesRequest deliveryDateBefore.
                 * @member {google.protobuf.IInt64Value|null|undefined} deliveryDateBefore
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @instance
                 */
                QueryMessagesRequest.prototype.deliveryDateBefore = null;

                /**
                 * QueryMessagesRequest deliveryStatus.
                 * @member {im.turms.proto.MessageDeliveryStatus} deliveryStatus
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @instance
                 */
                QueryMessagesRequest.prototype.deliveryStatus = 0;

                /**
                 * Encodes the specified QueryMessagesRequest message. Does not implicitly {@link im.turms.proto.QueryMessagesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @static
                 * @param {im.turms.proto.IQueryMessagesRequest} message QueryMessagesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryMessagesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ids != null && message.ids.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.ids.length; ++i)
                            writer.int64(message.ids[i]);
                        writer.ldelim();
                    }
                    if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                        $root.google.protobuf.Int32Value.encode(message.size, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.chatType != null && Object.hasOwnProperty.call(message, "chatType"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.chatType);
                    if (message.areSystemMessages != null && Object.hasOwnProperty.call(message, "areSystemMessages"))
                        $root.google.protobuf.BoolValue.encode(message.areSystemMessages, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.fromId != null && Object.hasOwnProperty.call(message, "fromId"))
                        $root.google.protobuf.Int64Value.encode(message.fromId, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.deliveryDateAfter != null && Object.hasOwnProperty.call(message, "deliveryDateAfter"))
                        $root.google.protobuf.Int64Value.encode(message.deliveryDateAfter, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.deliveryDateBefore != null && Object.hasOwnProperty.call(message, "deliveryDateBefore"))
                        $root.google.protobuf.Int64Value.encode(message.deliveryDateBefore, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.deliveryStatus != null && Object.hasOwnProperty.call(message, "deliveryStatus"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.deliveryStatus);
                    return writer;
                };

                /**
                 * Decodes a QueryMessagesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryMessagesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryMessagesRequest} QueryMessagesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryMessagesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryMessagesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.ids && message.ids.length))
                                message.ids = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.ids.push(reader.int64().toString());
                            } else
                                message.ids.push(reader.int64().toString());
                            break;
                        case 2:
                            message.size = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.chatType = reader.int32();
                            break;
                        case 4:
                            message.areSystemMessages = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.fromId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.deliveryDateAfter = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.deliveryDateBefore = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.deliveryStatus = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryMessagesRequest;
            })();

            proto.QueryPendingMessagesWithTotalRequest = (function() {

                /**
                 * Properties of a QueryPendingMessagesWithTotalRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryPendingMessagesWithTotalRequest
                 * @property {google.protobuf.IInt32Value|null} [size] QueryPendingMessagesWithTotalRequest size
                 */

                /**
                 * Constructs a new QueryPendingMessagesWithTotalRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryPendingMessagesWithTotalRequest.
                 * @implements IQueryPendingMessagesWithTotalRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryPendingMessagesWithTotalRequest=} [properties] Properties to set
                 */
                function QueryPendingMessagesWithTotalRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryPendingMessagesWithTotalRequest size.
                 * @member {google.protobuf.IInt32Value|null|undefined} size
                 * @memberof im.turms.proto.QueryPendingMessagesWithTotalRequest
                 * @instance
                 */
                QueryPendingMessagesWithTotalRequest.prototype.size = null;

                /**
                 * Encodes the specified QueryPendingMessagesWithTotalRequest message. Does not implicitly {@link im.turms.proto.QueryPendingMessagesWithTotalRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryPendingMessagesWithTotalRequest
                 * @static
                 * @param {im.turms.proto.IQueryPendingMessagesWithTotalRequest} message QueryPendingMessagesWithTotalRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryPendingMessagesWithTotalRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                        $root.google.protobuf.Int32Value.encode(message.size, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryPendingMessagesWithTotalRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryPendingMessagesWithTotalRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryPendingMessagesWithTotalRequest} QueryPendingMessagesWithTotalRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryPendingMessagesWithTotalRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryPendingMessagesWithTotalRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.size = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryPendingMessagesWithTotalRequest;
            })();

            proto.UpdateMessageRequest = (function() {

                /**
                 * Properties of an UpdateMessageRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateMessageRequest
                 * @property {string|null} [messageId] UpdateMessageRequest messageId
                 * @property {google.protobuf.IBoolValue|null} [isSystemMessage] UpdateMessageRequest isSystemMessage
                 * @property {google.protobuf.IStringValue|null} [text] UpdateMessageRequest text
                 * @property {Array.<Uint8Array>|null} [records] UpdateMessageRequest records
                 * @property {google.protobuf.IInt64Value|null} [recallDate] UpdateMessageRequest recallDate
                 * @property {google.protobuf.IInt64Value|null} [readDate] UpdateMessageRequest readDate
                 */

                /**
                 * Constructs a new UpdateMessageRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateMessageRequest.
                 * @implements IUpdateMessageRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateMessageRequest=} [properties] Properties to set
                 */
                function UpdateMessageRequest(properties) {
                    this.records = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateMessageRequest messageId.
                 * @member {string} messageId
                 * @memberof im.turms.proto.UpdateMessageRequest
                 * @instance
                 */
                UpdateMessageRequest.prototype.messageId = "0";

                /**
                 * UpdateMessageRequest isSystemMessage.
                 * @member {google.protobuf.IBoolValue|null|undefined} isSystemMessage
                 * @memberof im.turms.proto.UpdateMessageRequest
                 * @instance
                 */
                UpdateMessageRequest.prototype.isSystemMessage = null;

                /**
                 * UpdateMessageRequest text.
                 * @member {google.protobuf.IStringValue|null|undefined} text
                 * @memberof im.turms.proto.UpdateMessageRequest
                 * @instance
                 */
                UpdateMessageRequest.prototype.text = null;

                /**
                 * UpdateMessageRequest records.
                 * @member {Array.<Uint8Array>} records
                 * @memberof im.turms.proto.UpdateMessageRequest
                 * @instance
                 */
                UpdateMessageRequest.prototype.records = $util.emptyArray;

                /**
                 * UpdateMessageRequest recallDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} recallDate
                 * @memberof im.turms.proto.UpdateMessageRequest
                 * @instance
                 */
                UpdateMessageRequest.prototype.recallDate = null;

                /**
                 * UpdateMessageRequest readDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} readDate
                 * @memberof im.turms.proto.UpdateMessageRequest
                 * @instance
                 */
                UpdateMessageRequest.prototype.readDate = null;

                /**
                 * Encodes the specified UpdateMessageRequest message. Does not implicitly {@link im.turms.proto.UpdateMessageRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateMessageRequest
                 * @static
                 * @param {im.turms.proto.IUpdateMessageRequest} message UpdateMessageRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateMessageRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.messageId);
                    if (message.isSystemMessage != null && Object.hasOwnProperty.call(message, "isSystemMessage"))
                        $root.google.protobuf.BoolValue.encode(message.isSystemMessage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                        $root.google.protobuf.StringValue.encode(message.text, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.records != null && message.records.length)
                        for (var i = 0; i < message.records.length; ++i)
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.records[i]);
                    if (message.recallDate != null && Object.hasOwnProperty.call(message, "recallDate"))
                        $root.google.protobuf.Int64Value.encode(message.recallDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.readDate != null && Object.hasOwnProperty.call(message, "readDate"))
                        $root.google.protobuf.Int64Value.encode(message.readDate, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an UpdateMessageRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateMessageRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateMessageRequest} UpdateMessageRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateMessageRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateMessageRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageId = reader.int64().toString();
                            break;
                        case 2:
                            message.isSystemMessage = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.text = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.records && message.records.length))
                                message.records = [];
                            message.records.push(reader.bytes());
                            break;
                        case 5:
                            message.recallDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.readDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateMessageRequest;
            })();

            proto.UpdateTypingStatusRequest = (function() {

                /**
                 * Properties of an UpdateTypingStatusRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateTypingStatusRequest
                 * @property {im.turms.proto.ChatType|null} [chatType] UpdateTypingStatusRequest chatType
                 * @property {string|null} [toId] UpdateTypingStatusRequest toId
                 */

                /**
                 * Constructs a new UpdateTypingStatusRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateTypingStatusRequest.
                 * @implements IUpdateTypingStatusRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateTypingStatusRequest=} [properties] Properties to set
                 */
                function UpdateTypingStatusRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateTypingStatusRequest chatType.
                 * @member {im.turms.proto.ChatType} chatType
                 * @memberof im.turms.proto.UpdateTypingStatusRequest
                 * @instance
                 */
                UpdateTypingStatusRequest.prototype.chatType = 0;

                /**
                 * UpdateTypingStatusRequest toId.
                 * @member {string} toId
                 * @memberof im.turms.proto.UpdateTypingStatusRequest
                 * @instance
                 */
                UpdateTypingStatusRequest.prototype.toId = "0";

                /**
                 * Encodes the specified UpdateTypingStatusRequest message. Does not implicitly {@link im.turms.proto.UpdateTypingStatusRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateTypingStatusRequest
                 * @static
                 * @param {im.turms.proto.IUpdateTypingStatusRequest} message UpdateTypingStatusRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateTypingStatusRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.chatType != null && Object.hasOwnProperty.call(message, "chatType"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.chatType);
                    if (message.toId != null && Object.hasOwnProperty.call(message, "toId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.toId);
                    return writer;
                };

                /**
                 * Decodes an UpdateTypingStatusRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateTypingStatusRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateTypingStatusRequest} UpdateTypingStatusRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateTypingStatusRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateTypingStatusRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.chatType = reader.int32();
                            break;
                        case 2:
                            message.toId = reader.int64().toString();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateTypingStatusRequest;
            })();

            proto.AckRequest = (function() {

                /**
                 * Properties of an AckRequest.
                 * @memberof im.turms.proto
                 * @interface IAckRequest
                 * @property {Array.<string>|null} [messagesIds] AckRequest messagesIds
                 */

                /**
                 * Constructs a new AckRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an AckRequest.
                 * @implements IAckRequest
                 * @constructor
                 * @param {im.turms.proto.IAckRequest=} [properties] Properties to set
                 */
                function AckRequest(properties) {
                    this.messagesIds = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AckRequest messagesIds.
                 * @member {Array.<string>} messagesIds
                 * @memberof im.turms.proto.AckRequest
                 * @instance
                 */
                AckRequest.prototype.messagesIds = $util.emptyArray;

                /**
                 * Encodes the specified AckRequest message. Does not implicitly {@link im.turms.proto.AckRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.AckRequest
                 * @static
                 * @param {im.turms.proto.IAckRequest} message AckRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AckRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messagesIds != null && message.messagesIds.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.messagesIds.length; ++i)
                            writer.int64(message.messagesIds[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Decodes an AckRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.AckRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.AckRequest} AckRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AckRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.AckRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.messagesIds && message.messagesIds.length))
                                message.messagesIds = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.messagesIds.push(reader.int64().toString());
                            } else
                                message.messagesIds.push(reader.int64().toString());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return AckRequest;
            })();

            proto.DeleteResourceRequest = (function() {

                /**
                 * Properties of a DeleteResourceRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteResourceRequest
                 * @property {im.turms.proto.ContentType|null} [contentType] DeleteResourceRequest contentType
                 * @property {google.protobuf.IStringValue|null} [keyStr] DeleteResourceRequest keyStr
                 * @property {google.protobuf.IInt64Value|null} [keyNum] DeleteResourceRequest keyNum
                 */

                /**
                 * Constructs a new DeleteResourceRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteResourceRequest.
                 * @implements IDeleteResourceRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteResourceRequest=} [properties] Properties to set
                 */
                function DeleteResourceRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteResourceRequest contentType.
                 * @member {im.turms.proto.ContentType} contentType
                 * @memberof im.turms.proto.DeleteResourceRequest
                 * @instance
                 */
                DeleteResourceRequest.prototype.contentType = 0;

                /**
                 * DeleteResourceRequest keyStr.
                 * @member {google.protobuf.IStringValue|null|undefined} keyStr
                 * @memberof im.turms.proto.DeleteResourceRequest
                 * @instance
                 */
                DeleteResourceRequest.prototype.keyStr = null;

                /**
                 * DeleteResourceRequest keyNum.
                 * @member {google.protobuf.IInt64Value|null|undefined} keyNum
                 * @memberof im.turms.proto.DeleteResourceRequest
                 * @instance
                 */
                DeleteResourceRequest.prototype.keyNum = null;

                /**
                 * Encodes the specified DeleteResourceRequest message. Does not implicitly {@link im.turms.proto.DeleteResourceRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteResourceRequest
                 * @static
                 * @param {im.turms.proto.IDeleteResourceRequest} message DeleteResourceRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteResourceRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.contentType != null && Object.hasOwnProperty.call(message, "contentType"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.contentType);
                    if (message.keyStr != null && Object.hasOwnProperty.call(message, "keyStr"))
                        $root.google.protobuf.StringValue.encode(message.keyStr, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.keyNum != null && Object.hasOwnProperty.call(message, "keyNum"))
                        $root.google.protobuf.Int64Value.encode(message.keyNum, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a DeleteResourceRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteResourceRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteResourceRequest} DeleteResourceRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteResourceRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteResourceRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.contentType = reader.int32();
                            break;
                        case 2:
                            message.keyStr = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.keyNum = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteResourceRequest;
            })();

            proto.QuerySignedGetUrlRequest = (function() {

                /**
                 * Properties of a QuerySignedGetUrlRequest.
                 * @memberof im.turms.proto
                 * @interface IQuerySignedGetUrlRequest
                 * @property {im.turms.proto.ContentType|null} [contentType] QuerySignedGetUrlRequest contentType
                 * @property {google.protobuf.IStringValue|null} [keyStr] QuerySignedGetUrlRequest keyStr
                 * @property {google.protobuf.IInt64Value|null} [keyNum] QuerySignedGetUrlRequest keyNum
                 */

                /**
                 * Constructs a new QuerySignedGetUrlRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QuerySignedGetUrlRequest.
                 * @implements IQuerySignedGetUrlRequest
                 * @constructor
                 * @param {im.turms.proto.IQuerySignedGetUrlRequest=} [properties] Properties to set
                 */
                function QuerySignedGetUrlRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QuerySignedGetUrlRequest contentType.
                 * @member {im.turms.proto.ContentType} contentType
                 * @memberof im.turms.proto.QuerySignedGetUrlRequest
                 * @instance
                 */
                QuerySignedGetUrlRequest.prototype.contentType = 0;

                /**
                 * QuerySignedGetUrlRequest keyStr.
                 * @member {google.protobuf.IStringValue|null|undefined} keyStr
                 * @memberof im.turms.proto.QuerySignedGetUrlRequest
                 * @instance
                 */
                QuerySignedGetUrlRequest.prototype.keyStr = null;

                /**
                 * QuerySignedGetUrlRequest keyNum.
                 * @member {google.protobuf.IInt64Value|null|undefined} keyNum
                 * @memberof im.turms.proto.QuerySignedGetUrlRequest
                 * @instance
                 */
                QuerySignedGetUrlRequest.prototype.keyNum = null;

                /**
                 * Encodes the specified QuerySignedGetUrlRequest message. Does not implicitly {@link im.turms.proto.QuerySignedGetUrlRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QuerySignedGetUrlRequest
                 * @static
                 * @param {im.turms.proto.IQuerySignedGetUrlRequest} message QuerySignedGetUrlRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySignedGetUrlRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.contentType != null && Object.hasOwnProperty.call(message, "contentType"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.contentType);
                    if (message.keyStr != null && Object.hasOwnProperty.call(message, "keyStr"))
                        $root.google.protobuf.StringValue.encode(message.keyStr, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.keyNum != null && Object.hasOwnProperty.call(message, "keyNum"))
                        $root.google.protobuf.Int64Value.encode(message.keyNum, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QuerySignedGetUrlRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QuerySignedGetUrlRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QuerySignedGetUrlRequest} QuerySignedGetUrlRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySignedGetUrlRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QuerySignedGetUrlRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.contentType = reader.int32();
                            break;
                        case 2:
                            message.keyStr = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.keyNum = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QuerySignedGetUrlRequest;
            })();

            proto.QuerySignedPutUrlRequest = (function() {

                /**
                 * Properties of a QuerySignedPutUrlRequest.
                 * @memberof im.turms.proto
                 * @interface IQuerySignedPutUrlRequest
                 * @property {im.turms.proto.ContentType|null} [contentType] QuerySignedPutUrlRequest contentType
                 * @property {google.protobuf.IStringValue|null} [keyStr] QuerySignedPutUrlRequest keyStr
                 * @property {google.protobuf.IInt64Value|null} [keyNum] QuerySignedPutUrlRequest keyNum
                 * @property {string|null} [contentLength] QuerySignedPutUrlRequest contentLength
                 */

                /**
                 * Constructs a new QuerySignedPutUrlRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QuerySignedPutUrlRequest.
                 * @implements IQuerySignedPutUrlRequest
                 * @constructor
                 * @param {im.turms.proto.IQuerySignedPutUrlRequest=} [properties] Properties to set
                 */
                function QuerySignedPutUrlRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QuerySignedPutUrlRequest contentType.
                 * @member {im.turms.proto.ContentType} contentType
                 * @memberof im.turms.proto.QuerySignedPutUrlRequest
                 * @instance
                 */
                QuerySignedPutUrlRequest.prototype.contentType = 0;

                /**
                 * QuerySignedPutUrlRequest keyStr.
                 * @member {google.protobuf.IStringValue|null|undefined} keyStr
                 * @memberof im.turms.proto.QuerySignedPutUrlRequest
                 * @instance
                 */
                QuerySignedPutUrlRequest.prototype.keyStr = null;

                /**
                 * QuerySignedPutUrlRequest keyNum.
                 * @member {google.protobuf.IInt64Value|null|undefined} keyNum
                 * @memberof im.turms.proto.QuerySignedPutUrlRequest
                 * @instance
                 */
                QuerySignedPutUrlRequest.prototype.keyNum = null;

                /**
                 * QuerySignedPutUrlRequest contentLength.
                 * @member {string} contentLength
                 * @memberof im.turms.proto.QuerySignedPutUrlRequest
                 * @instance
                 */
                QuerySignedPutUrlRequest.prototype.contentLength = "0";

                /**
                 * Encodes the specified QuerySignedPutUrlRequest message. Does not implicitly {@link im.turms.proto.QuerySignedPutUrlRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QuerySignedPutUrlRequest
                 * @static
                 * @param {im.turms.proto.IQuerySignedPutUrlRequest} message QuerySignedPutUrlRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySignedPutUrlRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.contentType != null && Object.hasOwnProperty.call(message, "contentType"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.contentType);
                    if (message.keyStr != null && Object.hasOwnProperty.call(message, "keyStr"))
                        $root.google.protobuf.StringValue.encode(message.keyStr, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.keyNum != null && Object.hasOwnProperty.call(message, "keyNum"))
                        $root.google.protobuf.Int64Value.encode(message.keyNum, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.contentLength != null && Object.hasOwnProperty.call(message, "contentLength"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.contentLength);
                    return writer;
                };

                /**
                 * Decodes a QuerySignedPutUrlRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QuerySignedPutUrlRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QuerySignedPutUrlRequest} QuerySignedPutUrlRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySignedPutUrlRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QuerySignedPutUrlRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.contentType = reader.int32();
                            break;
                        case 2:
                            message.keyStr = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.keyNum = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.contentLength = reader.int64().toString();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QuerySignedPutUrlRequest;
            })();

            proto.TurmsRequest = (function() {

                /**
                 * Properties of a TurmsRequest.
                 * @memberof im.turms.proto
                 * @interface ITurmsRequest
                 * @property {google.protobuf.IInt64Value|null} [requestId] TurmsRequest requestId
                 * @property {im.turms.proto.IAckRequest|null} [ackRequest] TurmsRequest ackRequest
                 * @property {im.turms.proto.IDeleteResourceRequest|null} [deleteResourceRequest] TurmsRequest deleteResourceRequest
                 * @property {im.turms.proto.IQuerySignedGetUrlRequest|null} [querySignedGetUrlRequest] TurmsRequest querySignedGetUrlRequest
                 * @property {im.turms.proto.IQuerySignedPutUrlRequest|null} [querySignedPutUrlRequest] TurmsRequest querySignedPutUrlRequest
                 * @property {im.turms.proto.ICreateMessageRequest|null} [createMessageRequest] TurmsRequest createMessageRequest
                 * @property {im.turms.proto.IQueryMessageStatusesRequest|null} [queryMessageStatusesRequest] TurmsRequest queryMessageStatusesRequest
                 * @property {im.turms.proto.IQueryMessagesRequest|null} [queryMessagesRequest] TurmsRequest queryMessagesRequest
                 * @property {im.turms.proto.IQueryPendingMessagesWithTotalRequest|null} [queryPendingMessagesWithTotalRequest] TurmsRequest queryPendingMessagesWithTotalRequest
                 * @property {im.turms.proto.IUpdateMessageRequest|null} [updateMessageRequest] TurmsRequest updateMessageRequest
                 * @property {im.turms.proto.IUpdateTypingStatusRequest|null} [updateTypingStatusRequest] TurmsRequest updateTypingStatusRequest
                 * @property {im.turms.proto.IQueryUserGroupInvitationsRequest|null} [queryUserGroupInvitationsRequest] TurmsRequest queryUserGroupInvitationsRequest
                 * @property {im.turms.proto.IQueryUserProfileRequest|null} [queryUserProfileRequest] TurmsRequest queryUserProfileRequest
                 * @property {im.turms.proto.IQueryUsersIdsNearbyRequest|null} [queryUsersIdsNearbyRequest] TurmsRequest queryUsersIdsNearbyRequest
                 * @property {im.turms.proto.IQueryUsersInfosNearbyRequest|null} [queryUsersInfosNearbyRequest] TurmsRequest queryUsersInfosNearbyRequest
                 * @property {im.turms.proto.IQueryUsersOnlineStatusRequest|null} [queryUsersOnlineStatusRequest] TurmsRequest queryUsersOnlineStatusRequest
                 * @property {im.turms.proto.IUpdateUserLocationRequest|null} [updateUserLocationRequest] TurmsRequest updateUserLocationRequest
                 * @property {im.turms.proto.IUpdateUserOnlineStatusRequest|null} [updateUserOnlineStatusRequest] TurmsRequest updateUserOnlineStatusRequest
                 * @property {im.turms.proto.IUpdateUserRequest|null} [updateUserRequest] TurmsRequest updateUserRequest
                 * @property {im.turms.proto.ICreateFriendRequestRequest|null} [createFriendRequestRequest] TurmsRequest createFriendRequestRequest
                 * @property {im.turms.proto.ICreateRelationshipGroupRequest|null} [createRelationshipGroupRequest] TurmsRequest createRelationshipGroupRequest
                 * @property {im.turms.proto.ICreateRelationshipRequest|null} [createRelationshipRequest] TurmsRequest createRelationshipRequest
                 * @property {im.turms.proto.IDeleteRelationshipGroupRequest|null} [deleteRelationshipGroupRequest] TurmsRequest deleteRelationshipGroupRequest
                 * @property {im.turms.proto.IDeleteRelationshipRequest|null} [deleteRelationshipRequest] TurmsRequest deleteRelationshipRequest
                 * @property {im.turms.proto.IQueryFriendRequestsRequest|null} [queryFriendRequestsRequest] TurmsRequest queryFriendRequestsRequest
                 * @property {im.turms.proto.IQueryRelatedUsersIdsRequest|null} [queryRelatedUsersIdsRequest] TurmsRequest queryRelatedUsersIdsRequest
                 * @property {im.turms.proto.IQueryRelationshipGroupsRequest|null} [queryRelationshipGroupsRequest] TurmsRequest queryRelationshipGroupsRequest
                 * @property {im.turms.proto.IQueryRelationshipsRequest|null} [queryRelationshipsRequest] TurmsRequest queryRelationshipsRequest
                 * @property {im.turms.proto.IUpdateFriendRequestRequest|null} [updateFriendRequestRequest] TurmsRequest updateFriendRequestRequest
                 * @property {im.turms.proto.IUpdateRelationshipGroupRequest|null} [updateRelationshipGroupRequest] TurmsRequest updateRelationshipGroupRequest
                 * @property {im.turms.proto.IUpdateRelationshipRequest|null} [updateRelationshipRequest] TurmsRequest updateRelationshipRequest
                 * @property {im.turms.proto.ICreateGroupRequest|null} [createGroupRequest] TurmsRequest createGroupRequest
                 * @property {im.turms.proto.IDeleteGroupRequest|null} [deleteGroupRequest] TurmsRequest deleteGroupRequest
                 * @property {im.turms.proto.IQueryGroupRequest|null} [queryGroupRequest] TurmsRequest queryGroupRequest
                 * @property {im.turms.proto.IQueryJoinedGroupsIdsRequest|null} [queryJoinedGroupsIdsRequest] TurmsRequest queryJoinedGroupsIdsRequest
                 * @property {im.turms.proto.IQueryJoinedGroupsInfosRequest|null} [queryJoinedGroupsInfosRequest] TurmsRequest queryJoinedGroupsInfosRequest
                 * @property {im.turms.proto.IUpdateGroupRequest|null} [updateGroupRequest] TurmsRequest updateGroupRequest
                 * @property {im.turms.proto.ICreateGroupBlacklistedUserRequest|null} [createGroupBlacklistedUserRequest] TurmsRequest createGroupBlacklistedUserRequest
                 * @property {im.turms.proto.IDeleteGroupBlacklistedUserRequest|null} [deleteGroupBlacklistedUserRequest] TurmsRequest deleteGroupBlacklistedUserRequest
                 * @property {im.turms.proto.IQueryGroupBlacklistedUsersIdsRequest|null} [queryGroupBlacklistedUsersIdsRequest] TurmsRequest queryGroupBlacklistedUsersIdsRequest
                 * @property {im.turms.proto.IQueryGroupBlacklistedUsersInfosRequest|null} [queryGroupBlacklistedUsersInfosRequest] TurmsRequest queryGroupBlacklistedUsersInfosRequest
                 * @property {im.turms.proto.ICheckGroupJoinQuestionsAnswersRequest|null} [checkGroupJoinQuestionsAnswersRequest] TurmsRequest checkGroupJoinQuestionsAnswersRequest
                 * @property {im.turms.proto.ICreateGroupInvitationRequest|null} [createGroupInvitationRequest] TurmsRequest createGroupInvitationRequest
                 * @property {im.turms.proto.ICreateGroupJoinRequestRequest|null} [createGroupJoinRequestRequest] TurmsRequest createGroupJoinRequestRequest
                 * @property {im.turms.proto.ICreateGroupJoinQuestionRequest|null} [createGroupJoinQuestionRequest] TurmsRequest createGroupJoinQuestionRequest
                 * @property {im.turms.proto.IDeleteGroupInvitationRequest|null} [deleteGroupInvitationRequest] TurmsRequest deleteGroupInvitationRequest
                 * @property {im.turms.proto.IDeleteGroupJoinRequestRequest|null} [deleteGroupJoinRequestRequest] TurmsRequest deleteGroupJoinRequestRequest
                 * @property {im.turms.proto.IDeleteGroupJoinQuestionRequest|null} [deleteGroupJoinQuestionRequest] TurmsRequest deleteGroupJoinQuestionRequest
                 * @property {im.turms.proto.IQueryGroupInvitationsRequest|null} [queryGroupInvitationsRequest] TurmsRequest queryGroupInvitationsRequest
                 * @property {im.turms.proto.IQueryGroupJoinRequestsRequest|null} [queryGroupJoinRequestsRequest] TurmsRequest queryGroupJoinRequestsRequest
                 * @property {im.turms.proto.IQueryGroupJoinQuestionsRequest|null} [queryGroupJoinQuestionsRequest] TurmsRequest queryGroupJoinQuestionsRequest
                 * @property {im.turms.proto.IUpdateGroupJoinQuestionRequest|null} [updateGroupJoinQuestionRequest] TurmsRequest updateGroupJoinQuestionRequest
                 * @property {im.turms.proto.ICreateGroupMemberRequest|null} [createGroupMemberRequest] TurmsRequest createGroupMemberRequest
                 * @property {im.turms.proto.IDeleteGroupMemberRequest|null} [deleteGroupMemberRequest] TurmsRequest deleteGroupMemberRequest
                 * @property {im.turms.proto.IQueryGroupMembersRequest|null} [queryGroupMembersRequest] TurmsRequest queryGroupMembersRequest
                 * @property {im.turms.proto.IUpdateGroupMemberRequest|null} [updateGroupMemberRequest] TurmsRequest updateGroupMemberRequest
                 */

                /**
                 * Constructs a new TurmsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a TurmsRequest.
                 * @implements ITurmsRequest
                 * @constructor
                 * @param {im.turms.proto.ITurmsRequest=} [properties] Properties to set
                 */
                function TurmsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TurmsRequest requestId.
                 * @member {google.protobuf.IInt64Value|null|undefined} requestId
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.requestId = null;

                /**
                 * TurmsRequest ackRequest.
                 * @member {im.turms.proto.IAckRequest|null|undefined} ackRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.ackRequest = null;

                /**
                 * TurmsRequest deleteResourceRequest.
                 * @member {im.turms.proto.IDeleteResourceRequest|null|undefined} deleteResourceRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.deleteResourceRequest = null;

                /**
                 * TurmsRequest querySignedGetUrlRequest.
                 * @member {im.turms.proto.IQuerySignedGetUrlRequest|null|undefined} querySignedGetUrlRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.querySignedGetUrlRequest = null;

                /**
                 * TurmsRequest querySignedPutUrlRequest.
                 * @member {im.turms.proto.IQuerySignedPutUrlRequest|null|undefined} querySignedPutUrlRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.querySignedPutUrlRequest = null;

                /**
                 * TurmsRequest createMessageRequest.
                 * @member {im.turms.proto.ICreateMessageRequest|null|undefined} createMessageRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createMessageRequest = null;

                /**
                 * TurmsRequest queryMessageStatusesRequest.
                 * @member {im.turms.proto.IQueryMessageStatusesRequest|null|undefined} queryMessageStatusesRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryMessageStatusesRequest = null;

                /**
                 * TurmsRequest queryMessagesRequest.
                 * @member {im.turms.proto.IQueryMessagesRequest|null|undefined} queryMessagesRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryMessagesRequest = null;

                /**
                 * TurmsRequest queryPendingMessagesWithTotalRequest.
                 * @member {im.turms.proto.IQueryPendingMessagesWithTotalRequest|null|undefined} queryPendingMessagesWithTotalRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryPendingMessagesWithTotalRequest = null;

                /**
                 * TurmsRequest updateMessageRequest.
                 * @member {im.turms.proto.IUpdateMessageRequest|null|undefined} updateMessageRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateMessageRequest = null;

                /**
                 * TurmsRequest updateTypingStatusRequest.
                 * @member {im.turms.proto.IUpdateTypingStatusRequest|null|undefined} updateTypingStatusRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateTypingStatusRequest = null;

                /**
                 * TurmsRequest queryUserGroupInvitationsRequest.
                 * @member {im.turms.proto.IQueryUserGroupInvitationsRequest|null|undefined} queryUserGroupInvitationsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryUserGroupInvitationsRequest = null;

                /**
                 * TurmsRequest queryUserProfileRequest.
                 * @member {im.turms.proto.IQueryUserProfileRequest|null|undefined} queryUserProfileRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryUserProfileRequest = null;

                /**
                 * TurmsRequest queryUsersIdsNearbyRequest.
                 * @member {im.turms.proto.IQueryUsersIdsNearbyRequest|null|undefined} queryUsersIdsNearbyRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryUsersIdsNearbyRequest = null;

                /**
                 * TurmsRequest queryUsersInfosNearbyRequest.
                 * @member {im.turms.proto.IQueryUsersInfosNearbyRequest|null|undefined} queryUsersInfosNearbyRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryUsersInfosNearbyRequest = null;

                /**
                 * TurmsRequest queryUsersOnlineStatusRequest.
                 * @member {im.turms.proto.IQueryUsersOnlineStatusRequest|null|undefined} queryUsersOnlineStatusRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryUsersOnlineStatusRequest = null;

                /**
                 * TurmsRequest updateUserLocationRequest.
                 * @member {im.turms.proto.IUpdateUserLocationRequest|null|undefined} updateUserLocationRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateUserLocationRequest = null;

                /**
                 * TurmsRequest updateUserOnlineStatusRequest.
                 * @member {im.turms.proto.IUpdateUserOnlineStatusRequest|null|undefined} updateUserOnlineStatusRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateUserOnlineStatusRequest = null;

                /**
                 * TurmsRequest updateUserRequest.
                 * @member {im.turms.proto.IUpdateUserRequest|null|undefined} updateUserRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateUserRequest = null;

                /**
                 * TurmsRequest createFriendRequestRequest.
                 * @member {im.turms.proto.ICreateFriendRequestRequest|null|undefined} createFriendRequestRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createFriendRequestRequest = null;

                /**
                 * TurmsRequest createRelationshipGroupRequest.
                 * @member {im.turms.proto.ICreateRelationshipGroupRequest|null|undefined} createRelationshipGroupRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createRelationshipGroupRequest = null;

                /**
                 * TurmsRequest createRelationshipRequest.
                 * @member {im.turms.proto.ICreateRelationshipRequest|null|undefined} createRelationshipRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createRelationshipRequest = null;

                /**
                 * TurmsRequest deleteRelationshipGroupRequest.
                 * @member {im.turms.proto.IDeleteRelationshipGroupRequest|null|undefined} deleteRelationshipGroupRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.deleteRelationshipGroupRequest = null;

                /**
                 * TurmsRequest deleteRelationshipRequest.
                 * @member {im.turms.proto.IDeleteRelationshipRequest|null|undefined} deleteRelationshipRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.deleteRelationshipRequest = null;

                /**
                 * TurmsRequest queryFriendRequestsRequest.
                 * @member {im.turms.proto.IQueryFriendRequestsRequest|null|undefined} queryFriendRequestsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryFriendRequestsRequest = null;

                /**
                 * TurmsRequest queryRelatedUsersIdsRequest.
                 * @member {im.turms.proto.IQueryRelatedUsersIdsRequest|null|undefined} queryRelatedUsersIdsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryRelatedUsersIdsRequest = null;

                /**
                 * TurmsRequest queryRelationshipGroupsRequest.
                 * @member {im.turms.proto.IQueryRelationshipGroupsRequest|null|undefined} queryRelationshipGroupsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryRelationshipGroupsRequest = null;

                /**
                 * TurmsRequest queryRelationshipsRequest.
                 * @member {im.turms.proto.IQueryRelationshipsRequest|null|undefined} queryRelationshipsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryRelationshipsRequest = null;

                /**
                 * TurmsRequest updateFriendRequestRequest.
                 * @member {im.turms.proto.IUpdateFriendRequestRequest|null|undefined} updateFriendRequestRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateFriendRequestRequest = null;

                /**
                 * TurmsRequest updateRelationshipGroupRequest.
                 * @member {im.turms.proto.IUpdateRelationshipGroupRequest|null|undefined} updateRelationshipGroupRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateRelationshipGroupRequest = null;

                /**
                 * TurmsRequest updateRelationshipRequest.
                 * @member {im.turms.proto.IUpdateRelationshipRequest|null|undefined} updateRelationshipRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateRelationshipRequest = null;

                /**
                 * TurmsRequest createGroupRequest.
                 * @member {im.turms.proto.ICreateGroupRequest|null|undefined} createGroupRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createGroupRequest = null;

                /**
                 * TurmsRequest deleteGroupRequest.
                 * @member {im.turms.proto.IDeleteGroupRequest|null|undefined} deleteGroupRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.deleteGroupRequest = null;

                /**
                 * TurmsRequest queryGroupRequest.
                 * @member {im.turms.proto.IQueryGroupRequest|null|undefined} queryGroupRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryGroupRequest = null;

                /**
                 * TurmsRequest queryJoinedGroupsIdsRequest.
                 * @member {im.turms.proto.IQueryJoinedGroupsIdsRequest|null|undefined} queryJoinedGroupsIdsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryJoinedGroupsIdsRequest = null;

                /**
                 * TurmsRequest queryJoinedGroupsInfosRequest.
                 * @member {im.turms.proto.IQueryJoinedGroupsInfosRequest|null|undefined} queryJoinedGroupsInfosRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryJoinedGroupsInfosRequest = null;

                /**
                 * TurmsRequest updateGroupRequest.
                 * @member {im.turms.proto.IUpdateGroupRequest|null|undefined} updateGroupRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateGroupRequest = null;

                /**
                 * TurmsRequest createGroupBlacklistedUserRequest.
                 * @member {im.turms.proto.ICreateGroupBlacklistedUserRequest|null|undefined} createGroupBlacklistedUserRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createGroupBlacklistedUserRequest = null;

                /**
                 * TurmsRequest deleteGroupBlacklistedUserRequest.
                 * @member {im.turms.proto.IDeleteGroupBlacklistedUserRequest|null|undefined} deleteGroupBlacklistedUserRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.deleteGroupBlacklistedUserRequest = null;

                /**
                 * TurmsRequest queryGroupBlacklistedUsersIdsRequest.
                 * @member {im.turms.proto.IQueryGroupBlacklistedUsersIdsRequest|null|undefined} queryGroupBlacklistedUsersIdsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryGroupBlacklistedUsersIdsRequest = null;

                /**
                 * TurmsRequest queryGroupBlacklistedUsersInfosRequest.
                 * @member {im.turms.proto.IQueryGroupBlacklistedUsersInfosRequest|null|undefined} queryGroupBlacklistedUsersInfosRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryGroupBlacklistedUsersInfosRequest = null;

                /**
                 * TurmsRequest checkGroupJoinQuestionsAnswersRequest.
                 * @member {im.turms.proto.ICheckGroupJoinQuestionsAnswersRequest|null|undefined} checkGroupJoinQuestionsAnswersRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.checkGroupJoinQuestionsAnswersRequest = null;

                /**
                 * TurmsRequest createGroupInvitationRequest.
                 * @member {im.turms.proto.ICreateGroupInvitationRequest|null|undefined} createGroupInvitationRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createGroupInvitationRequest = null;

                /**
                 * TurmsRequest createGroupJoinRequestRequest.
                 * @member {im.turms.proto.ICreateGroupJoinRequestRequest|null|undefined} createGroupJoinRequestRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createGroupJoinRequestRequest = null;

                /**
                 * TurmsRequest createGroupJoinQuestionRequest.
                 * @member {im.turms.proto.ICreateGroupJoinQuestionRequest|null|undefined} createGroupJoinQuestionRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createGroupJoinQuestionRequest = null;

                /**
                 * TurmsRequest deleteGroupInvitationRequest.
                 * @member {im.turms.proto.IDeleteGroupInvitationRequest|null|undefined} deleteGroupInvitationRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.deleteGroupInvitationRequest = null;

                /**
                 * TurmsRequest deleteGroupJoinRequestRequest.
                 * @member {im.turms.proto.IDeleteGroupJoinRequestRequest|null|undefined} deleteGroupJoinRequestRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.deleteGroupJoinRequestRequest = null;

                /**
                 * TurmsRequest deleteGroupJoinQuestionRequest.
                 * @member {im.turms.proto.IDeleteGroupJoinQuestionRequest|null|undefined} deleteGroupJoinQuestionRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.deleteGroupJoinQuestionRequest = null;

                /**
                 * TurmsRequest queryGroupInvitationsRequest.
                 * @member {im.turms.proto.IQueryGroupInvitationsRequest|null|undefined} queryGroupInvitationsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryGroupInvitationsRequest = null;

                /**
                 * TurmsRequest queryGroupJoinRequestsRequest.
                 * @member {im.turms.proto.IQueryGroupJoinRequestsRequest|null|undefined} queryGroupJoinRequestsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryGroupJoinRequestsRequest = null;

                /**
                 * TurmsRequest queryGroupJoinQuestionsRequest.
                 * @member {im.turms.proto.IQueryGroupJoinQuestionsRequest|null|undefined} queryGroupJoinQuestionsRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryGroupJoinQuestionsRequest = null;

                /**
                 * TurmsRequest updateGroupJoinQuestionRequest.
                 * @member {im.turms.proto.IUpdateGroupJoinQuestionRequest|null|undefined} updateGroupJoinQuestionRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateGroupJoinQuestionRequest = null;

                /**
                 * TurmsRequest createGroupMemberRequest.
                 * @member {im.turms.proto.ICreateGroupMemberRequest|null|undefined} createGroupMemberRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.createGroupMemberRequest = null;

                /**
                 * TurmsRequest deleteGroupMemberRequest.
                 * @member {im.turms.proto.IDeleteGroupMemberRequest|null|undefined} deleteGroupMemberRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.deleteGroupMemberRequest = null;

                /**
                 * TurmsRequest queryGroupMembersRequest.
                 * @member {im.turms.proto.IQueryGroupMembersRequest|null|undefined} queryGroupMembersRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.queryGroupMembersRequest = null;

                /**
                 * TurmsRequest updateGroupMemberRequest.
                 * @member {im.turms.proto.IUpdateGroupMemberRequest|null|undefined} updateGroupMemberRequest
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                TurmsRequest.prototype.updateGroupMemberRequest = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * TurmsRequest kind.
                 * @member {"ackRequest"|"deleteResourceRequest"|"querySignedGetUrlRequest"|"querySignedPutUrlRequest"|"createMessageRequest"|"queryMessageStatusesRequest"|"queryMessagesRequest"|"queryPendingMessagesWithTotalRequest"|"updateMessageRequest"|"updateTypingStatusRequest"|"queryUserGroupInvitationsRequest"|"queryUserProfileRequest"|"queryUsersIdsNearbyRequest"|"queryUsersInfosNearbyRequest"|"queryUsersOnlineStatusRequest"|"updateUserLocationRequest"|"updateUserOnlineStatusRequest"|"updateUserRequest"|"createFriendRequestRequest"|"createRelationshipGroupRequest"|"createRelationshipRequest"|"deleteRelationshipGroupRequest"|"deleteRelationshipRequest"|"queryFriendRequestsRequest"|"queryRelatedUsersIdsRequest"|"queryRelationshipGroupsRequest"|"queryRelationshipsRequest"|"updateFriendRequestRequest"|"updateRelationshipGroupRequest"|"updateRelationshipRequest"|"createGroupRequest"|"deleteGroupRequest"|"queryGroupRequest"|"queryJoinedGroupsIdsRequest"|"queryJoinedGroupsInfosRequest"|"updateGroupRequest"|"createGroupBlacklistedUserRequest"|"deleteGroupBlacklistedUserRequest"|"queryGroupBlacklistedUsersIdsRequest"|"queryGroupBlacklistedUsersInfosRequest"|"checkGroupJoinQuestionsAnswersRequest"|"createGroupInvitationRequest"|"createGroupJoinRequestRequest"|"createGroupJoinQuestionRequest"|"deleteGroupInvitationRequest"|"deleteGroupJoinRequestRequest"|"deleteGroupJoinQuestionRequest"|"queryGroupInvitationsRequest"|"queryGroupJoinRequestsRequest"|"queryGroupJoinQuestionsRequest"|"updateGroupJoinQuestionRequest"|"createGroupMemberRequest"|"deleteGroupMemberRequest"|"queryGroupMembersRequest"|"updateGroupMemberRequest"|undefined} kind
                 * @memberof im.turms.proto.TurmsRequest
                 * @instance
                 */
                Object.defineProperty(TurmsRequest.prototype, "kind", {
                    get: $util.oneOfGetter($oneOfFields = ["ackRequest", "deleteResourceRequest", "querySignedGetUrlRequest", "querySignedPutUrlRequest", "createMessageRequest", "queryMessageStatusesRequest", "queryMessagesRequest", "queryPendingMessagesWithTotalRequest", "updateMessageRequest", "updateTypingStatusRequest", "queryUserGroupInvitationsRequest", "queryUserProfileRequest", "queryUsersIdsNearbyRequest", "queryUsersInfosNearbyRequest", "queryUsersOnlineStatusRequest", "updateUserLocationRequest", "updateUserOnlineStatusRequest", "updateUserRequest", "createFriendRequestRequest", "createRelationshipGroupRequest", "createRelationshipRequest", "deleteRelationshipGroupRequest", "deleteRelationshipRequest", "queryFriendRequestsRequest", "queryRelatedUsersIdsRequest", "queryRelationshipGroupsRequest", "queryRelationshipsRequest", "updateFriendRequestRequest", "updateRelationshipGroupRequest", "updateRelationshipRequest", "createGroupRequest", "deleteGroupRequest", "queryGroupRequest", "queryJoinedGroupsIdsRequest", "queryJoinedGroupsInfosRequest", "updateGroupRequest", "createGroupBlacklistedUserRequest", "deleteGroupBlacklistedUserRequest", "queryGroupBlacklistedUsersIdsRequest", "queryGroupBlacklistedUsersInfosRequest", "checkGroupJoinQuestionsAnswersRequest", "createGroupInvitationRequest", "createGroupJoinRequestRequest", "createGroupJoinQuestionRequest", "deleteGroupInvitationRequest", "deleteGroupJoinRequestRequest", "deleteGroupJoinQuestionRequest", "queryGroupInvitationsRequest", "queryGroupJoinRequestsRequest", "queryGroupJoinQuestionsRequest", "updateGroupJoinQuestionRequest", "createGroupMemberRequest", "deleteGroupMemberRequest", "queryGroupMembersRequest", "updateGroupMemberRequest"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Encodes the specified TurmsRequest message. Does not implicitly {@link im.turms.proto.TurmsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.TurmsRequest
                 * @static
                 * @param {im.turms.proto.ITurmsRequest} message TurmsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TurmsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                        $root.google.protobuf.Int64Value.encode(message.requestId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.ackRequest != null && Object.hasOwnProperty.call(message, "ackRequest"))
                        $root.im.turms.proto.AckRequest.encode(message.ackRequest, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.deleteResourceRequest != null && Object.hasOwnProperty.call(message, "deleteResourceRequest"))
                        $root.im.turms.proto.DeleteResourceRequest.encode(message.deleteResourceRequest, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.querySignedGetUrlRequest != null && Object.hasOwnProperty.call(message, "querySignedGetUrlRequest"))
                        $root.im.turms.proto.QuerySignedGetUrlRequest.encode(message.querySignedGetUrlRequest, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.querySignedPutUrlRequest != null && Object.hasOwnProperty.call(message, "querySignedPutUrlRequest"))
                        $root.im.turms.proto.QuerySignedPutUrlRequest.encode(message.querySignedPutUrlRequest, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.createMessageRequest != null && Object.hasOwnProperty.call(message, "createMessageRequest"))
                        $root.im.turms.proto.CreateMessageRequest.encode(message.createMessageRequest, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.queryMessageStatusesRequest != null && Object.hasOwnProperty.call(message, "queryMessageStatusesRequest"))
                        $root.im.turms.proto.QueryMessageStatusesRequest.encode(message.queryMessageStatusesRequest, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.queryMessagesRequest != null && Object.hasOwnProperty.call(message, "queryMessagesRequest"))
                        $root.im.turms.proto.QueryMessagesRequest.encode(message.queryMessagesRequest, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.queryPendingMessagesWithTotalRequest != null && Object.hasOwnProperty.call(message, "queryPendingMessagesWithTotalRequest"))
                        $root.im.turms.proto.QueryPendingMessagesWithTotalRequest.encode(message.queryPendingMessagesWithTotalRequest, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.updateMessageRequest != null && Object.hasOwnProperty.call(message, "updateMessageRequest"))
                        $root.im.turms.proto.UpdateMessageRequest.encode(message.updateMessageRequest, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.updateTypingStatusRequest != null && Object.hasOwnProperty.call(message, "updateTypingStatusRequest"))
                        $root.im.turms.proto.UpdateTypingStatusRequest.encode(message.updateTypingStatusRequest, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.queryUserGroupInvitationsRequest != null && Object.hasOwnProperty.call(message, "queryUserGroupInvitationsRequest"))
                        $root.im.turms.proto.QueryUserGroupInvitationsRequest.encode(message.queryUserGroupInvitationsRequest, writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();
                    if (message.queryUserProfileRequest != null && Object.hasOwnProperty.call(message, "queryUserProfileRequest"))
                        $root.im.turms.proto.QueryUserProfileRequest.encode(message.queryUserProfileRequest, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();
                    if (message.queryUsersIdsNearbyRequest != null && Object.hasOwnProperty.call(message, "queryUsersIdsNearbyRequest"))
                        $root.im.turms.proto.QueryUsersIdsNearbyRequest.encode(message.queryUsersIdsNearbyRequest, writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();
                    if (message.queryUsersInfosNearbyRequest != null && Object.hasOwnProperty.call(message, "queryUsersInfosNearbyRequest"))
                        $root.im.turms.proto.QueryUsersInfosNearbyRequest.encode(message.queryUsersInfosNearbyRequest, writer.uint32(/* id 103, wireType 2 =*/826).fork()).ldelim();
                    if (message.queryUsersOnlineStatusRequest != null && Object.hasOwnProperty.call(message, "queryUsersOnlineStatusRequest"))
                        $root.im.turms.proto.QueryUsersOnlineStatusRequest.encode(message.queryUsersOnlineStatusRequest, writer.uint32(/* id 104, wireType 2 =*/834).fork()).ldelim();
                    if (message.updateUserLocationRequest != null && Object.hasOwnProperty.call(message, "updateUserLocationRequest"))
                        $root.im.turms.proto.UpdateUserLocationRequest.encode(message.updateUserLocationRequest, writer.uint32(/* id 105, wireType 2 =*/842).fork()).ldelim();
                    if (message.updateUserOnlineStatusRequest != null && Object.hasOwnProperty.call(message, "updateUserOnlineStatusRequest"))
                        $root.im.turms.proto.UpdateUserOnlineStatusRequest.encode(message.updateUserOnlineStatusRequest, writer.uint32(/* id 106, wireType 2 =*/850).fork()).ldelim();
                    if (message.updateUserRequest != null && Object.hasOwnProperty.call(message, "updateUserRequest"))
                        $root.im.turms.proto.UpdateUserRequest.encode(message.updateUserRequest, writer.uint32(/* id 107, wireType 2 =*/858).fork()).ldelim();
                    if (message.createFriendRequestRequest != null && Object.hasOwnProperty.call(message, "createFriendRequestRequest"))
                        $root.im.turms.proto.CreateFriendRequestRequest.encode(message.createFriendRequestRequest, writer.uint32(/* id 200, wireType 2 =*/1602).fork()).ldelim();
                    if (message.createRelationshipGroupRequest != null && Object.hasOwnProperty.call(message, "createRelationshipGroupRequest"))
                        $root.im.turms.proto.CreateRelationshipGroupRequest.encode(message.createRelationshipGroupRequest, writer.uint32(/* id 201, wireType 2 =*/1610).fork()).ldelim();
                    if (message.createRelationshipRequest != null && Object.hasOwnProperty.call(message, "createRelationshipRequest"))
                        $root.im.turms.proto.CreateRelationshipRequest.encode(message.createRelationshipRequest, writer.uint32(/* id 202, wireType 2 =*/1618).fork()).ldelim();
                    if (message.deleteRelationshipGroupRequest != null && Object.hasOwnProperty.call(message, "deleteRelationshipGroupRequest"))
                        $root.im.turms.proto.DeleteRelationshipGroupRequest.encode(message.deleteRelationshipGroupRequest, writer.uint32(/* id 203, wireType 2 =*/1626).fork()).ldelim();
                    if (message.deleteRelationshipRequest != null && Object.hasOwnProperty.call(message, "deleteRelationshipRequest"))
                        $root.im.turms.proto.DeleteRelationshipRequest.encode(message.deleteRelationshipRequest, writer.uint32(/* id 204, wireType 2 =*/1634).fork()).ldelim();
                    if (message.queryFriendRequestsRequest != null && Object.hasOwnProperty.call(message, "queryFriendRequestsRequest"))
                        $root.im.turms.proto.QueryFriendRequestsRequest.encode(message.queryFriendRequestsRequest, writer.uint32(/* id 205, wireType 2 =*/1642).fork()).ldelim();
                    if (message.queryRelatedUsersIdsRequest != null && Object.hasOwnProperty.call(message, "queryRelatedUsersIdsRequest"))
                        $root.im.turms.proto.QueryRelatedUsersIdsRequest.encode(message.queryRelatedUsersIdsRequest, writer.uint32(/* id 206, wireType 2 =*/1650).fork()).ldelim();
                    if (message.queryRelationshipGroupsRequest != null && Object.hasOwnProperty.call(message, "queryRelationshipGroupsRequest"))
                        $root.im.turms.proto.QueryRelationshipGroupsRequest.encode(message.queryRelationshipGroupsRequest, writer.uint32(/* id 207, wireType 2 =*/1658).fork()).ldelim();
                    if (message.queryRelationshipsRequest != null && Object.hasOwnProperty.call(message, "queryRelationshipsRequest"))
                        $root.im.turms.proto.QueryRelationshipsRequest.encode(message.queryRelationshipsRequest, writer.uint32(/* id 208, wireType 2 =*/1666).fork()).ldelim();
                    if (message.updateFriendRequestRequest != null && Object.hasOwnProperty.call(message, "updateFriendRequestRequest"))
                        $root.im.turms.proto.UpdateFriendRequestRequest.encode(message.updateFriendRequestRequest, writer.uint32(/* id 209, wireType 2 =*/1674).fork()).ldelim();
                    if (message.updateRelationshipGroupRequest != null && Object.hasOwnProperty.call(message, "updateRelationshipGroupRequest"))
                        $root.im.turms.proto.UpdateRelationshipGroupRequest.encode(message.updateRelationshipGroupRequest, writer.uint32(/* id 210, wireType 2 =*/1682).fork()).ldelim();
                    if (message.updateRelationshipRequest != null && Object.hasOwnProperty.call(message, "updateRelationshipRequest"))
                        $root.im.turms.proto.UpdateRelationshipRequest.encode(message.updateRelationshipRequest, writer.uint32(/* id 211, wireType 2 =*/1690).fork()).ldelim();
                    if (message.createGroupRequest != null && Object.hasOwnProperty.call(message, "createGroupRequest"))
                        $root.im.turms.proto.CreateGroupRequest.encode(message.createGroupRequest, writer.uint32(/* id 300, wireType 2 =*/2402).fork()).ldelim();
                    if (message.deleteGroupRequest != null && Object.hasOwnProperty.call(message, "deleteGroupRequest"))
                        $root.im.turms.proto.DeleteGroupRequest.encode(message.deleteGroupRequest, writer.uint32(/* id 301, wireType 2 =*/2410).fork()).ldelim();
                    if (message.queryGroupRequest != null && Object.hasOwnProperty.call(message, "queryGroupRequest"))
                        $root.im.turms.proto.QueryGroupRequest.encode(message.queryGroupRequest, writer.uint32(/* id 302, wireType 2 =*/2418).fork()).ldelim();
                    if (message.queryJoinedGroupsIdsRequest != null && Object.hasOwnProperty.call(message, "queryJoinedGroupsIdsRequest"))
                        $root.im.turms.proto.QueryJoinedGroupsIdsRequest.encode(message.queryJoinedGroupsIdsRequest, writer.uint32(/* id 303, wireType 2 =*/2426).fork()).ldelim();
                    if (message.queryJoinedGroupsInfosRequest != null && Object.hasOwnProperty.call(message, "queryJoinedGroupsInfosRequest"))
                        $root.im.turms.proto.QueryJoinedGroupsInfosRequest.encode(message.queryJoinedGroupsInfosRequest, writer.uint32(/* id 304, wireType 2 =*/2434).fork()).ldelim();
                    if (message.updateGroupRequest != null && Object.hasOwnProperty.call(message, "updateGroupRequest"))
                        $root.im.turms.proto.UpdateGroupRequest.encode(message.updateGroupRequest, writer.uint32(/* id 305, wireType 2 =*/2442).fork()).ldelim();
                    if (message.createGroupBlacklistedUserRequest != null && Object.hasOwnProperty.call(message, "createGroupBlacklistedUserRequest"))
                        $root.im.turms.proto.CreateGroupBlacklistedUserRequest.encode(message.createGroupBlacklistedUserRequest, writer.uint32(/* id 400, wireType 2 =*/3202).fork()).ldelim();
                    if (message.deleteGroupBlacklistedUserRequest != null && Object.hasOwnProperty.call(message, "deleteGroupBlacklistedUserRequest"))
                        $root.im.turms.proto.DeleteGroupBlacklistedUserRequest.encode(message.deleteGroupBlacklistedUserRequest, writer.uint32(/* id 401, wireType 2 =*/3210).fork()).ldelim();
                    if (message.queryGroupBlacklistedUsersIdsRequest != null && Object.hasOwnProperty.call(message, "queryGroupBlacklistedUsersIdsRequest"))
                        $root.im.turms.proto.QueryGroupBlacklistedUsersIdsRequest.encode(message.queryGroupBlacklistedUsersIdsRequest, writer.uint32(/* id 402, wireType 2 =*/3218).fork()).ldelim();
                    if (message.queryGroupBlacklistedUsersInfosRequest != null && Object.hasOwnProperty.call(message, "queryGroupBlacklistedUsersInfosRequest"))
                        $root.im.turms.proto.QueryGroupBlacklistedUsersInfosRequest.encode(message.queryGroupBlacklistedUsersInfosRequest, writer.uint32(/* id 403, wireType 2 =*/3226).fork()).ldelim();
                    if (message.checkGroupJoinQuestionsAnswersRequest != null && Object.hasOwnProperty.call(message, "checkGroupJoinQuestionsAnswersRequest"))
                        $root.im.turms.proto.CheckGroupJoinQuestionsAnswersRequest.encode(message.checkGroupJoinQuestionsAnswersRequest, writer.uint32(/* id 500, wireType 2 =*/4002).fork()).ldelim();
                    if (message.createGroupInvitationRequest != null && Object.hasOwnProperty.call(message, "createGroupInvitationRequest"))
                        $root.im.turms.proto.CreateGroupInvitationRequest.encode(message.createGroupInvitationRequest, writer.uint32(/* id 501, wireType 2 =*/4010).fork()).ldelim();
                    if (message.createGroupJoinRequestRequest != null && Object.hasOwnProperty.call(message, "createGroupJoinRequestRequest"))
                        $root.im.turms.proto.CreateGroupJoinRequestRequest.encode(message.createGroupJoinRequestRequest, writer.uint32(/* id 502, wireType 2 =*/4018).fork()).ldelim();
                    if (message.createGroupJoinQuestionRequest != null && Object.hasOwnProperty.call(message, "createGroupJoinQuestionRequest"))
                        $root.im.turms.proto.CreateGroupJoinQuestionRequest.encode(message.createGroupJoinQuestionRequest, writer.uint32(/* id 503, wireType 2 =*/4026).fork()).ldelim();
                    if (message.deleteGroupInvitationRequest != null && Object.hasOwnProperty.call(message, "deleteGroupInvitationRequest"))
                        $root.im.turms.proto.DeleteGroupInvitationRequest.encode(message.deleteGroupInvitationRequest, writer.uint32(/* id 504, wireType 2 =*/4034).fork()).ldelim();
                    if (message.deleteGroupJoinRequestRequest != null && Object.hasOwnProperty.call(message, "deleteGroupJoinRequestRequest"))
                        $root.im.turms.proto.DeleteGroupJoinRequestRequest.encode(message.deleteGroupJoinRequestRequest, writer.uint32(/* id 505, wireType 2 =*/4042).fork()).ldelim();
                    if (message.deleteGroupJoinQuestionRequest != null && Object.hasOwnProperty.call(message, "deleteGroupJoinQuestionRequest"))
                        $root.im.turms.proto.DeleteGroupJoinQuestionRequest.encode(message.deleteGroupJoinQuestionRequest, writer.uint32(/* id 506, wireType 2 =*/4050).fork()).ldelim();
                    if (message.queryGroupInvitationsRequest != null && Object.hasOwnProperty.call(message, "queryGroupInvitationsRequest"))
                        $root.im.turms.proto.QueryGroupInvitationsRequest.encode(message.queryGroupInvitationsRequest, writer.uint32(/* id 507, wireType 2 =*/4058).fork()).ldelim();
                    if (message.queryGroupJoinRequestsRequest != null && Object.hasOwnProperty.call(message, "queryGroupJoinRequestsRequest"))
                        $root.im.turms.proto.QueryGroupJoinRequestsRequest.encode(message.queryGroupJoinRequestsRequest, writer.uint32(/* id 508, wireType 2 =*/4066).fork()).ldelim();
                    if (message.queryGroupJoinQuestionsRequest != null && Object.hasOwnProperty.call(message, "queryGroupJoinQuestionsRequest"))
                        $root.im.turms.proto.QueryGroupJoinQuestionsRequest.encode(message.queryGroupJoinQuestionsRequest, writer.uint32(/* id 509, wireType 2 =*/4074).fork()).ldelim();
                    if (message.updateGroupJoinQuestionRequest != null && Object.hasOwnProperty.call(message, "updateGroupJoinQuestionRequest"))
                        $root.im.turms.proto.UpdateGroupJoinQuestionRequest.encode(message.updateGroupJoinQuestionRequest, writer.uint32(/* id 510, wireType 2 =*/4082).fork()).ldelim();
                    if (message.createGroupMemberRequest != null && Object.hasOwnProperty.call(message, "createGroupMemberRequest"))
                        $root.im.turms.proto.CreateGroupMemberRequest.encode(message.createGroupMemberRequest, writer.uint32(/* id 600, wireType 2 =*/4802).fork()).ldelim();
                    if (message.deleteGroupMemberRequest != null && Object.hasOwnProperty.call(message, "deleteGroupMemberRequest"))
                        $root.im.turms.proto.DeleteGroupMemberRequest.encode(message.deleteGroupMemberRequest, writer.uint32(/* id 601, wireType 2 =*/4810).fork()).ldelim();
                    if (message.queryGroupMembersRequest != null && Object.hasOwnProperty.call(message, "queryGroupMembersRequest"))
                        $root.im.turms.proto.QueryGroupMembersRequest.encode(message.queryGroupMembersRequest, writer.uint32(/* id 602, wireType 2 =*/4818).fork()).ldelim();
                    if (message.updateGroupMemberRequest != null && Object.hasOwnProperty.call(message, "updateGroupMemberRequest"))
                        $root.im.turms.proto.UpdateGroupMemberRequest.encode(message.updateGroupMemberRequest, writer.uint32(/* id 603, wireType 2 =*/4826).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a TurmsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.TurmsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.TurmsRequest} TurmsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TurmsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.TurmsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.requestId = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.ackRequest = $root.im.turms.proto.AckRequest.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.deleteResourceRequest = $root.im.turms.proto.DeleteResourceRequest.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.querySignedGetUrlRequest = $root.im.turms.proto.QuerySignedGetUrlRequest.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.querySignedPutUrlRequest = $root.im.turms.proto.QuerySignedPutUrlRequest.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.createMessageRequest = $root.im.turms.proto.CreateMessageRequest.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.queryMessageStatusesRequest = $root.im.turms.proto.QueryMessageStatusesRequest.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.queryMessagesRequest = $root.im.turms.proto.QueryMessagesRequest.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.queryPendingMessagesWithTotalRequest = $root.im.turms.proto.QueryPendingMessagesWithTotalRequest.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.updateMessageRequest = $root.im.turms.proto.UpdateMessageRequest.decode(reader, reader.uint32());
                            break;
                        case 11:
                            message.updateTypingStatusRequest = $root.im.turms.proto.UpdateTypingStatusRequest.decode(reader, reader.uint32());
                            break;
                        case 100:
                            message.queryUserGroupInvitationsRequest = $root.im.turms.proto.QueryUserGroupInvitationsRequest.decode(reader, reader.uint32());
                            break;
                        case 101:
                            message.queryUserProfileRequest = $root.im.turms.proto.QueryUserProfileRequest.decode(reader, reader.uint32());
                            break;
                        case 102:
                            message.queryUsersIdsNearbyRequest = $root.im.turms.proto.QueryUsersIdsNearbyRequest.decode(reader, reader.uint32());
                            break;
                        case 103:
                            message.queryUsersInfosNearbyRequest = $root.im.turms.proto.QueryUsersInfosNearbyRequest.decode(reader, reader.uint32());
                            break;
                        case 104:
                            message.queryUsersOnlineStatusRequest = $root.im.turms.proto.QueryUsersOnlineStatusRequest.decode(reader, reader.uint32());
                            break;
                        case 105:
                            message.updateUserLocationRequest = $root.im.turms.proto.UpdateUserLocationRequest.decode(reader, reader.uint32());
                            break;
                        case 106:
                            message.updateUserOnlineStatusRequest = $root.im.turms.proto.UpdateUserOnlineStatusRequest.decode(reader, reader.uint32());
                            break;
                        case 107:
                            message.updateUserRequest = $root.im.turms.proto.UpdateUserRequest.decode(reader, reader.uint32());
                            break;
                        case 200:
                            message.createFriendRequestRequest = $root.im.turms.proto.CreateFriendRequestRequest.decode(reader, reader.uint32());
                            break;
                        case 201:
                            message.createRelationshipGroupRequest = $root.im.turms.proto.CreateRelationshipGroupRequest.decode(reader, reader.uint32());
                            break;
                        case 202:
                            message.createRelationshipRequest = $root.im.turms.proto.CreateRelationshipRequest.decode(reader, reader.uint32());
                            break;
                        case 203:
                            message.deleteRelationshipGroupRequest = $root.im.turms.proto.DeleteRelationshipGroupRequest.decode(reader, reader.uint32());
                            break;
                        case 204:
                            message.deleteRelationshipRequest = $root.im.turms.proto.DeleteRelationshipRequest.decode(reader, reader.uint32());
                            break;
                        case 205:
                            message.queryFriendRequestsRequest = $root.im.turms.proto.QueryFriendRequestsRequest.decode(reader, reader.uint32());
                            break;
                        case 206:
                            message.queryRelatedUsersIdsRequest = $root.im.turms.proto.QueryRelatedUsersIdsRequest.decode(reader, reader.uint32());
                            break;
                        case 207:
                            message.queryRelationshipGroupsRequest = $root.im.turms.proto.QueryRelationshipGroupsRequest.decode(reader, reader.uint32());
                            break;
                        case 208:
                            message.queryRelationshipsRequest = $root.im.turms.proto.QueryRelationshipsRequest.decode(reader, reader.uint32());
                            break;
                        case 209:
                            message.updateFriendRequestRequest = $root.im.turms.proto.UpdateFriendRequestRequest.decode(reader, reader.uint32());
                            break;
                        case 210:
                            message.updateRelationshipGroupRequest = $root.im.turms.proto.UpdateRelationshipGroupRequest.decode(reader, reader.uint32());
                            break;
                        case 211:
                            message.updateRelationshipRequest = $root.im.turms.proto.UpdateRelationshipRequest.decode(reader, reader.uint32());
                            break;
                        case 300:
                            message.createGroupRequest = $root.im.turms.proto.CreateGroupRequest.decode(reader, reader.uint32());
                            break;
                        case 301:
                            message.deleteGroupRequest = $root.im.turms.proto.DeleteGroupRequest.decode(reader, reader.uint32());
                            break;
                        case 302:
                            message.queryGroupRequest = $root.im.turms.proto.QueryGroupRequest.decode(reader, reader.uint32());
                            break;
                        case 303:
                            message.queryJoinedGroupsIdsRequest = $root.im.turms.proto.QueryJoinedGroupsIdsRequest.decode(reader, reader.uint32());
                            break;
                        case 304:
                            message.queryJoinedGroupsInfosRequest = $root.im.turms.proto.QueryJoinedGroupsInfosRequest.decode(reader, reader.uint32());
                            break;
                        case 305:
                            message.updateGroupRequest = $root.im.turms.proto.UpdateGroupRequest.decode(reader, reader.uint32());
                            break;
                        case 400:
                            message.createGroupBlacklistedUserRequest = $root.im.turms.proto.CreateGroupBlacklistedUserRequest.decode(reader, reader.uint32());
                            break;
                        case 401:
                            message.deleteGroupBlacklistedUserRequest = $root.im.turms.proto.DeleteGroupBlacklistedUserRequest.decode(reader, reader.uint32());
                            break;
                        case 402:
                            message.queryGroupBlacklistedUsersIdsRequest = $root.im.turms.proto.QueryGroupBlacklistedUsersIdsRequest.decode(reader, reader.uint32());
                            break;
                        case 403:
                            message.queryGroupBlacklistedUsersInfosRequest = $root.im.turms.proto.QueryGroupBlacklistedUsersInfosRequest.decode(reader, reader.uint32());
                            break;
                        case 500:
                            message.checkGroupJoinQuestionsAnswersRequest = $root.im.turms.proto.CheckGroupJoinQuestionsAnswersRequest.decode(reader, reader.uint32());
                            break;
                        case 501:
                            message.createGroupInvitationRequest = $root.im.turms.proto.CreateGroupInvitationRequest.decode(reader, reader.uint32());
                            break;
                        case 502:
                            message.createGroupJoinRequestRequest = $root.im.turms.proto.CreateGroupJoinRequestRequest.decode(reader, reader.uint32());
                            break;
                        case 503:
                            message.createGroupJoinQuestionRequest = $root.im.turms.proto.CreateGroupJoinQuestionRequest.decode(reader, reader.uint32());
                            break;
                        case 504:
                            message.deleteGroupInvitationRequest = $root.im.turms.proto.DeleteGroupInvitationRequest.decode(reader, reader.uint32());
                            break;
                        case 505:
                            message.deleteGroupJoinRequestRequest = $root.im.turms.proto.DeleteGroupJoinRequestRequest.decode(reader, reader.uint32());
                            break;
                        case 506:
                            message.deleteGroupJoinQuestionRequest = $root.im.turms.proto.DeleteGroupJoinQuestionRequest.decode(reader, reader.uint32());
                            break;
                        case 507:
                            message.queryGroupInvitationsRequest = $root.im.turms.proto.QueryGroupInvitationsRequest.decode(reader, reader.uint32());
                            break;
                        case 508:
                            message.queryGroupJoinRequestsRequest = $root.im.turms.proto.QueryGroupJoinRequestsRequest.decode(reader, reader.uint32());
                            break;
                        case 509:
                            message.queryGroupJoinQuestionsRequest = $root.im.turms.proto.QueryGroupJoinQuestionsRequest.decode(reader, reader.uint32());
                            break;
                        case 510:
                            message.updateGroupJoinQuestionRequest = $root.im.turms.proto.UpdateGroupJoinQuestionRequest.decode(reader, reader.uint32());
                            break;
                        case 600:
                            message.createGroupMemberRequest = $root.im.turms.proto.CreateGroupMemberRequest.decode(reader, reader.uint32());
                            break;
                        case 601:
                            message.deleteGroupMemberRequest = $root.im.turms.proto.DeleteGroupMemberRequest.decode(reader, reader.uint32());
                            break;
                        case 602:
                            message.queryGroupMembersRequest = $root.im.turms.proto.QueryGroupMembersRequest.decode(reader, reader.uint32());
                            break;
                        case 603:
                            message.updateGroupMemberRequest = $root.im.turms.proto.UpdateGroupMemberRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return TurmsRequest;
            })();

            proto.QueryUserGroupInvitationsRequest = (function() {

                /**
                 * Properties of a QueryUserGroupInvitationsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryUserGroupInvitationsRequest
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryUserGroupInvitationsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryUserGroupInvitationsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryUserGroupInvitationsRequest.
                 * @implements IQueryUserGroupInvitationsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryUserGroupInvitationsRequest=} [properties] Properties to set
                 */
                function QueryUserGroupInvitationsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryUserGroupInvitationsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryUserGroupInvitationsRequest
                 * @instance
                 */
                QueryUserGroupInvitationsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryUserGroupInvitationsRequest message. Does not implicitly {@link im.turms.proto.QueryUserGroupInvitationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryUserGroupInvitationsRequest
                 * @static
                 * @param {im.turms.proto.IQueryUserGroupInvitationsRequest} message QueryUserGroupInvitationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryUserGroupInvitationsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryUserGroupInvitationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryUserGroupInvitationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryUserGroupInvitationsRequest} QueryUserGroupInvitationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryUserGroupInvitationsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryUserGroupInvitationsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryUserGroupInvitationsRequest;
            })();

            proto.QueryUserProfileRequest = (function() {

                /**
                 * Properties of a QueryUserProfileRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryUserProfileRequest
                 * @property {string|null} [userId] QueryUserProfileRequest userId
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryUserProfileRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryUserProfileRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryUserProfileRequest.
                 * @implements IQueryUserProfileRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryUserProfileRequest=} [properties] Properties to set
                 */
                function QueryUserProfileRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryUserProfileRequest userId.
                 * @member {string} userId
                 * @memberof im.turms.proto.QueryUserProfileRequest
                 * @instance
                 */
                QueryUserProfileRequest.prototype.userId = "0";

                /**
                 * QueryUserProfileRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryUserProfileRequest
                 * @instance
                 */
                QueryUserProfileRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryUserProfileRequest message. Does not implicitly {@link im.turms.proto.QueryUserProfileRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryUserProfileRequest
                 * @static
                 * @param {im.turms.proto.IQueryUserProfileRequest} message QueryUserProfileRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryUserProfileRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryUserProfileRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryUserProfileRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryUserProfileRequest} QueryUserProfileRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryUserProfileRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryUserProfileRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.userId = reader.int64().toString();
                            break;
                        case 2:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryUserProfileRequest;
            })();

            proto.QueryUsersIdsNearbyRequest = (function() {

                /**
                 * Properties of a QueryUsersIdsNearbyRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryUsersIdsNearbyRequest
                 * @property {number|null} [latitude] QueryUsersIdsNearbyRequest latitude
                 * @property {number|null} [longitude] QueryUsersIdsNearbyRequest longitude
                 * @property {google.protobuf.IFloatValue|null} [distance] QueryUsersIdsNearbyRequest distance
                 * @property {google.protobuf.IInt32Value|null} [maxNumber] QueryUsersIdsNearbyRequest maxNumber
                 */

                /**
                 * Constructs a new QueryUsersIdsNearbyRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryUsersIdsNearbyRequest.
                 * @implements IQueryUsersIdsNearbyRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryUsersIdsNearbyRequest=} [properties] Properties to set
                 */
                function QueryUsersIdsNearbyRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryUsersIdsNearbyRequest latitude.
                 * @member {number} latitude
                 * @memberof im.turms.proto.QueryUsersIdsNearbyRequest
                 * @instance
                 */
                QueryUsersIdsNearbyRequest.prototype.latitude = 0;

                /**
                 * QueryUsersIdsNearbyRequest longitude.
                 * @member {number} longitude
                 * @memberof im.turms.proto.QueryUsersIdsNearbyRequest
                 * @instance
                 */
                QueryUsersIdsNearbyRequest.prototype.longitude = 0;

                /**
                 * QueryUsersIdsNearbyRequest distance.
                 * @member {google.protobuf.IFloatValue|null|undefined} distance
                 * @memberof im.turms.proto.QueryUsersIdsNearbyRequest
                 * @instance
                 */
                QueryUsersIdsNearbyRequest.prototype.distance = null;

                /**
                 * QueryUsersIdsNearbyRequest maxNumber.
                 * @member {google.protobuf.IInt32Value|null|undefined} maxNumber
                 * @memberof im.turms.proto.QueryUsersIdsNearbyRequest
                 * @instance
                 */
                QueryUsersIdsNearbyRequest.prototype.maxNumber = null;

                /**
                 * Encodes the specified QueryUsersIdsNearbyRequest message. Does not implicitly {@link im.turms.proto.QueryUsersIdsNearbyRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryUsersIdsNearbyRequest
                 * @static
                 * @param {im.turms.proto.IQueryUsersIdsNearbyRequest} message QueryUsersIdsNearbyRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryUsersIdsNearbyRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.latitude != null && Object.hasOwnProperty.call(message, "latitude"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.latitude);
                    if (message.longitude != null && Object.hasOwnProperty.call(message, "longitude"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.longitude);
                    if (message.distance != null && Object.hasOwnProperty.call(message, "distance"))
                        $root.google.protobuf.FloatValue.encode(message.distance, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.maxNumber != null && Object.hasOwnProperty.call(message, "maxNumber"))
                        $root.google.protobuf.Int32Value.encode(message.maxNumber, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryUsersIdsNearbyRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryUsersIdsNearbyRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryUsersIdsNearbyRequest} QueryUsersIdsNearbyRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryUsersIdsNearbyRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryUsersIdsNearbyRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.latitude = reader.float();
                            break;
                        case 2:
                            message.longitude = reader.float();
                            break;
                        case 3:
                            message.distance = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.maxNumber = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryUsersIdsNearbyRequest;
            })();

            proto.QueryUsersInfosNearbyRequest = (function() {

                /**
                 * Properties of a QueryUsersInfosNearbyRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryUsersInfosNearbyRequest
                 * @property {number|null} [latitude] QueryUsersInfosNearbyRequest latitude
                 * @property {number|null} [longitude] QueryUsersInfosNearbyRequest longitude
                 * @property {google.protobuf.IFloatValue|null} [distance] QueryUsersInfosNearbyRequest distance
                 * @property {google.protobuf.IUInt32Value|null} [maxNumber] QueryUsersInfosNearbyRequest maxNumber
                 */

                /**
                 * Constructs a new QueryUsersInfosNearbyRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryUsersInfosNearbyRequest.
                 * @implements IQueryUsersInfosNearbyRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryUsersInfosNearbyRequest=} [properties] Properties to set
                 */
                function QueryUsersInfosNearbyRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryUsersInfosNearbyRequest latitude.
                 * @member {number} latitude
                 * @memberof im.turms.proto.QueryUsersInfosNearbyRequest
                 * @instance
                 */
                QueryUsersInfosNearbyRequest.prototype.latitude = 0;

                /**
                 * QueryUsersInfosNearbyRequest longitude.
                 * @member {number} longitude
                 * @memberof im.turms.proto.QueryUsersInfosNearbyRequest
                 * @instance
                 */
                QueryUsersInfosNearbyRequest.prototype.longitude = 0;

                /**
                 * QueryUsersInfosNearbyRequest distance.
                 * @member {google.protobuf.IFloatValue|null|undefined} distance
                 * @memberof im.turms.proto.QueryUsersInfosNearbyRequest
                 * @instance
                 */
                QueryUsersInfosNearbyRequest.prototype.distance = null;

                /**
                 * QueryUsersInfosNearbyRequest maxNumber.
                 * @member {google.protobuf.IUInt32Value|null|undefined} maxNumber
                 * @memberof im.turms.proto.QueryUsersInfosNearbyRequest
                 * @instance
                 */
                QueryUsersInfosNearbyRequest.prototype.maxNumber = null;

                /**
                 * Encodes the specified QueryUsersInfosNearbyRequest message. Does not implicitly {@link im.turms.proto.QueryUsersInfosNearbyRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryUsersInfosNearbyRequest
                 * @static
                 * @param {im.turms.proto.IQueryUsersInfosNearbyRequest} message QueryUsersInfosNearbyRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryUsersInfosNearbyRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.latitude != null && Object.hasOwnProperty.call(message, "latitude"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.latitude);
                    if (message.longitude != null && Object.hasOwnProperty.call(message, "longitude"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.longitude);
                    if (message.distance != null && Object.hasOwnProperty.call(message, "distance"))
                        $root.google.protobuf.FloatValue.encode(message.distance, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.maxNumber != null && Object.hasOwnProperty.call(message, "maxNumber"))
                        $root.google.protobuf.UInt32Value.encode(message.maxNumber, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryUsersInfosNearbyRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryUsersInfosNearbyRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryUsersInfosNearbyRequest} QueryUsersInfosNearbyRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryUsersInfosNearbyRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryUsersInfosNearbyRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.latitude = reader.float();
                            break;
                        case 2:
                            message.longitude = reader.float();
                            break;
                        case 3:
                            message.distance = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.maxNumber = $root.google.protobuf.UInt32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryUsersInfosNearbyRequest;
            })();

            proto.QueryUsersOnlineStatusRequest = (function() {

                /**
                 * Properties of a QueryUsersOnlineStatusRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryUsersOnlineStatusRequest
                 * @property {Array.<string>|null} [usersIds] QueryUsersOnlineStatusRequest usersIds
                 */

                /**
                 * Constructs a new QueryUsersOnlineStatusRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryUsersOnlineStatusRequest.
                 * @implements IQueryUsersOnlineStatusRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryUsersOnlineStatusRequest=} [properties] Properties to set
                 */
                function QueryUsersOnlineStatusRequest(properties) {
                    this.usersIds = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryUsersOnlineStatusRequest usersIds.
                 * @member {Array.<string>} usersIds
                 * @memberof im.turms.proto.QueryUsersOnlineStatusRequest
                 * @instance
                 */
                QueryUsersOnlineStatusRequest.prototype.usersIds = $util.emptyArray;

                /**
                 * Encodes the specified QueryUsersOnlineStatusRequest message. Does not implicitly {@link im.turms.proto.QueryUsersOnlineStatusRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryUsersOnlineStatusRequest
                 * @static
                 * @param {im.turms.proto.IQueryUsersOnlineStatusRequest} message QueryUsersOnlineStatusRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryUsersOnlineStatusRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.usersIds != null && message.usersIds.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.usersIds.length; ++i)
                            writer.int64(message.usersIds[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Decodes a QueryUsersOnlineStatusRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryUsersOnlineStatusRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryUsersOnlineStatusRequest} QueryUsersOnlineStatusRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryUsersOnlineStatusRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryUsersOnlineStatusRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.usersIds && message.usersIds.length))
                                message.usersIds = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.usersIds.push(reader.int64().toString());
                            } else
                                message.usersIds.push(reader.int64().toString());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryUsersOnlineStatusRequest;
            })();

            proto.CreateFriendRequestRequest = (function() {

                /**
                 * Properties of a CreateFriendRequestRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateFriendRequestRequest
                 * @property {string|null} [recipientId] CreateFriendRequestRequest recipientId
                 * @property {string|null} [content] CreateFriendRequestRequest content
                 */

                /**
                 * Constructs a new CreateFriendRequestRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateFriendRequestRequest.
                 * @implements ICreateFriendRequestRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateFriendRequestRequest=} [properties] Properties to set
                 */
                function CreateFriendRequestRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateFriendRequestRequest recipientId.
                 * @member {string} recipientId
                 * @memberof im.turms.proto.CreateFriendRequestRequest
                 * @instance
                 */
                CreateFriendRequestRequest.prototype.recipientId = "0";

                /**
                 * CreateFriendRequestRequest content.
                 * @member {string} content
                 * @memberof im.turms.proto.CreateFriendRequestRequest
                 * @instance
                 */
                CreateFriendRequestRequest.prototype.content = "";

                /**
                 * Encodes the specified CreateFriendRequestRequest message. Does not implicitly {@link im.turms.proto.CreateFriendRequestRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateFriendRequestRequest
                 * @static
                 * @param {im.turms.proto.ICreateFriendRequestRequest} message CreateFriendRequestRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateFriendRequestRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.recipientId != null && Object.hasOwnProperty.call(message, "recipientId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.recipientId);
                    if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
                    return writer;
                };

                /**
                 * Decodes a CreateFriendRequestRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateFriendRequestRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateFriendRequestRequest} CreateFriendRequestRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateFriendRequestRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateFriendRequestRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.recipientId = reader.int64().toString();
                            break;
                        case 2:
                            message.content = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateFriendRequestRequest;
            })();

            proto.CreateRelationshipGroupRequest = (function() {

                /**
                 * Properties of a CreateRelationshipGroupRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateRelationshipGroupRequest
                 * @property {string|null} [name] CreateRelationshipGroupRequest name
                 */

                /**
                 * Constructs a new CreateRelationshipGroupRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateRelationshipGroupRequest.
                 * @implements ICreateRelationshipGroupRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateRelationshipGroupRequest=} [properties] Properties to set
                 */
                function CreateRelationshipGroupRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateRelationshipGroupRequest name.
                 * @member {string} name
                 * @memberof im.turms.proto.CreateRelationshipGroupRequest
                 * @instance
                 */
                CreateRelationshipGroupRequest.prototype.name = "";

                /**
                 * Encodes the specified CreateRelationshipGroupRequest message. Does not implicitly {@link im.turms.proto.CreateRelationshipGroupRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateRelationshipGroupRequest
                 * @static
                 * @param {im.turms.proto.ICreateRelationshipGroupRequest} message CreateRelationshipGroupRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateRelationshipGroupRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };

                /**
                 * Decodes a CreateRelationshipGroupRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateRelationshipGroupRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateRelationshipGroupRequest} CreateRelationshipGroupRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateRelationshipGroupRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateRelationshipGroupRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateRelationshipGroupRequest;
            })();

            proto.CreateRelationshipRequest = (function() {

                /**
                 * Properties of a CreateRelationshipRequest.
                 * @memberof im.turms.proto
                 * @interface ICreateRelationshipRequest
                 * @property {string|null} [userId] CreateRelationshipRequest userId
                 * @property {boolean|null} [isBlocked] CreateRelationshipRequest isBlocked
                 * @property {google.protobuf.IInt32Value|null} [groupIndex] CreateRelationshipRequest groupIndex
                 */

                /**
                 * Constructs a new CreateRelationshipRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a CreateRelationshipRequest.
                 * @implements ICreateRelationshipRequest
                 * @constructor
                 * @param {im.turms.proto.ICreateRelationshipRequest=} [properties] Properties to set
                 */
                function CreateRelationshipRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CreateRelationshipRequest userId.
                 * @member {string} userId
                 * @memberof im.turms.proto.CreateRelationshipRequest
                 * @instance
                 */
                CreateRelationshipRequest.prototype.userId = "0";

                /**
                 * CreateRelationshipRequest isBlocked.
                 * @member {boolean} isBlocked
                 * @memberof im.turms.proto.CreateRelationshipRequest
                 * @instance
                 */
                CreateRelationshipRequest.prototype.isBlocked = false;

                /**
                 * CreateRelationshipRequest groupIndex.
                 * @member {google.protobuf.IInt32Value|null|undefined} groupIndex
                 * @memberof im.turms.proto.CreateRelationshipRequest
                 * @instance
                 */
                CreateRelationshipRequest.prototype.groupIndex = null;

                /**
                 * Encodes the specified CreateRelationshipRequest message. Does not implicitly {@link im.turms.proto.CreateRelationshipRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.CreateRelationshipRequest
                 * @static
                 * @param {im.turms.proto.ICreateRelationshipRequest} message CreateRelationshipRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CreateRelationshipRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                    if (message.isBlocked != null && Object.hasOwnProperty.call(message, "isBlocked"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isBlocked);
                    if (message.groupIndex != null && Object.hasOwnProperty.call(message, "groupIndex"))
                        $root.google.protobuf.Int32Value.encode(message.groupIndex, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a CreateRelationshipRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.CreateRelationshipRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.CreateRelationshipRequest} CreateRelationshipRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CreateRelationshipRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.CreateRelationshipRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.userId = reader.int64().toString();
                            break;
                        case 2:
                            message.isBlocked = reader.bool();
                            break;
                        case 3:
                            message.groupIndex = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return CreateRelationshipRequest;
            })();

            proto.DeleteRelationshipGroupMemberRequest = (function() {

                /**
                 * Properties of a DeleteRelationshipGroupMemberRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteRelationshipGroupMemberRequest
                 * @property {string|null} [userId] DeleteRelationshipGroupMemberRequest userId
                 * @property {number|null} [groupIndex] DeleteRelationshipGroupMemberRequest groupIndex
                 * @property {google.protobuf.IInt32Value|null} [targetGroupIndex] DeleteRelationshipGroupMemberRequest targetGroupIndex
                 */

                /**
                 * Constructs a new DeleteRelationshipGroupMemberRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteRelationshipGroupMemberRequest.
                 * @implements IDeleteRelationshipGroupMemberRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteRelationshipGroupMemberRequest=} [properties] Properties to set
                 */
                function DeleteRelationshipGroupMemberRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteRelationshipGroupMemberRequest userId.
                 * @member {string} userId
                 * @memberof im.turms.proto.DeleteRelationshipGroupMemberRequest
                 * @instance
                 */
                DeleteRelationshipGroupMemberRequest.prototype.userId = "0";

                /**
                 * DeleteRelationshipGroupMemberRequest groupIndex.
                 * @member {number} groupIndex
                 * @memberof im.turms.proto.DeleteRelationshipGroupMemberRequest
                 * @instance
                 */
                DeleteRelationshipGroupMemberRequest.prototype.groupIndex = 0;

                /**
                 * DeleteRelationshipGroupMemberRequest targetGroupIndex.
                 * @member {google.protobuf.IInt32Value|null|undefined} targetGroupIndex
                 * @memberof im.turms.proto.DeleteRelationshipGroupMemberRequest
                 * @instance
                 */
                DeleteRelationshipGroupMemberRequest.prototype.targetGroupIndex = null;

                /**
                 * Encodes the specified DeleteRelationshipGroupMemberRequest message. Does not implicitly {@link im.turms.proto.DeleteRelationshipGroupMemberRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteRelationshipGroupMemberRequest
                 * @static
                 * @param {im.turms.proto.IDeleteRelationshipGroupMemberRequest} message DeleteRelationshipGroupMemberRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteRelationshipGroupMemberRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                    if (message.groupIndex != null && Object.hasOwnProperty.call(message, "groupIndex"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.groupIndex);
                    if (message.targetGroupIndex != null && Object.hasOwnProperty.call(message, "targetGroupIndex"))
                        $root.google.protobuf.Int32Value.encode(message.targetGroupIndex, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a DeleteRelationshipGroupMemberRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteRelationshipGroupMemberRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteRelationshipGroupMemberRequest} DeleteRelationshipGroupMemberRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteRelationshipGroupMemberRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteRelationshipGroupMemberRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.userId = reader.int64().toString();
                            break;
                        case 2:
                            message.groupIndex = reader.int32();
                            break;
                        case 3:
                            message.targetGroupIndex = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteRelationshipGroupMemberRequest;
            })();

            proto.DeleteRelationshipGroupRequest = (function() {

                /**
                 * Properties of a DeleteRelationshipGroupRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteRelationshipGroupRequest
                 * @property {number|null} [groupIndex] DeleteRelationshipGroupRequest groupIndex
                 * @property {google.protobuf.IInt32Value|null} [targetGroupIndex] DeleteRelationshipGroupRequest targetGroupIndex
                 */

                /**
                 * Constructs a new DeleteRelationshipGroupRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteRelationshipGroupRequest.
                 * @implements IDeleteRelationshipGroupRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteRelationshipGroupRequest=} [properties] Properties to set
                 */
                function DeleteRelationshipGroupRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteRelationshipGroupRequest groupIndex.
                 * @member {number} groupIndex
                 * @memberof im.turms.proto.DeleteRelationshipGroupRequest
                 * @instance
                 */
                DeleteRelationshipGroupRequest.prototype.groupIndex = 0;

                /**
                 * DeleteRelationshipGroupRequest targetGroupIndex.
                 * @member {google.protobuf.IInt32Value|null|undefined} targetGroupIndex
                 * @memberof im.turms.proto.DeleteRelationshipGroupRequest
                 * @instance
                 */
                DeleteRelationshipGroupRequest.prototype.targetGroupIndex = null;

                /**
                 * Encodes the specified DeleteRelationshipGroupRequest message. Does not implicitly {@link im.turms.proto.DeleteRelationshipGroupRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteRelationshipGroupRequest
                 * @static
                 * @param {im.turms.proto.IDeleteRelationshipGroupRequest} message DeleteRelationshipGroupRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteRelationshipGroupRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupIndex != null && Object.hasOwnProperty.call(message, "groupIndex"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.groupIndex);
                    if (message.targetGroupIndex != null && Object.hasOwnProperty.call(message, "targetGroupIndex"))
                        $root.google.protobuf.Int32Value.encode(message.targetGroupIndex, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a DeleteRelationshipGroupRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteRelationshipGroupRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteRelationshipGroupRequest} DeleteRelationshipGroupRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteRelationshipGroupRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteRelationshipGroupRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupIndex = reader.int32();
                            break;
                        case 2:
                            message.targetGroupIndex = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteRelationshipGroupRequest;
            })();

            proto.DeleteRelationshipRequest = (function() {

                /**
                 * Properties of a DeleteRelationshipRequest.
                 * @memberof im.turms.proto
                 * @interface IDeleteRelationshipRequest
                 * @property {string|null} [relatedUserId] DeleteRelationshipRequest relatedUserId
                 * @property {google.protobuf.IInt32Value|null} [groupIndex] DeleteRelationshipRequest groupIndex
                 * @property {google.protobuf.IInt32Value|null} [targetGroupIndex] DeleteRelationshipRequest targetGroupIndex
                 */

                /**
                 * Constructs a new DeleteRelationshipRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a DeleteRelationshipRequest.
                 * @implements IDeleteRelationshipRequest
                 * @constructor
                 * @param {im.turms.proto.IDeleteRelationshipRequest=} [properties] Properties to set
                 */
                function DeleteRelationshipRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeleteRelationshipRequest relatedUserId.
                 * @member {string} relatedUserId
                 * @memberof im.turms.proto.DeleteRelationshipRequest
                 * @instance
                 */
                DeleteRelationshipRequest.prototype.relatedUserId = "0";

                /**
                 * DeleteRelationshipRequest groupIndex.
                 * @member {google.protobuf.IInt32Value|null|undefined} groupIndex
                 * @memberof im.turms.proto.DeleteRelationshipRequest
                 * @instance
                 */
                DeleteRelationshipRequest.prototype.groupIndex = null;

                /**
                 * DeleteRelationshipRequest targetGroupIndex.
                 * @member {google.protobuf.IInt32Value|null|undefined} targetGroupIndex
                 * @memberof im.turms.proto.DeleteRelationshipRequest
                 * @instance
                 */
                DeleteRelationshipRequest.prototype.targetGroupIndex = null;

                /**
                 * Encodes the specified DeleteRelationshipRequest message. Does not implicitly {@link im.turms.proto.DeleteRelationshipRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.DeleteRelationshipRequest
                 * @static
                 * @param {im.turms.proto.IDeleteRelationshipRequest} message DeleteRelationshipRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteRelationshipRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.relatedUserId != null && Object.hasOwnProperty.call(message, "relatedUserId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.relatedUserId);
                    if (message.groupIndex != null && Object.hasOwnProperty.call(message, "groupIndex"))
                        $root.google.protobuf.Int32Value.encode(message.groupIndex, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.targetGroupIndex != null && Object.hasOwnProperty.call(message, "targetGroupIndex"))
                        $root.google.protobuf.Int32Value.encode(message.targetGroupIndex, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a DeleteRelationshipRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.DeleteRelationshipRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.DeleteRelationshipRequest} DeleteRelationshipRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteRelationshipRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.DeleteRelationshipRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.relatedUserId = reader.int64().toString();
                            break;
                        case 2:
                            message.groupIndex = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.targetGroupIndex = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return DeleteRelationshipRequest;
            })();

            proto.QueryFriendRequestsRequest = (function() {

                /**
                 * Properties of a QueryFriendRequestsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryFriendRequestsRequest
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryFriendRequestsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryFriendRequestsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryFriendRequestsRequest.
                 * @implements IQueryFriendRequestsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryFriendRequestsRequest=} [properties] Properties to set
                 */
                function QueryFriendRequestsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryFriendRequestsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryFriendRequestsRequest
                 * @instance
                 */
                QueryFriendRequestsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryFriendRequestsRequest message. Does not implicitly {@link im.turms.proto.QueryFriendRequestsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryFriendRequestsRequest
                 * @static
                 * @param {im.turms.proto.IQueryFriendRequestsRequest} message QueryFriendRequestsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryFriendRequestsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryFriendRequestsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryFriendRequestsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryFriendRequestsRequest} QueryFriendRequestsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryFriendRequestsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryFriendRequestsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryFriendRequestsRequest;
            })();

            proto.QueryRelatedUsersIdsRequest = (function() {

                /**
                 * Properties of a QueryRelatedUsersIdsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryRelatedUsersIdsRequest
                 * @property {google.protobuf.IBoolValue|null} [isBlocked] QueryRelatedUsersIdsRequest isBlocked
                 * @property {google.protobuf.IInt32Value|null} [groupIndex] QueryRelatedUsersIdsRequest groupIndex
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryRelatedUsersIdsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryRelatedUsersIdsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryRelatedUsersIdsRequest.
                 * @implements IQueryRelatedUsersIdsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryRelatedUsersIdsRequest=} [properties] Properties to set
                 */
                function QueryRelatedUsersIdsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryRelatedUsersIdsRequest isBlocked.
                 * @member {google.protobuf.IBoolValue|null|undefined} isBlocked
                 * @memberof im.turms.proto.QueryRelatedUsersIdsRequest
                 * @instance
                 */
                QueryRelatedUsersIdsRequest.prototype.isBlocked = null;

                /**
                 * QueryRelatedUsersIdsRequest groupIndex.
                 * @member {google.protobuf.IInt32Value|null|undefined} groupIndex
                 * @memberof im.turms.proto.QueryRelatedUsersIdsRequest
                 * @instance
                 */
                QueryRelatedUsersIdsRequest.prototype.groupIndex = null;

                /**
                 * QueryRelatedUsersIdsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryRelatedUsersIdsRequest
                 * @instance
                 */
                QueryRelatedUsersIdsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryRelatedUsersIdsRequest message. Does not implicitly {@link im.turms.proto.QueryRelatedUsersIdsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryRelatedUsersIdsRequest
                 * @static
                 * @param {im.turms.proto.IQueryRelatedUsersIdsRequest} message QueryRelatedUsersIdsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRelatedUsersIdsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.isBlocked != null && Object.hasOwnProperty.call(message, "isBlocked"))
                        $root.google.protobuf.BoolValue.encode(message.isBlocked, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.groupIndex != null && Object.hasOwnProperty.call(message, "groupIndex"))
                        $root.google.protobuf.Int32Value.encode(message.groupIndex, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryRelatedUsersIdsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryRelatedUsersIdsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryRelatedUsersIdsRequest} QueryRelatedUsersIdsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRelatedUsersIdsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryRelatedUsersIdsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.isBlocked = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.groupIndex = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryRelatedUsersIdsRequest;
            })();

            proto.QueryRelationshipGroupsRequest = (function() {

                /**
                 * Properties of a QueryRelationshipGroupsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryRelationshipGroupsRequest
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryRelationshipGroupsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryRelationshipGroupsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryRelationshipGroupsRequest.
                 * @implements IQueryRelationshipGroupsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryRelationshipGroupsRequest=} [properties] Properties to set
                 */
                function QueryRelationshipGroupsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryRelationshipGroupsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryRelationshipGroupsRequest
                 * @instance
                 */
                QueryRelationshipGroupsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryRelationshipGroupsRequest message. Does not implicitly {@link im.turms.proto.QueryRelationshipGroupsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryRelationshipGroupsRequest
                 * @static
                 * @param {im.turms.proto.IQueryRelationshipGroupsRequest} message QueryRelationshipGroupsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRelationshipGroupsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryRelationshipGroupsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryRelationshipGroupsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryRelationshipGroupsRequest} QueryRelationshipGroupsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRelationshipGroupsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryRelationshipGroupsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryRelationshipGroupsRequest;
            })();

            proto.QueryRelationshipsRequest = (function() {

                /**
                 * Properties of a QueryRelationshipsRequest.
                 * @memberof im.turms.proto
                 * @interface IQueryRelationshipsRequest
                 * @property {Array.<string>|null} [relatedUsersIds] QueryRelationshipsRequest relatedUsersIds
                 * @property {google.protobuf.IBoolValue|null} [isBlocked] QueryRelationshipsRequest isBlocked
                 * @property {google.protobuf.IInt32Value|null} [groupIndex] QueryRelationshipsRequest groupIndex
                 * @property {google.protobuf.IInt64Value|null} [lastUpdatedDate] QueryRelationshipsRequest lastUpdatedDate
                 */

                /**
                 * Constructs a new QueryRelationshipsRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents a QueryRelationshipsRequest.
                 * @implements IQueryRelationshipsRequest
                 * @constructor
                 * @param {im.turms.proto.IQueryRelationshipsRequest=} [properties] Properties to set
                 */
                function QueryRelationshipsRequest(properties) {
                    this.relatedUsersIds = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * QueryRelationshipsRequest relatedUsersIds.
                 * @member {Array.<string>} relatedUsersIds
                 * @memberof im.turms.proto.QueryRelationshipsRequest
                 * @instance
                 */
                QueryRelationshipsRequest.prototype.relatedUsersIds = $util.emptyArray;

                /**
                 * QueryRelationshipsRequest isBlocked.
                 * @member {google.protobuf.IBoolValue|null|undefined} isBlocked
                 * @memberof im.turms.proto.QueryRelationshipsRequest
                 * @instance
                 */
                QueryRelationshipsRequest.prototype.isBlocked = null;

                /**
                 * QueryRelationshipsRequest groupIndex.
                 * @member {google.protobuf.IInt32Value|null|undefined} groupIndex
                 * @memberof im.turms.proto.QueryRelationshipsRequest
                 * @instance
                 */
                QueryRelationshipsRequest.prototype.groupIndex = null;

                /**
                 * QueryRelationshipsRequest lastUpdatedDate.
                 * @member {google.protobuf.IInt64Value|null|undefined} lastUpdatedDate
                 * @memberof im.turms.proto.QueryRelationshipsRequest
                 * @instance
                 */
                QueryRelationshipsRequest.prototype.lastUpdatedDate = null;

                /**
                 * Encodes the specified QueryRelationshipsRequest message. Does not implicitly {@link im.turms.proto.QueryRelationshipsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.QueryRelationshipsRequest
                 * @static
                 * @param {im.turms.proto.IQueryRelationshipsRequest} message QueryRelationshipsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRelationshipsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.relatedUsersIds != null && message.relatedUsersIds.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.relatedUsersIds.length; ++i)
                            writer.int64(message.relatedUsersIds[i]);
                        writer.ldelim();
                    }
                    if (message.isBlocked != null && Object.hasOwnProperty.call(message, "isBlocked"))
                        $root.google.protobuf.BoolValue.encode(message.isBlocked, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.groupIndex != null && Object.hasOwnProperty.call(message, "groupIndex"))
                        $root.google.protobuf.Int32Value.encode(message.groupIndex, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.lastUpdatedDate != null && Object.hasOwnProperty.call(message, "lastUpdatedDate"))
                        $root.google.protobuf.Int64Value.encode(message.lastUpdatedDate, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes a QueryRelationshipsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.QueryRelationshipsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.QueryRelationshipsRequest} QueryRelationshipsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRelationshipsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.QueryRelationshipsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.relatedUsersIds && message.relatedUsersIds.length))
                                message.relatedUsersIds = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.relatedUsersIds.push(reader.int64().toString());
                            } else
                                message.relatedUsersIds.push(reader.int64().toString());
                            break;
                        case 2:
                            message.isBlocked = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.groupIndex = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.lastUpdatedDate = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return QueryRelationshipsRequest;
            })();

            proto.UpdateFriendRequestRequest = (function() {

                /**
                 * Properties of an UpdateFriendRequestRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateFriendRequestRequest
                 * @property {string|null} [requestId] UpdateFriendRequestRequest requestId
                 * @property {im.turms.proto.ResponseAction|null} [responseAction] UpdateFriendRequestRequest responseAction
                 * @property {google.protobuf.IStringValue|null} [reason] UpdateFriendRequestRequest reason
                 */

                /**
                 * Constructs a new UpdateFriendRequestRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateFriendRequestRequest.
                 * @implements IUpdateFriendRequestRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateFriendRequestRequest=} [properties] Properties to set
                 */
                function UpdateFriendRequestRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateFriendRequestRequest requestId.
                 * @member {string} requestId
                 * @memberof im.turms.proto.UpdateFriendRequestRequest
                 * @instance
                 */
                UpdateFriendRequestRequest.prototype.requestId = "0";

                /**
                 * UpdateFriendRequestRequest responseAction.
                 * @member {im.turms.proto.ResponseAction} responseAction
                 * @memberof im.turms.proto.UpdateFriendRequestRequest
                 * @instance
                 */
                UpdateFriendRequestRequest.prototype.responseAction = 0;

                /**
                 * UpdateFriendRequestRequest reason.
                 * @member {google.protobuf.IStringValue|null|undefined} reason
                 * @memberof im.turms.proto.UpdateFriendRequestRequest
                 * @instance
                 */
                UpdateFriendRequestRequest.prototype.reason = null;

                /**
                 * Encodes the specified UpdateFriendRequestRequest message. Does not implicitly {@link im.turms.proto.UpdateFriendRequestRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateFriendRequestRequest
                 * @static
                 * @param {im.turms.proto.IUpdateFriendRequestRequest} message UpdateFriendRequestRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateFriendRequestRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.requestId);
                    if (message.responseAction != null && Object.hasOwnProperty.call(message, "responseAction"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.responseAction);
                    if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                        $root.google.protobuf.StringValue.encode(message.reason, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an UpdateFriendRequestRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateFriendRequestRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateFriendRequestRequest} UpdateFriendRequestRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateFriendRequestRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateFriendRequestRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.requestId = reader.int64().toString();
                            break;
                        case 2:
                            message.responseAction = reader.int32();
                            break;
                        case 3:
                            message.reason = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateFriendRequestRequest;
            })();

            proto.UpdateRelationshipGroupRequest = (function() {

                /**
                 * Properties of an UpdateRelationshipGroupRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateRelationshipGroupRequest
                 * @property {number|null} [groupIndex] UpdateRelationshipGroupRequest groupIndex
                 * @property {string|null} [newName] UpdateRelationshipGroupRequest newName
                 */

                /**
                 * Constructs a new UpdateRelationshipGroupRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateRelationshipGroupRequest.
                 * @implements IUpdateRelationshipGroupRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateRelationshipGroupRequest=} [properties] Properties to set
                 */
                function UpdateRelationshipGroupRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateRelationshipGroupRequest groupIndex.
                 * @member {number} groupIndex
                 * @memberof im.turms.proto.UpdateRelationshipGroupRequest
                 * @instance
                 */
                UpdateRelationshipGroupRequest.prototype.groupIndex = 0;

                /**
                 * UpdateRelationshipGroupRequest newName.
                 * @member {string} newName
                 * @memberof im.turms.proto.UpdateRelationshipGroupRequest
                 * @instance
                 */
                UpdateRelationshipGroupRequest.prototype.newName = "";

                /**
                 * Encodes the specified UpdateRelationshipGroupRequest message. Does not implicitly {@link im.turms.proto.UpdateRelationshipGroupRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateRelationshipGroupRequest
                 * @static
                 * @param {im.turms.proto.IUpdateRelationshipGroupRequest} message UpdateRelationshipGroupRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateRelationshipGroupRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.groupIndex != null && Object.hasOwnProperty.call(message, "groupIndex"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.groupIndex);
                    if (message.newName != null && Object.hasOwnProperty.call(message, "newName"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.newName);
                    return writer;
                };

                /**
                 * Decodes an UpdateRelationshipGroupRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateRelationshipGroupRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateRelationshipGroupRequest} UpdateRelationshipGroupRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateRelationshipGroupRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateRelationshipGroupRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.groupIndex = reader.int32();
                            break;
                        case 2:
                            message.newName = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateRelationshipGroupRequest;
            })();

            proto.UpdateRelationshipRequest = (function() {

                /**
                 * Properties of an UpdateRelationshipRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateRelationshipRequest
                 * @property {string|null} [relatedUserId] UpdateRelationshipRequest relatedUserId
                 * @property {google.protobuf.IBoolValue|null} [blocked] UpdateRelationshipRequest blocked
                 * @property {google.protobuf.IInt32Value|null} [newGroupIndex] UpdateRelationshipRequest newGroupIndex
                 * @property {google.protobuf.IInt32Value|null} [deleteGroupIndex] UpdateRelationshipRequest deleteGroupIndex
                 */

                /**
                 * Constructs a new UpdateRelationshipRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateRelationshipRequest.
                 * @implements IUpdateRelationshipRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateRelationshipRequest=} [properties] Properties to set
                 */
                function UpdateRelationshipRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateRelationshipRequest relatedUserId.
                 * @member {string} relatedUserId
                 * @memberof im.turms.proto.UpdateRelationshipRequest
                 * @instance
                 */
                UpdateRelationshipRequest.prototype.relatedUserId = "0";

                /**
                 * UpdateRelationshipRequest blocked.
                 * @member {google.protobuf.IBoolValue|null|undefined} blocked
                 * @memberof im.turms.proto.UpdateRelationshipRequest
                 * @instance
                 */
                UpdateRelationshipRequest.prototype.blocked = null;

                /**
                 * UpdateRelationshipRequest newGroupIndex.
                 * @member {google.protobuf.IInt32Value|null|undefined} newGroupIndex
                 * @memberof im.turms.proto.UpdateRelationshipRequest
                 * @instance
                 */
                UpdateRelationshipRequest.prototype.newGroupIndex = null;

                /**
                 * UpdateRelationshipRequest deleteGroupIndex.
                 * @member {google.protobuf.IInt32Value|null|undefined} deleteGroupIndex
                 * @memberof im.turms.proto.UpdateRelationshipRequest
                 * @instance
                 */
                UpdateRelationshipRequest.prototype.deleteGroupIndex = null;

                /**
                 * Encodes the specified UpdateRelationshipRequest message. Does not implicitly {@link im.turms.proto.UpdateRelationshipRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateRelationshipRequest
                 * @static
                 * @param {im.turms.proto.IUpdateRelationshipRequest} message UpdateRelationshipRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateRelationshipRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.relatedUserId != null && Object.hasOwnProperty.call(message, "relatedUserId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.relatedUserId);
                    if (message.blocked != null && Object.hasOwnProperty.call(message, "blocked"))
                        $root.google.protobuf.BoolValue.encode(message.blocked, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.newGroupIndex != null && Object.hasOwnProperty.call(message, "newGroupIndex"))
                        $root.google.protobuf.Int32Value.encode(message.newGroupIndex, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.deleteGroupIndex != null && Object.hasOwnProperty.call(message, "deleteGroupIndex"))
                        $root.google.protobuf.Int32Value.encode(message.deleteGroupIndex, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an UpdateRelationshipRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateRelationshipRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateRelationshipRequest} UpdateRelationshipRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateRelationshipRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateRelationshipRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.relatedUserId = reader.int64().toString();
                            break;
                        case 2:
                            message.blocked = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.newGroupIndex = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.deleteGroupIndex = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateRelationshipRequest;
            })();

            proto.UpdateUserLocationRequest = (function() {

                /**
                 * Properties of an UpdateUserLocationRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateUserLocationRequest
                 * @property {number|null} [latitude] UpdateUserLocationRequest latitude
                 * @property {number|null} [longitude] UpdateUserLocationRequest longitude
                 * @property {google.protobuf.IStringValue|null} [name] UpdateUserLocationRequest name
                 * @property {google.protobuf.IStringValue|null} [address] UpdateUserLocationRequest address
                 */

                /**
                 * Constructs a new UpdateUserLocationRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateUserLocationRequest.
                 * @implements IUpdateUserLocationRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateUserLocationRequest=} [properties] Properties to set
                 */
                function UpdateUserLocationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateUserLocationRequest latitude.
                 * @member {number} latitude
                 * @memberof im.turms.proto.UpdateUserLocationRequest
                 * @instance
                 */
                UpdateUserLocationRequest.prototype.latitude = 0;

                /**
                 * UpdateUserLocationRequest longitude.
                 * @member {number} longitude
                 * @memberof im.turms.proto.UpdateUserLocationRequest
                 * @instance
                 */
                UpdateUserLocationRequest.prototype.longitude = 0;

                /**
                 * UpdateUserLocationRequest name.
                 * @member {google.protobuf.IStringValue|null|undefined} name
                 * @memberof im.turms.proto.UpdateUserLocationRequest
                 * @instance
                 */
                UpdateUserLocationRequest.prototype.name = null;

                /**
                 * UpdateUserLocationRequest address.
                 * @member {google.protobuf.IStringValue|null|undefined} address
                 * @memberof im.turms.proto.UpdateUserLocationRequest
                 * @instance
                 */
                UpdateUserLocationRequest.prototype.address = null;

                /**
                 * Encodes the specified UpdateUserLocationRequest message. Does not implicitly {@link im.turms.proto.UpdateUserLocationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateUserLocationRequest
                 * @static
                 * @param {im.turms.proto.IUpdateUserLocationRequest} message UpdateUserLocationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateUserLocationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.latitude != null && Object.hasOwnProperty.call(message, "latitude"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.latitude);
                    if (message.longitude != null && Object.hasOwnProperty.call(message, "longitude"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.longitude);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        $root.google.protobuf.StringValue.encode(message.address, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Decodes an UpdateUserLocationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateUserLocationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateUserLocationRequest} UpdateUserLocationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateUserLocationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateUserLocationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.latitude = reader.float();
                            break;
                        case 2:
                            message.longitude = reader.float();
                            break;
                        case 3:
                            message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.address = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateUserLocationRequest;
            })();

            proto.UpdateUserOnlineStatusRequest = (function() {

                /**
                 * Properties of an UpdateUserOnlineStatusRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateUserOnlineStatusRequest
                 * @property {im.turms.proto.UserStatus|null} [userStatus] UpdateUserOnlineStatusRequest userStatus
                 */

                /**
                 * Constructs a new UpdateUserOnlineStatusRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateUserOnlineStatusRequest.
                 * @implements IUpdateUserOnlineStatusRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateUserOnlineStatusRequest=} [properties] Properties to set
                 */
                function UpdateUserOnlineStatusRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateUserOnlineStatusRequest userStatus.
                 * @member {im.turms.proto.UserStatus} userStatus
                 * @memberof im.turms.proto.UpdateUserOnlineStatusRequest
                 * @instance
                 */
                UpdateUserOnlineStatusRequest.prototype.userStatus = 0;

                /**
                 * Encodes the specified UpdateUserOnlineStatusRequest message. Does not implicitly {@link im.turms.proto.UpdateUserOnlineStatusRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateUserOnlineStatusRequest
                 * @static
                 * @param {im.turms.proto.IUpdateUserOnlineStatusRequest} message UpdateUserOnlineStatusRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateUserOnlineStatusRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userStatus != null && Object.hasOwnProperty.call(message, "userStatus"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.userStatus);
                    return writer;
                };

                /**
                 * Decodes an UpdateUserOnlineStatusRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateUserOnlineStatusRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateUserOnlineStatusRequest} UpdateUserOnlineStatusRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateUserOnlineStatusRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateUserOnlineStatusRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.userStatus = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateUserOnlineStatusRequest;
            })();

            proto.UpdateUserRequest = (function() {

                /**
                 * Properties of an UpdateUserRequest.
                 * @memberof im.turms.proto
                 * @interface IUpdateUserRequest
                 * @property {google.protobuf.IStringValue|null} [password] UpdateUserRequest password
                 * @property {google.protobuf.IStringValue|null} [name] UpdateUserRequest name
                 * @property {google.protobuf.IStringValue|null} [intro] UpdateUserRequest intro
                 * @property {google.protobuf.IStringValue|null} [profilePictureUrl] UpdateUserRequest profilePictureUrl
                 * @property {im.turms.proto.ProfileAccessStrategy|null} [profileAccessStrategy] UpdateUserRequest profileAccessStrategy
                 */

                /**
                 * Constructs a new UpdateUserRequest.
                 * @memberof im.turms.proto
                 * @classdesc Represents an UpdateUserRequest.
                 * @implements IUpdateUserRequest
                 * @constructor
                 * @param {im.turms.proto.IUpdateUserRequest=} [properties] Properties to set
                 */
                function UpdateUserRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UpdateUserRequest password.
                 * @member {google.protobuf.IStringValue|null|undefined} password
                 * @memberof im.turms.proto.UpdateUserRequest
                 * @instance
                 */
                UpdateUserRequest.prototype.password = null;

                /**
                 * UpdateUserRequest name.
                 * @member {google.protobuf.IStringValue|null|undefined} name
                 * @memberof im.turms.proto.UpdateUserRequest
                 * @instance
                 */
                UpdateUserRequest.prototype.name = null;

                /**
                 * UpdateUserRequest intro.
                 * @member {google.protobuf.IStringValue|null|undefined} intro
                 * @memberof im.turms.proto.UpdateUserRequest
                 * @instance
                 */
                UpdateUserRequest.prototype.intro = null;

                /**
                 * UpdateUserRequest profilePictureUrl.
                 * @member {google.protobuf.IStringValue|null|undefined} profilePictureUrl
                 * @memberof im.turms.proto.UpdateUserRequest
                 * @instance
                 */
                UpdateUserRequest.prototype.profilePictureUrl = null;

                /**
                 * UpdateUserRequest profileAccessStrategy.
                 * @member {im.turms.proto.ProfileAccessStrategy} profileAccessStrategy
                 * @memberof im.turms.proto.UpdateUserRequest
                 * @instance
                 */
                UpdateUserRequest.prototype.profileAccessStrategy = 0;

                /**
                 * Encodes the specified UpdateUserRequest message. Does not implicitly {@link im.turms.proto.UpdateUserRequest.verify|verify} messages.
                 * @function encode
                 * @memberof im.turms.proto.UpdateUserRequest
                 * @static
                 * @param {im.turms.proto.IUpdateUserRequest} message UpdateUserRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UpdateUserRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.password != null && Object.hasOwnProperty.call(message, "password"))
                        $root.google.protobuf.StringValue.encode(message.password, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.intro != null && Object.hasOwnProperty.call(message, "intro"))
                        $root.google.protobuf.StringValue.encode(message.intro, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.profilePictureUrl != null && Object.hasOwnProperty.call(message, "profilePictureUrl"))
                        $root.google.protobuf.StringValue.encode(message.profilePictureUrl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.profileAccessStrategy != null && Object.hasOwnProperty.call(message, "profileAccessStrategy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.profileAccessStrategy);
                    return writer;
                };

                /**
                 * Decodes an UpdateUserRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof im.turms.proto.UpdateUserRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {im.turms.proto.UpdateUserRequest} UpdateUserRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UpdateUserRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.im.turms.proto.UpdateUserRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.password = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.intro = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.profilePictureUrl = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.profileAccessStrategy = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                return UpdateUserRequest;
            })();

            return proto;
        })();

        return turms;
    })();

    return im;
})();

$root.google = (function() {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    var google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        var protobuf = {};

        protobuf.DoubleValue = (function() {

            /**
             * Properties of a DoubleValue.
             * @memberof google.protobuf
             * @interface IDoubleValue
             * @property {number|null} [value] DoubleValue value
             */

            /**
             * Constructs a new DoubleValue.
             * @memberof google.protobuf
             * @classdesc Represents a DoubleValue.
             * @implements IDoubleValue
             * @constructor
             * @param {google.protobuf.IDoubleValue=} [properties] Properties to set
             */
            function DoubleValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DoubleValue value.
             * @member {number} value
             * @memberof google.protobuf.DoubleValue
             * @instance
             */
            DoubleValue.prototype.value = 0;

            /**
             * Encodes the specified DoubleValue message. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DoubleValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);
                return writer;
            };

            /**
             * Decodes a DoubleValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DoubleValue} DoubleValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DoubleValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DoubleValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            return DoubleValue;
        })();

        protobuf.FloatValue = (function() {

            /**
             * Properties of a FloatValue.
             * @memberof google.protobuf
             * @interface IFloatValue
             * @property {number|null} [value] FloatValue value
             */

            /**
             * Constructs a new FloatValue.
             * @memberof google.protobuf
             * @classdesc Represents a FloatValue.
             * @implements IFloatValue
             * @constructor
             * @param {google.protobuf.IFloatValue=} [properties] Properties to set
             */
            function FloatValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FloatValue value.
             * @member {number} value
             * @memberof google.protobuf.FloatValue
             * @instance
             */
            FloatValue.prototype.value = 0;

            /**
             * Encodes the specified FloatValue message. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FloatValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.value);
                return writer;
            };

            /**
             * Decodes a FloatValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FloatValue} FloatValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FloatValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FloatValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            return FloatValue;
        })();

        protobuf.Int64Value = (function() {

            /**
             * Properties of an Int64Value.
             * @memberof google.protobuf
             * @interface IInt64Value
             * @property {string|null} [value] Int64Value value
             */

            /**
             * Constructs a new Int64Value.
             * @memberof google.protobuf
             * @classdesc Represents an Int64Value.
             * @implements IInt64Value
             * @constructor
             * @param {google.protobuf.IInt64Value=} [properties] Properties to set
             */
            function Int64Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Int64Value value.
             * @member {string} value
             * @memberof google.protobuf.Int64Value
             * @instance
             */
            Int64Value.prototype.value = "0";

            /**
             * Encodes the specified Int64Value message. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int64Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.value);
                return writer;
            };

            /**
             * Decodes an Int64Value message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Int64Value} Int64Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int64Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int64Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.int64().toString();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            return Int64Value;
        })();

        protobuf.UInt64Value = (function() {

            /**
             * Properties of a UInt64Value.
             * @memberof google.protobuf
             * @interface IUInt64Value
             * @property {string|null} [value] UInt64Value value
             */

            /**
             * Constructs a new UInt64Value.
             * @memberof google.protobuf
             * @classdesc Represents a UInt64Value.
             * @implements IUInt64Value
             * @constructor
             * @param {google.protobuf.IUInt64Value=} [properties] Properties to set
             */
            function UInt64Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UInt64Value value.
             * @member {string} value
             * @memberof google.protobuf.UInt64Value
             * @instance
             */
            UInt64Value.prototype.value = "0";

            /**
             * Encodes the specified UInt64Value message. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt64Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.value);
                return writer;
            };

            /**
             * Decodes a UInt64Value message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UInt64Value} UInt64Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt64Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt64Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.uint64().toString();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            return UInt64Value;
        })();

        protobuf.Int32Value = (function() {

            /**
             * Properties of an Int32Value.
             * @memberof google.protobuf
             * @interface IInt32Value
             * @property {number|null} [value] Int32Value value
             */

            /**
             * Constructs a new Int32Value.
             * @memberof google.protobuf
             * @classdesc Represents an Int32Value.
             * @implements IInt32Value
             * @constructor
             * @param {google.protobuf.IInt32Value=} [properties] Properties to set
             */
            function Int32Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Int32Value value.
             * @member {number} value
             * @memberof google.protobuf.Int32Value
             * @instance
             */
            Int32Value.prototype.value = 0;

            /**
             * Encodes the specified Int32Value message. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int32Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
                return writer;
            };

            /**
             * Decodes an Int32Value message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Int32Value} Int32Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int32Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int32Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            return Int32Value;
        })();

        protobuf.UInt32Value = (function() {

            /**
             * Properties of a UInt32Value.
             * @memberof google.protobuf
             * @interface IUInt32Value
             * @property {number|null} [value] UInt32Value value
             */

            /**
             * Constructs a new UInt32Value.
             * @memberof google.protobuf
             * @classdesc Represents a UInt32Value.
             * @implements IUInt32Value
             * @constructor
             * @param {google.protobuf.IUInt32Value=} [properties] Properties to set
             */
            function UInt32Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UInt32Value value.
             * @member {number} value
             * @memberof google.protobuf.UInt32Value
             * @instance
             */
            UInt32Value.prototype.value = 0;

            /**
             * Encodes the specified UInt32Value message. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt32Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                return writer;
            };

            /**
             * Decodes a UInt32Value message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UInt32Value} UInt32Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt32Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt32Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            return UInt32Value;
        })();

        protobuf.BoolValue = (function() {

            /**
             * Properties of a BoolValue.
             * @memberof google.protobuf
             * @interface IBoolValue
             * @property {boolean|null} [value] BoolValue value
             */

            /**
             * Constructs a new BoolValue.
             * @memberof google.protobuf
             * @classdesc Represents a BoolValue.
             * @implements IBoolValue
             * @constructor
             * @param {google.protobuf.IBoolValue=} [properties] Properties to set
             */
            function BoolValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BoolValue value.
             * @member {boolean} value
             * @memberof google.protobuf.BoolValue
             * @instance
             */
            BoolValue.prototype.value = false;

            /**
             * Encodes the specified BoolValue message. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BoolValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                return writer;
            };

            /**
             * Decodes a BoolValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.BoolValue} BoolValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BoolValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BoolValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            return BoolValue;
        })();

        protobuf.StringValue = (function() {

            /**
             * Properties of a StringValue.
             * @memberof google.protobuf
             * @interface IStringValue
             * @property {string|null} [value] StringValue value
             */

            /**
             * Constructs a new StringValue.
             * @memberof google.protobuf
             * @classdesc Represents a StringValue.
             * @implements IStringValue
             * @constructor
             * @param {google.protobuf.IStringValue=} [properties] Properties to set
             */
            function StringValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StringValue value.
             * @member {string} value
             * @memberof google.protobuf.StringValue
             * @instance
             */
            StringValue.prototype.value = "";

            /**
             * Encodes the specified StringValue message. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.StringValue
             * @static
             * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StringValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
                return writer;
            };

            /**
             * Decodes a StringValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.StringValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.StringValue} StringValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StringValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.StringValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            return StringValue;
        })();

        protobuf.BytesValue = (function() {

            /**
             * Properties of a BytesValue.
             * @memberof google.protobuf
             * @interface IBytesValue
             * @property {Uint8Array|null} [value] BytesValue value
             */

            /**
             * Constructs a new BytesValue.
             * @memberof google.protobuf
             * @classdesc Represents a BytesValue.
             * @implements IBytesValue
             * @constructor
             * @param {google.protobuf.IBytesValue=} [properties] Properties to set
             */
            function BytesValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BytesValue value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.BytesValue
             * @instance
             */
            BytesValue.prototype.value = $util.newBuffer([]);

            /**
             * Encodes the specified BytesValue message. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BytesValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.value);
                return writer;
            };

            /**
             * Decodes a BytesValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.BytesValue} BytesValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BytesValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BytesValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            return BytesValue;
        })();

        return protobuf;
    })();

    return google;
})();

module.exports = $root;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(22);

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(4);

// Thank's IE8 for his funny defineProperty
module.exports = !fails(function () {
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _model_proto_bundle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var _model_proto_bundle__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_model_proto_bundle__WEBPACK_IMPORTED_MODULE_0__);

var ChatType = _model_proto_bundle__WEBPACK_IMPORTED_MODULE_0__["im"].turms.proto.ChatType;
var UserStatus = _model_proto_bundle__WEBPACK_IMPORTED_MODULE_0__["im"].turms.proto.UserStatus;
var ProfileAccessStrategy = _model_proto_bundle__WEBPACK_IMPORTED_MODULE_0__["im"].turms.proto.ProfileAccessStrategy;
var ResponseAction = _model_proto_bundle__WEBPACK_IMPORTED_MODULE_0__["im"].turms.proto.ResponseAction;
var GroupMemberRole = _model_proto_bundle__WEBPACK_IMPORTED_MODULE_0__["im"].turms.proto.GroupMemberRole;
var MessageDeliveryStatus = _model_proto_bundle__WEBPACK_IMPORTED_MODULE_0__["im"].turms.proto.MessageDeliveryStatus;

var ConstantTransformer = function () {
  function ConstantTransformer() {}

  ConstantTransformer.string2ChatType = function (chatType) {
    chatType = chatType.toUpperCase();

    switch (chatType) {
      case 'PRIVATE':
        return ChatType.PRIVATE;

      case 'GROUP':
        return ChatType.GROUP;

      default:
        throw new Error('illegal params');
    }
  };

  ConstantTransformer.string2GroupMemberRole = function (role) {
    role = role.toUpperCase();

    switch (role) {
      case 'OWNER':
        return GroupMemberRole.OWNER;

      case 'MANAGER':
        return GroupMemberRole.MANAGER;

      case 'MEMBER':
        return GroupMemberRole.MEMBER;

      case 'GUEST':
        return GroupMemberRole.GUEST;

      case 'ANONYMOUS_GUEST':
        return GroupMemberRole.ANONYMOUS_GUEST;

      default:
        throw new Error('illegal params');
    }
  };

  ConstantTransformer.string2UserOnlineStatus = function (userOnlineStatus) {
    userOnlineStatus = userOnlineStatus.toUpperCase();

    switch (userOnlineStatus) {
      case 'AVAILABLE':
        return UserStatus.AVAILABLE;

      case 'INVISIBLE':
        return UserStatus.INVISIBLE;

      case 'BUSY':
        return UserStatus.BUSY;

      case 'DO_NOT_DISTURB':
        return UserStatus.DO_NOT_DISTURB;

      case 'AWAY':
        return UserStatus.AWAY;

      case 'BE_RIGHT_BACK':
        return UserStatus.BE_RIGHT_BACK;

      default:
        throw new Error('illegal params');
    }
  };

  ConstantTransformer.string2ProfileAccessStrategy = function (strategy) {
    strategy = strategy.toUpperCase();

    switch (strategy) {
      case 'ALL':
        return ProfileAccessStrategy.ALL;

      case 'ALL_EXCEPT_BLACKLISTED_USERS':
        return ProfileAccessStrategy.ALL_EXCEPT_BLACKLISTED_USERS;

      case 'FRIENDS':
        return ProfileAccessStrategy.FRIENDS;

      default:
        throw new Error('illegal params');
    }
  };

  ConstantTransformer.string2ResponseAction = function (responseAction) {
    responseAction = responseAction.toUpperCase();

    switch (responseAction) {
      case 'ACCEPT':
        return ResponseAction.ACCEPT;

      case 'DECLINE':
        return ResponseAction.DECLINE;

      case 'IGNORE':
        return ResponseAction.IGNORE;

      default:
        throw new Error('illegal params');
    }
  };

  ConstantTransformer.string2DeliveryStatus = function (deliveryStatus) {
    deliveryStatus = deliveryStatus.toUpperCase();

    switch (deliveryStatus) {
      case 'READY':
        return MessageDeliveryStatus.READY;

      case 'SENDING':
        return MessageDeliveryStatus.SENDING;

      case 'RECEIVED':
        return MessageDeliveryStatus.RECEIVED;

      case 'RECALLING':
        return MessageDeliveryStatus.RECALLING;

      case 'RECALLED':
        return MessageDeliveryStatus.RECALLED;

      default:
        throw new Error('illegal params');
    }
  };

  return ConstantTransformer;
}();

/* harmony default export */ __webpack_exports__["a"] = (ConstantTransformer);

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(10);
var definePropertyModule = __webpack_require__(14);
var createPropertyDescriptor = __webpack_require__(32);

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(10);
var IE8_DOM_DEFINE = __webpack_require__(93);
var anObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(41);

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var getOwnPropertyDescriptor = __webpack_require__(30).f;
var createNonEnumerableProperty = __webpack_require__(13);
var redefine = __webpack_require__(19);
var setGlobal = __webpack_require__(54);
var copyConstructorProperties = __webpack_require__(99);
var isForced = __webpack_require__(100);

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(27);

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var bind = __webpack_require__(51);
var IndexedObject = __webpack_require__(40);
var toObject = __webpack_require__(16);
var toLength = __webpack_require__(8);
var arraySpeciesCreate = __webpack_require__(164);

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else if (IS_EVERY) return false;  // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6)
};


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(205);
/* harmony import */ var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_0__);


var _a;

var Code;

(function (Code) {
  Code[Code["OK"] = 2000] = "OK";
  Code[Code["NO_CONTENT"] = 2001] = "NO_CONTENT";
  Code[Code["ALREADY_UP_TO_DATE"] = 2002] = "ALREADY_UP_TO_DATE";
  Code[Code["RECIPIENTS_OFFLINE"] = 2003] = "RECIPIENTS_OFFLINE";
  Code[Code["NOT_RESPONSIBLE"] = 3000] = "NOT_RESPONSIBLE";
  Code[Code["FAILED"] = 4000] = "FAILED";
  Code[Code["DISABLED_FUNCTION"] = 4001] = "DISABLED_FUNCTION";
  Code[Code["EXPIRY_DATE_BEFORE_NOW"] = 4002] = "EXPIRY_DATE_BEFORE_NOW";
  Code[Code["EXPIRY_RESOURCE"] = 4003] = "EXPIRY_RESOURCE";
  Code[Code["ID_DUPLICATED"] = 4004] = "ID_DUPLICATED";
  Code[Code["ILLEGAL_ARGUMENTS"] = 4005] = "ILLEGAL_ARGUMENTS";
  Code[Code["ILLEGAL_DATE_FORMAT"] = 4006] = "ILLEGAL_DATE_FORMAT";
  Code[Code["NOT_ACTIVE"] = 4007] = "NOT_ACTIVE";
  Code[Code["OWNED_RESOURCE_LIMIT_REACHED"] = 4008] = "OWNED_RESOURCE_LIMIT_REACHED";
  Code[Code["REQUESTED_RECORDS_TOO_MANY"] = 4009] = "REQUESTED_RECORDS_TOO_MANY";
  Code[Code["RESOURCES_HAVE_BEEN_HANDLED"] = 4010] = "RESOURCES_HAVE_BEEN_HANDLED";
  Code[Code["RESOURCES_HAVE_CHANGED"] = 4011] = "RESOURCES_HAVE_CHANGED";
  Code[Code["SESSION_SIMULTANEOUS_CONFLICTS_DECLINE"] = 4012] = "SESSION_SIMULTANEOUS_CONFLICTS_DECLINE";
  Code[Code["SESSION_SIMULTANEOUS_CONFLICTS_NOTIFY"] = 4013] = "SESSION_SIMULTANEOUS_CONFLICTS_NOTIFY";
  Code[Code["SESSION_SIMULTANEOUS_CONFLICTS_OFFLINE"] = 4014] = "SESSION_SIMULTANEOUS_CONFLICTS_OFFLINE";
  Code[Code["SUCCESSOR_NOT_GROUP_MEMBER"] = 4015] = "SUCCESSOR_NOT_GROUP_MEMBER";
  Code[Code["TARGET_USERS_UNAUTHORIZED"] = 4016] = "TARGET_USERS_UNAUTHORIZED";
  Code[Code["TARGET_USERS_NOT_EXIST"] = 4017] = "TARGET_USERS_NOT_EXIST";
  Code[Code["TYPE_NOT_EXISTS"] = 4018] = "TYPE_NOT_EXISTS";
  Code[Code["UNAUTHORIZED"] = 4019] = "UNAUTHORIZED";
  Code[Code["REDUNDANT_REQUEST"] = 4020] = "REDUNDANT_REQUEST";
  Code[Code["ALREADY_GROUP_MEMBER"] = 4021] = "ALREADY_GROUP_MEMBER";
  Code[Code["FRIEND_REQUEST_HAS_EXISTED"] = 4022] = "FRIEND_REQUEST_HAS_EXISTED";
  Code[Code["RELATIONSHIP_HAS_ESTABLISHED"] = 4023] = "RELATIONSHIP_HAS_ESTABLISHED";
  Code[Code["USER_NOT_GROUP_MEMBER"] = 4024] = "USER_NOT_GROUP_MEMBER";
  Code[Code["USER_HAS_BEEN_BLACKLISTED"] = 4025] = "USER_HAS_BEEN_BLACKLISTED";
  Code[Code["GROUP_HAS_BEEN_MUTED"] = 4026] = "GROUP_HAS_BEEN_MUTED";
  Code[Code["MEMBER_HAS_BEEN_MUTED"] = 4027] = "MEMBER_HAS_BEEN_MUTED";
  Code[Code["GUESTS_HAVE_BEEN_MUTED"] = 4028] = "GUESTS_HAVE_BEEN_MUTED";
  Code[Code["FILE_TOO_LARGE"] = 4029] = "FILE_TOO_LARGE";
  Code[Code["SERVER_INTERNAL_ERROR"] = 5000] = "SERVER_INTERNAL_ERROR";
  Code[Code["LOGGED_DEVICES_CANNOT_OFFLINE"] = 5001] = "LOGGED_DEVICES_CANNOT_OFFLINE";
  Code[Code["NOT_IMPLEMENTED"] = 5002] = "NOT_IMPLEMENTED";
  Code[Code["CLIENT_USER_ID_AND_PASSWORD_MUST_NOT_NULL"] = 6000] = "CLIENT_USER_ID_AND_PASSWORD_MUST_NOT_NULL";
  Code[Code["CLIENT_SESSION_HAS_BEEN_CLOSED"] = 6001] = "CLIENT_SESSION_HAS_BEEN_CLOSED";
  Code[Code["CLIENT_SESSION_ALREADY_ESTABLISHED"] = 6002] = "CLIENT_SESSION_ALREADY_ESTABLISHED";
  Code[Code["CLIENT_REQUESTS_TOO_FREQUENT"] = 6003] = "CLIENT_REQUESTS_TOO_FREQUENT";
})(Code || (Code = {}));

var TurmsStatusCode = function () {
  function TurmsStatusCode(code) {
    this.code = code;
    this.reason = TurmsStatusCode.getReason(code);
  }

  TurmsStatusCode.isSuccessCode = function (code) {
    if (typeof code === 'string') {
      code = parseInt(code);
    }

    return 2000 <= code && code < 3000;
  };

  TurmsStatusCode.isErrorCode = function (code) {
    return !this.isSuccessCode(code);
  };

  TurmsStatusCode.getReason = function (code) {
    return this._code2ReasonMap[code];
  };

  TurmsStatusCode._code2ReasonMap = (_a = {}, _a[Code.OK] = "ok", _a[Code.NOT_RESPONSIBLE] = "The server isn't responsible for the user", _a[Code.FAILED] = "failed", _a[Code.SERVER_INTERNAL_ERROR] = "Internal server error", _a[Code.NO_CONTENT] = "No content", _a[Code.ALREADY_UP_TO_DATE] = "Already up-to-date", _a[Code.RECIPIENTS_OFFLINE] = "The recipients are offline", _a[Code.DISABLED_FUNCTION] = "The function has been disabled in servers", _a[Code.EXPIRY_DATE_BEFORE_NOW] = "Expiration date must be greater than now", _a[Code.EXPIRY_RESOURCE] = "The target resource has expired", _a[Code.ID_DUPLICATED] = "ID must be unique", _a[Code.ILLEGAL_ARGUMENTS] = "Illegal arguments", _a[Code.ILLEGAL_DATE_FORMAT] = "Illegal date format", _a[Code.NOT_ACTIVE] = "Not active", _a[Code.OWNED_RESOURCE_LIMIT_REACHED] = "The resource limit is reached", _a[Code.REQUESTED_RECORDS_TOO_MANY] = "Too many records are requested", _a[Code.RESOURCES_HAVE_BEEN_HANDLED] = "The resources have been handled", _a[Code.RESOURCES_HAVE_CHANGED] = "The resources have been changed", _a[Code.SESSION_SIMULTANEOUS_CONFLICTS_DECLINE] = "A different device has logged into your account", _a[Code.SESSION_SIMULTANEOUS_CONFLICTS_NOTIFY] = "Someone attempted to log into your account", _a[Code.SESSION_SIMULTANEOUS_CONFLICTS_OFFLINE] = "A different device has logged into your account", _a[Code.SUCCESSOR_NOT_GROUP_MEMBER] = "The successor is not a member of the group", _a[Code.TARGET_USERS_UNAUTHORIZED] = "The target users are unauthorized", _a[Code.TARGET_USERS_NOT_EXIST] = "The target users do not exist", _a[Code.TYPE_NOT_EXISTS] = "The resource type does not exist", _a[Code.UNAUTHORIZED] = "Unauthorized", _a[Code.REDUNDANT_REQUEST] = "The request is redundant", _a[Code.ALREADY_GROUP_MEMBER] = "The user is already a member of the group", _a[Code.FRIEND_REQUEST_HAS_EXISTED] = "A friend request has already existed", _a[Code.RELATIONSHIP_HAS_ESTABLISHED] = "The relationship has already established", _a[Code.USER_NOT_GROUP_MEMBER] = "The user is not a member of the group", _a[Code.USER_HAS_BEEN_BLACKLISTED] = "The user has been blacklisted", _a[Code.GROUP_HAS_BEEN_MUTED] = "The group has been muted", _a[Code.MEMBER_HAS_BEEN_MUTED] = "The group member has been muted", _a[Code.GUESTS_HAVE_BEEN_MUTED] = "The guests of the group have been muted", _a[Code.FILE_TOO_LARGE] = "The file is too large to upload", _a[Code.LOGGED_DEVICES_CANNOT_OFFLINE] = "Cannot set logged in devices offline", _a[Code.NOT_IMPLEMENTED] = "Not Implemented", _a[Code.CLIENT_USER_ID_AND_PASSWORD_MUST_NOT_NULL] = "The user ID and password must be not null", _a[Code.CLIENT_SESSION_HAS_BEEN_CLOSED] = "The session has been closed", _a[Code.CLIENT_SESSION_ALREADY_ESTABLISHED] = "The session has been established", _a[Code.CLIENT_REQUESTS_TOO_FREQUENT] = "Client requests are too frequent", _a);
  return TurmsStatusCode;
}();

/* harmony default export */ __webpack_exports__["a"] = (Object.assign(TurmsStatusCode, Code));

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var createNonEnumerableProperty = __webpack_require__(13);
var has = __webpack_require__(7);
var setGlobal = __webpack_require__(54);
var inspectSource = __webpack_require__(58);
var InternalStateModule = __webpack_require__(23);

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
});


/***/ }),
/* 20 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(40);
var requireObjectCoercible = __webpack_require__(27);

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),
/* 22 */
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__(145);
var global = __webpack_require__(2);
var isObject = __webpack_require__(9);
var createNonEnumerableProperty = __webpack_require__(13);
var objectHas = __webpack_require__(7);
var sharedKey = __webpack_require__(48);
var hiddenKeys = __webpack_require__(47);

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__(61);
var redefine = __webpack_require__(19);
var toString = __webpack_require__(150);

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  redefine(Object.prototype, 'toString', toString, { unsafe: true });
}


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = __webpack_require__(192);

// converts to / from base64 encoded strings
util.base64 = __webpack_require__(193);

// base class of rpc.Service
util.EventEmitter = __webpack_require__(194);

// float handling accross browsers
util.float = __webpack_require__(195);

// requires modules optionally and hides the call from bundlers
util.inquire = __webpack_require__(196);

// converts to / from utf8 encoded strings
util.utf8 = __webpack_require__(197);

// provides a node-like buffer pool in the browser
util.pool = __webpack_require__(198);

// utility to work with the low and high bits of a 64 bit value
util.LongBits = __webpack_require__(199);

// global object reference
util.global = typeof window !== "undefined" && window
           || typeof global !== "undefined" && global
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 * @const
 */
util.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: (new Error()).stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(39)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__(21);
var addToUnscopables = __webpack_require__(91);
var Iterators = __webpack_require__(33);
var InternalStateModule = __webpack_require__(23);
var defineIterator = __webpack_require__(98);

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 27 */
/***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(97);
var global = __webpack_require__(2);

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(10);
var propertyIsEnumerableModule = __webpack_require__(59);
var createPropertyDescriptor = __webpack_require__(32);
var toIndexedObject = __webpack_require__(21);
var toPrimitive = __webpack_require__(41);
var has = __webpack_require__(7);
var IE8_DOM_DEFINE = __webpack_require__(93);

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(11);
var aFunction = __webpack_require__(38);
var wellKnownSymbol = __webpack_require__(5);

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.github.io/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
};


/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(95);
var enumBugKeys = __webpack_require__(57);

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(14).f;
var has = __webpack_require__(7);
var wellKnownSymbol = __webpack_require__(5);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(11);
var aPossiblePrototype = __webpack_require__(149);

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(15);
var IS_PURE = __webpack_require__(28);
var global = __webpack_require__(2);
var getBuiltIn = __webpack_require__(29);
var NativePromise = __webpack_require__(151);
var redefine = __webpack_require__(19);
var redefineAll = __webpack_require__(102);
var setToStringTag = __webpack_require__(35);
var setSpecies = __webpack_require__(103);
var isObject = __webpack_require__(9);
var aFunction = __webpack_require__(38);
var anInstance = __webpack_require__(62);
var classof = __webpack_require__(20);
var inspectSource = __webpack_require__(58);
var iterate = __webpack_require__(152);
var checkCorrectnessOfIteration = __webpack_require__(106);
var speciesConstructor = __webpack_require__(31);
var task = __webpack_require__(107).set;
var microtask = __webpack_require__(154);
var promiseResolve = __webpack_require__(155);
var hostReportErrors = __webpack_require__(156);
var newPromiseCapabilityModule = __webpack_require__(110);
var perform = __webpack_require__(157);
var InternalStateModule = __webpack_require__(23);
var isForced = __webpack_require__(100);
var wellKnownSymbol = __webpack_require__(5);
var V8_VERSION = __webpack_require__(111);

var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var PromiseConstructor = NativePromise;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var $fetch = getBuiltIn('fetch');
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var IS_NODE = classof(process) == 'process';
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

var FORCED = isForced(PROMISE, function () {
  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
  if (!GLOBAL_CORE_JS_PROMISE) {
    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // We can't detect it synchronously, so just check versions
    if (V8_VERSION === 66) return true;
    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;
  }
  // We need Promise#finally in the pure version for preventing prototype pollution
  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = PromiseConstructor.resolve(1);
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
});

var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
});

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function (promise, state, isReject) {
  if (state.notified) return;
  state.notified = true;
  var chain = state.reactions;
  microtask(function () {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var index = 0;
    // variable length - can't use forEach
    while (chain.length > index) {
      var reaction = chain[index++];
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    }
    state.reactions = [];
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(promise, state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (handler = global['on' + name]) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (promise, state) {
  task.call(global, function () {
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (promise, state) {
  task.call(global, function () {
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, promise, state, unwrap) {
  return function (value) {
    fn(promise, state, value, unwrap);
  };
};

var internalReject = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(promise, state, true);
};

var internalResolve = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          then.call(value,
            bind(internalResolve, promise, wrapper, state),
            bind(internalReject, promise, wrapper, state)
          );
        } catch (error) {
          internalReject(promise, wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(promise, state, false);
    }
  } catch (error) {
    internalReject(promise, { done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromiseConstructor, PROMISE);
    aFunction(executor);
    Internal.call(this);
    var state = getInternalState(this);
    try {
      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
    } catch (error) {
      internalReject(this, state, error);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: [],
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };
  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
    // `Promise.prototype.then` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      state.parent = true;
      state.reactions.push(reaction);
      if (state.state != PENDING) notify(this, state, false);
      return reaction.promise;
    },
    // `Promise.prototype.catch` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, promise, state);
    this.reject = bind(internalReject, promise, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && typeof NativePromise == 'function') {
    nativeThen = NativePromise.prototype.then;

    // wrap native Promise#then for native async functions
    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {
      var that = this;
      return new PromiseConstructor(function (resolve, reject) {
        nativeThen.call(that, resolve, reject);
      }).then(onFulfilled, onRejected);
    // https://github.com/zloirock/core-js/issues/640
    }, { unsafe: true });

    // wrap fetch result
    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {
      // eslint-disable-next-line no-unused-vars
      fetch: function fetch(input /* , init */) {
        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
      }
    });
  }
}

$({ global: true, wrap: true, forced: FORCED }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

PromiseWrapper = getBuiltIn(PROMISE);

// statics
$({ target: PROMISE, stat: true, forced: FORCED }, {
  // `Promise.reject` method
  // https://tc39.github.io/ecma262/#sec-promise.reject
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    capability.reject.call(undefined, r);
    return capability.promise;
  }
});

$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
  // `Promise.resolve` method
  // https://tc39.github.io/ecma262/#sec-promise.resolve
  resolve: function resolve(x) {
    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
  }
});

$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
  // `Promise.all` method
  // https://tc39.github.io/ecma262/#sec-promise.all
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        $promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  },
  // `Promise.race` method
  // https://tc39.github.io/ecma262/#sec-promise.race
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      iterate(iterable, function (promise) {
        $promiseResolve.call(C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};


/***/ }),
/* 39 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(4);
var classof = __webpack_require__(20);

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);

// `ToPrimitive` abstract operation
// https://tc39.github.io/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(11);
var defineProperties = __webpack_require__(144);
var enumBugKeys = __webpack_require__(57);
var hiddenKeys = __webpack_require__(47);
var html = __webpack_require__(96);
var documentCreateElement = __webpack_require__(55);
var sharedKey = __webpack_require__(48);

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    /* global ActiveXObject */
    activeXDocument = document.domain && new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : defineProperties(result, Properties);
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(95);
var enumBugKeys = __webpack_require__(57);

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(21);
var toLength = __webpack_require__(8);
var toAbsoluteIndex = __webpack_require__(46);

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(22);

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(53);
var uid = __webpack_require__(42);

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(7);
var toObject = __webpack_require__(16);
var sharedKey = __webpack_require__(48);
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(148);

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__(61);
var classofRaw = __webpack_require__(20);
var wellKnownSymbol = __webpack_require__(5);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(38);

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpFlags = __webpack_require__(113);
var stickyHelpers = __webpack_require__(213);

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = flags.replace('y', '');
      if (flags.indexOf('g') === -1) {
        flags += 'g';
      }

      strCopy = String(str).slice(re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = match.input.slice(charsAdded);
        match[0] = match[0].slice(charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var IS_PURE = __webpack_require__(28);
var store = __webpack_require__(92);

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.6.4',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var createNonEnumerableProperty = __webpack_require__(13);

module.exports = function (key, value) {
  try {
    createNonEnumerableProperty(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var isObject = __webpack_require__(9);

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(4);

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});


/***/ }),
/* 57 */
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(92);

var functionToString = Function.toString;

// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;


/***/ }),
/* 60 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(5);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name) {
  if (!(it instanceof Constructor)) {
    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
  } return it;
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__(158);

// `Uint8Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $copyWithin = __webpack_require__(166);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.copyWithin` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
exportTypedArrayMethod('copyWithin', function copyWithin(target, start /* , end */) {
  return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
});


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $every = __webpack_require__(17).every;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.every` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
exportTypedArrayMethod('every', function every(callbackfn /* , thisArg */) {
  return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $fill = __webpack_require__(116);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('fill', function fill(value /* , start, end */) {
  return $fill.apply(aTypedArray(this), arguments);
});


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $filter = __webpack_require__(17).filter;
var speciesConstructor = __webpack_require__(31);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
exportTypedArrayMethod('filter', function filter(callbackfn /* , thisArg */) {
  var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
});


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $find = __webpack_require__(17).find;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.find` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
exportTypedArrayMethod('find', function find(predicate /* , thisArg */) {
  return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $findIndex = __webpack_require__(17).findIndex;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
exportTypedArrayMethod('findIndex', function findIndex(predicate /* , thisArg */) {
  return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $forEach = __webpack_require__(17).forEach;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
exportTypedArrayMethod('forEach', function forEach(callbackfn /* , thisArg */) {
  $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $includes = __webpack_require__(45).includes;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
exportTypedArrayMethod('includes', function includes(searchElement /* , fromIndex */) {
  return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $indexOf = __webpack_require__(45).indexOf;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
exportTypedArrayMethod('indexOf', function indexOf(searchElement /* , fromIndex */) {
  return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(2);
var ArrayBufferViewCore = __webpack_require__(3);
var ArrayIterators = __webpack_require__(26);
var wellKnownSymbol = __webpack_require__(5);

var ITERATOR = wellKnownSymbol('iterator');
var Uint8Array = global.Uint8Array;
var arrayValues = ArrayIterators.values;
var arrayKeys = ArrayIterators.keys;
var arrayEntries = ArrayIterators.entries;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];

var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

var typedArrayValues = function values() {
  return arrayValues.call(aTypedArray(this));
};

// `%TypedArray%.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
exportTypedArrayMethod('entries', function entries() {
  return arrayEntries.call(aTypedArray(this));
});
// `%TypedArray%.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
exportTypedArrayMethod('keys', function keys() {
  return arrayKeys.call(aTypedArray(this));
});
// `%TypedArray%.prototype.values` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME);
// `%TypedArray%.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $join = [].join;

// `%TypedArray%.prototype.join` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('join', function join(separator) {
  return $join.apply(aTypedArray(this), arguments);
});


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $lastIndexOf = __webpack_require__(167);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.lastIndexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
  return $lastIndexOf.apply(aTypedArray(this), arguments);
});


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(10);
var fails = __webpack_require__(4);
var has = __webpack_require__(7);

var defineProperty = Object.defineProperty;
var cache = {};

var thrower = function (it) { throw it; };

module.exports = function (METHOD_NAME, options) {
  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
  if (!options) options = {};
  var method = [][METHOD_NAME];
  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
  var argument0 = has(options, 0) ? options[0] : thrower;
  var argument1 = has(options, 1) ? options[1] : undefined;

  return cache[METHOD_NAME] = !!method && !fails(function () {
    if (ACCESSORS && !DESCRIPTORS) return true;
    var O = { length: -1 };

    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
    else O[1] = 1;

    method.call(O, argument0, argument1);
  });
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $map = __webpack_require__(17).map;
var speciesConstructor = __webpack_require__(31);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.map` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
exportTypedArrayMethod('map', function map(mapfn /* , thisArg */) {
  return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
    return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
  });
});


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $reduce = __webpack_require__(119).left;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
exportTypedArrayMethod('reduce', function reduce(callbackfn /* , initialValue */) {
  return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $reduceRight = __webpack_require__(119).right;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduceRicht` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
  return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var floor = Math.floor;

// `%TypedArray%.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
exportTypedArrayMethod('reverse', function reverse() {
  var that = this;
  var length = aTypedArray(that).length;
  var middle = floor(length / 2);
  var index = 0;
  var value;
  while (index < middle) {
    value = that[index];
    that[index++] = that[--length];
    that[length] = value;
  } return that;
});


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var toLength = __webpack_require__(8);
var toOffset = __webpack_require__(117);
var toObject = __webpack_require__(16);
var fails = __webpack_require__(4);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).set({});
});

// `%TypedArray%.prototype.set` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
exportTypedArrayMethod('set', function set(arrayLike /* , offset */) {
  aTypedArray(this);
  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
  var length = this.length;
  var src = toObject(arrayLike);
  var len = toLength(src.length);
  var index = 0;
  if (len + offset > length) throw RangeError('Wrong length');
  while (index < len) this[offset + index] = src[index++];
}, FORCED);


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var speciesConstructor = __webpack_require__(31);
var fails = __webpack_require__(4);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $slice = [].slice;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).slice();
});

// `%TypedArray%.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
exportTypedArrayMethod('slice', function slice(start, end) {
  var list = $slice.call(aTypedArray(this), start, end);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
}, FORCED);


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var $some = __webpack_require__(17).some;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.some` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
exportTypedArrayMethod('some', function some(callbackfn /* , thisArg */) {
  return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $sort = [].sort;

// `%TypedArray%.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
exportTypedArrayMethod('sort', function sort(comparefn) {
  return $sort.call(aTypedArray(this), comparefn);
});


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__(3);
var toLength = __webpack_require__(8);
var toAbsoluteIndex = __webpack_require__(46);
var speciesConstructor = __webpack_require__(31);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.subarray` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
exportTypedArrayMethod('subarray', function subarray(begin, end) {
  var O = aTypedArray(this);
  var length = O.length;
  var beginIndex = toAbsoluteIndex(begin, length);
  return new (speciesConstructor(O, O.constructor))(
    O.buffer,
    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
  );
});


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(2);
var ArrayBufferViewCore = __webpack_require__(3);
var fails = __webpack_require__(4);

var Int8Array = global.Int8Array;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $toLocaleString = [].toLocaleString;
var $slice = [].slice;

// iOS Safari 6.x fails here
var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
  $toLocaleString.call(new Int8Array(1));
});

var FORCED = fails(function () {
  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
}) || !fails(function () {
  Int8Array.prototype.toLocaleString.call([1, 2]);
});

// `%TypedArray%.prototype.toLocaleString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
exportTypedArrayMethod('toLocaleString', function toLocaleString() {
  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
}, FORCED);


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var exportTypedArrayMethod = __webpack_require__(3).exportTypedArrayMethod;
var fails = __webpack_require__(4);
var global = __webpack_require__(2);

var Uint8Array = global.Uint8Array;
var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
var arrayToString = [].toString;
var arrayJoin = [].join;

if (fails(function () { arrayToString.call({}); })) {
  arrayToString = function toString() {
    return arrayJoin.call(this);
  };
}

var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

// `%TypedArray%.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function requirePromise() {
	if (typeof Promise !== 'function') {
		throw new TypeError('`Promise.prototype.finally` requires a global `Promise` be available.');
	}
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(15);
var exec = __webpack_require__(52);

$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(188);
exports.encode = exports.stringify = __webpack_require__(189);


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(5);
var create = __webpack_require__(43);
var definePropertyModule = __webpack_require__(14);

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var setGlobal = __webpack_require__(54);

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(10);
var fails = __webpack_require__(4);
var createElement = __webpack_require__(55);

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_SYMBOL = __webpack_require__(56);

module.exports = NATIVE_SYMBOL
  // eslint-disable-next-line no-undef
  && !Symbol.sham
  // eslint-disable-next-line no-undef
  && typeof Symbol.iterator == 'symbol';


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(7);
var toIndexedObject = __webpack_require__(21);
var indexOf = __webpack_require__(45).indexOf;
var hiddenKeys = __webpack_require__(47);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(29);

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);

module.exports = global;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(15);
var createIteratorConstructor = __webpack_require__(147);
var getPrototypeOf = __webpack_require__(49);
var setPrototypeOf = __webpack_require__(36);
var setToStringTag = __webpack_require__(35);
var createNonEnumerableProperty = __webpack_require__(13);
var redefine = __webpack_require__(19);
var wellKnownSymbol = __webpack_require__(5);
var IS_PURE = __webpack_require__(28);
var Iterators = __webpack_require__(33);
var IteratorsCore = __webpack_require__(101);

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(7);
var ownKeys = __webpack_require__(146);
var getOwnPropertyDescriptorModule = __webpack_require__(30);
var definePropertyModule = __webpack_require__(14);

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(4);

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getPrototypeOf = __webpack_require__(49);
var createNonEnumerableProperty = __webpack_require__(13);
var has = __webpack_require__(7);
var wellKnownSymbol = __webpack_require__(5);
var IS_PURE = __webpack_require__(28);

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(19);

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(29);
var definePropertyModule = __webpack_require__(14);
var wellKnownSymbol = __webpack_require__(5);
var DESCRIPTORS = __webpack_require__(10);

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(5);
var Iterators = __webpack_require__(33);

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(50);
var Iterators = __webpack_require__(33);
var wellKnownSymbol = __webpack_require__(5);

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(5);

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var fails = __webpack_require__(4);
var classof = __webpack_require__(20);
var bind = __webpack_require__(51);
var html = __webpack_require__(96);
var createElement = __webpack_require__(55);
var IS_IOS = __webpack_require__(108);

var location = global.location;
var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function (id) {
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(id + '', location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (classof(process) == 'process') {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && !fails(post)) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__(109);

module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(29);

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(38);

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
};

// 25.4.1.5 NewPromiseCapability(C)
module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var userAgent = __webpack_require__(109);

var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  version = match[0] + match[1];
} else if (userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = match[1];
  }
}

module.exports = version && +version;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefine = __webpack_require__(19);
var anObject = __webpack_require__(11);
var fails = __webpack_require__(4);
var flags = __webpack_require__(113);

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = String(R.source);
    var rf = R.flags;
    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(11);

// `RegExp.prototype.flags` getter implementation
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 114 */
/***/ (function(module, exports) {

module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(22);
var toLength = __webpack_require__(8);

// `ToIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-toindex
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length or index');
  return length;
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toObject = __webpack_require__(16);
var toAbsoluteIndex = __webpack_require__(46);
var toLength = __webpack_require__(8);

// `Array.prototype.fill` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var toPositiveInteger = __webpack_require__(162);

module.exports = function (it, BYTES) {
  var offset = toPositiveInteger(it);
  if (offset % BYTES) throw RangeError('Wrong offset');
  return offset;
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(20);

// `IsArray` abstract operation
// https://tc39.github.io/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(38);
var toObject = __webpack_require__(16);
var IndexedObject = __webpack_require__(40);
var toLength = __webpack_require__(8);

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = toLength(O.length);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @ignore
 */
const defaults = __webpack_require__(170);
const {isPromise, createErrorType, tryCall} = __webpack_require__(171);

/**
 * @typicalname pc
 */
class PromiseController {
  /**
   * Creates promise controller. Unlike original Promise, it does not immediately call any function.
   * Instead it has [.call()](#PromiseController+call) method that calls provided function
   * and stores `resolve / reject` methods for future access.
   *
   * @param {Options} [options]
   */
  constructor(options) {
    this._options = Object.assign({}, defaults, options);
    this._resolve = null;
    this._reject = null;
    this._isPending = false;
    this._isFulfilled = false;
    this._isRejected = false;
    this._value = undefined;
    this._promise = null;
    this._timer = null;
  }

  /**
   * Returns promise itself.
   *
   * @returns {Promise}
   */
  get promise() {
    return this._promise;
  }

  /**
   * Returns value with that promise was settled (fulfilled or rejected).
   *
   * @returns {*}
   */
  get value() {
    return this._value;
  }

  /**
   * Returns true if promise is pending.
   *
   * @returns {Boolean}
   */
  get isPending() {
    return this._isPending;
  }

  /**
   * Returns true if promise is fulfilled.
   *
   * @returns {Boolean}
   */
  get isFulfilled() {
    return this._isFulfilled;
  }

  /**
   * Returns true if promise rejected.
   *
   * @returns {Boolean}
   */
  get isRejected() {
    return this._isRejected;
  }

  /**
   * Returns true if promise is fulfilled or rejected.
   *
   * @returns {Boolean}
   */
  get isSettled() {
    return this._isFulfilled || this._isRejected;
  }

  /**
   * Calls `fn` and returns promise OR just returns existing promise from previous `call()` if it is still pending.
   * To fulfill returned promise you should use
   * {@link PromiseController#resolve} / {@link PromiseController#reject} methods.
   * If `fn` itself returns promise, then external promise is attached to it and fulfills together.
   * If no `fn` passed - promiseController is initialized as well.
   *
   * @param {Function} [fn] function to be called.
   * @returns {Promise}
   */
  call(fn) {
    if (!this._isPending) {
      this.reset();
      this._createPromise();
      this._createTimer();
      this._callFn(fn);
    }
    return this._promise;
  }

  /**
   * Resolves pending promise with specified `value`.
   *
   * @param {*} [value]
   */
  resolve(value) {
    if (this._isPending) {
      if (isPromise(value)) {
        this._tryAttachToPromise(value);
      } else {
        this._settle(value);
        this._isFulfilled = true;
        this._resolve(value);
      }
    }
  }

  /**
   * Rejects pending promise with specified `value`.
   *
   * @param {*} [value]
   */
  reject(value) {
    if (this._isPending) {
      this._settle(value);
      this._isRejected = true;
      this._reject(value);
    }
  }

  /**
   * Resets to initial state.
   * If promise is pending it will be rejected with {@link PromiseController.ResetError}.
   */
  reset() {
    if (this._isPending) {
      const message = tryCall(this._options.resetReason);
      const error = new PromiseController.ResetError(message);
      this.reject(error);
    }
    this._promise = null;
    this._isPending = false;
    this._isFulfilled = false;
    this._isRejected = false;
    this._value = undefined;
    this._clearTimer();
  }

  /**
   * Re-assign one or more options.
   *
   * @param {Options} options
   */
  configure(options) {
    Object.assign(this._options, options);
  }

  _createPromise() {
    this._promise = new Promise((resolve, reject) => {
      this._isPending = true;
      this._resolve = resolve;
      this._reject = reject;
    });
  }

  _handleTimeout() {
    const messageTpl = tryCall(this._options.timeoutReason);
    const message = typeof messageTpl === 'string' ? messageTpl.replace('{timeout}', this._options.timeout) : '';
    const error = new PromiseController.TimeoutError(message);
    this.reject(error);
  }

  _createTimer() {
    if (this._options.timeout) {
      this._timer = setTimeout(() => this._handleTimeout(), this._options.timeout);
    }
  }

  _clearTimer() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  }

  _settle(value) {
    this._isPending = false;
    this._value = value;
    this._clearTimer();
  }

  _callFn(fn) {
    if (typeof fn === 'function') {
      try {
        const result = fn();
        this._tryAttachToPromise(result);
      } catch (e) {
        this.reject(e);
      }
    }
  }

  _tryAttachToPromise(p) {
    if (isPromise(p)) {
      p.then(value => this.resolve(value), e => this.reject(e));
    }
  }
}

/**
 * Error for rejection in case of timeout.
 * @type {PromiseController.TimeoutError}
 */
PromiseController.TimeoutError = createErrorType('TimeoutError');

/**
 * Error for rejection in case of call `.reset()` while promise is pending.
 * @type {PromiseController.ResetError}
 */
PromiseController.ResetError = createErrorType('ResetError');

module.exports = PromiseController;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(174);

module.exports = Function.prototype.bind || implementation;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keys = __webpack_require__(175);
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var requirePromise = __webpack_require__(88);

requirePromise();

var IsCallable = __webpack_require__(177);
var SpeciesConstructor = __webpack_require__(179);
var Type = __webpack_require__(125);

var promiseResolve = function PromiseResolve(C, value) {
	return new C(function (resolve) {
		resolve(value);
	});
};

var OriginalPromise = Promise;

var createThenFinally = function CreateThenFinally(C, onFinally) {
	return function (value) {
		var result = onFinally();
		var promise = promiseResolve(C, result);
		var valueThunk = function () {
			return value;
		};
		return promise.then(valueThunk);
	};
};

var createCatchFinally = function CreateCatchFinally(C, onFinally) {
	return function (reason) {
		var result = onFinally();
		var promise = promiseResolve(C, result);
		var thrower = function () {
			throw reason;
		};
		return promise.then(thrower);
	};
};

var promiseFinally = function finally_(onFinally) {
	/* eslint no-invalid-this: 0 */

	var promise = this;

	if (Type(promise) !== 'Object') {
		throw new TypeError('receiver is not an Object');
	}

	var C = SpeciesConstructor(promise, OriginalPromise); // may throw

	var thenFinally = onFinally;
	var catchFinally = onFinally;
	if (IsCallable(onFinally)) {
		thenFinally = createThenFinally(C, onFinally);
		catchFinally = createCatchFinally(C, onFinally);
	}

	return promise.then(thenFinally, catchFinally);
};

if (Object.getOwnPropertyDescriptor) {
	var descriptor = Object.getOwnPropertyDescriptor(promiseFinally, 'name');
	if (descriptor && descriptor.configurable) {
		Object.defineProperty(promiseFinally, 'name', { configurable: true, value: 'finally' });
	}
}

module.exports = promiseFinally;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ES5Type = __webpack_require__(184);

// https://www.ecma-international.org/ecma-262/6.0/#sec-tostring

module.exports = function Type(x) {
	if (typeof x === 'symbol') {
		return 'Symbol';
	}
	return ES5Type(x);
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var requirePromise = __webpack_require__(88);

var implementation = __webpack_require__(124);

module.exports = function getPolyfill() {
	requirePromise();
	return typeof Promise.prototype['finally'] === 'function' ? Promise.prototype['finally'] : implementation;
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Writer;

var util      = __webpack_require__(25);

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup() {
            return (Writer.create = function create_buffer() {
                return new BufferWriter();
            })();
        }
        /* istanbul ignore next */
        : function create_array() {
            return new Writer();
        };
};

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = create();

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Reader;

var util      = __webpack_require__(25);

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup(buffer) {
            return (Reader.create = function create_buffer(buffer) {
                return util.Buffer.isBuffer(buffer)
                    ? new BufferReader(buffer)
                    /* istanbul ignore next */
                    : create_array(buffer);
            })(buffer);
        }
        /* istanbul ignore next */
        : create_array;
};

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = create();

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(5);

exports.f = wellKnownSymbol;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(97);
var has = __webpack_require__(7);
var wrappedWellKnownSymbolModule = __webpack_require__(129);
var defineProperty = __webpack_require__(14).f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(15);
var toObject = __webpack_require__(16);
var nativeKeys = __webpack_require__(44);
var fails = __webpack_require__(4);

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var isRegExp = __webpack_require__(133);

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);
var classof = __webpack_require__(20);
var wellKnownSymbol = __webpack_require__(5);

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.github.io/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(5);

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (e) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (f) { /* empty */ }
  } return false;
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(22);
var requireObjectCoercible = __webpack_require__(27);

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * WebSocket with promise api
 */

/**
 * @external Channel
 */

const Channel = __webpack_require__(169);
const PromiseController = __webpack_require__(120);
const Requests = __webpack_require__(172);
const defaultOptions = __webpack_require__(186);
const {throwIf} = __webpack_require__(187);

// see: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Ready_state_constants
const STATE = {
  CONNECTING: 0,
  OPEN: 1,
  CLOSING: 2,
  CLOSED: 3,
};

/**
 * @typicalname wsp
 */
class WebSocketAsPromised {
  /**
   * Constructor. Unlike original WebSocket it does not immediately open connection.
   * Please call `open()` method to connect.
   *
   * @param {String} url WebSocket URL
   * @param {Options} [options]
   */
  constructor(url, options) {
    this._assertOptions(options);
    this._url = url;
    this._options = Object.assign({}, defaultOptions, options);
    this._requests = new Requests();
    this._ws = null;
    this._wsSubscription = null;
    this._createOpeningController();
    this._createClosingController();
    this._createChannels();
  }

  /**
   * Returns original WebSocket instance created by `options.createWebSocket`.
   *
   * @returns {WebSocket}
   */
  get ws() {
    return this._ws;
  }

  /**
   * Returns WebSocket url.
   *
   * @returns {String}
   */
  get url() {
    return this._url;
  }

  /**
   * Is WebSocket connection in opening state.
   *
   * @returns {Boolean}
   */
  get isOpening() {
    return Boolean(this._ws && this._ws.readyState === STATE.CONNECTING);
  }

  /**
   * Is WebSocket connection opened.
   *
   * @returns {Boolean}
   */
  get isOpened() {
    return Boolean(this._ws && this._ws.readyState === STATE.OPEN);
  }

  /**
   * Is WebSocket connection in closing state.
   *
   * @returns {Boolean}
   */
  get isClosing() {
    return Boolean(this._ws && this._ws.readyState === STATE.CLOSING);
  }

  /**
   * Is WebSocket connection closed.
   *
   * @returns {Boolean}
   */
  get isClosed() {
    return Boolean(!this._ws || this._ws.readyState === STATE.CLOSED);
  }

  /**
   * Event channel triggered when connection is opened.
   *
   * @see https://vitalets.github.io/chnl/#channel
   * @example
   * wsp.onOpen.addListener(() => console.log('Connection opened'));
   *
   * @returns {Channel}
   */
  get onOpen() {
    return this._onOpen;
  }

  /**
   * Event channel triggered every time when message is sent to server.
   *
   * @see https://vitalets.github.io/chnl/#channel
   * @example
   * wsp.onSend.addListener(data => console.log('Message sent', data));
   *
   * @returns {Channel}
   */
  get onSend() {
    return this._onSend;
  }

  /**
   * Event channel triggered every time when message received from server.
   *
   * @see https://vitalets.github.io/chnl/#channel
   * @example
   * wsp.onMessage.addListener(message => console.log(message));
   *
   * @returns {Channel}
   */
  get onMessage() {
    return this._onMessage;
  }

  /**
   * Event channel triggered every time when received message is successfully unpacked.
   * For example, if you are using JSON transport, the listener will receive already JSON parsed data.
   *
   * @see https://vitalets.github.io/chnl/#channel
   * @example
   * wsp.onUnpackedMessage.addListener(data => console.log(data.foo));
   *
   * @returns {Channel}
   */
  get onUnpackedMessage() {
    return this._onUnpackedMessage;
  }

  /**
   * Event channel triggered every time when response to some request comes.
   * Received message considered a response if requestId is found in it.
   *
   * @see https://vitalets.github.io/chnl/#channel
   * @example
   * wsp.onResponse.addListener(data => console.log(data));
   *
   * @returns {Channel}
   */
  get onResponse() {
    return this._onResponse;
  }

  /**
   * Event channel triggered when connection closed.
   * Listener accepts single argument `{code, reason}`.
   *
   * @see https://vitalets.github.io/chnl/#channel
   * @example
   * wsp.onClose.addListener(event => console.log(`Connections closed: ${event.reason}`));
   *
   * @returns {Channel}
   */
  get onClose() {
    return this._onClose;
  }

  /**
   * Event channel triggered when by Websocket 'error' event.
   *
   * @see https://vitalets.github.io/chnl/#channel
   * @example
   * wsp.onError.addListener(event => console.error(event));
   *
   * @returns {Channel}
   */
  get onError() {
    return this._onError;
  }

  /**
   * Opens WebSocket connection. If connection already opened, promise will be resolved with "open event".
   *
   * @returns {Promise<Event>}
   */
  open() {
    if (this.isClosing) {
      return Promise.reject(new Error(`Can't open WebSocket while closing.`));
    }
    if (this.isOpened) {
      return this._opening.promise;
    }
    return this._opening.call(() => {
      this._opening.promise.catch(e => this._cleanup(e));
      this._createWS();
    });
  }

  /**
   * Performs request and waits for response.
   *
   * @param {*} data
   * @param {Object} [options]
   * @param {String|Number} [options.requestId=<auto-generated>]
   * @param {Number} [options.timeout=0]
   * @returns {Promise}
   */
  sendRequest(data, options = {}) {
    const requestId = options.requestId || `${Math.random()}`;
    const timeout = options.timeout !== undefined ? options.timeout : this._options.timeout;
    return this._requests.create(requestId, () => {
      this._assertRequestIdHandlers();
      const finalData = this._options.attachRequestId(data, requestId);
      this.sendPacked(finalData);
    }, timeout);
  }

  /**
   * Packs data with `options.packMessage` and sends to the server.
   *
   * @param {*} data
   */
  sendPacked(data) {
    this._assertPackingHandlers();
    const message = this._options.packMessage(data);
    this.send(message);
  }

  /**
   * Sends data without packing.
   *
   * @param {String|Blob|ArrayBuffer} data
   */
  send(data) {
    throwIf(!this.isOpened, `Can't send data because WebSocket is not opened.`);
    this._ws.send(data);
    this._onSend.dispatchAsync(data);
  }

  /**
   * Closes WebSocket connection. If connection already closed, promise will be resolved with "close event".
   *
   * @returns {Promise<Event>}
   */
  close() {
    return this.isClosed
      ? Promise.resolve(this._closing.value)
      : this._closing.call(() => this._ws.close());
  }

  /**
   * Removes all listeners from WSP instance. Useful for cleanup.
   */
  removeAllListeners() {
    this._onOpen.removeAllListeners();
    this._onMessage.removeAllListeners();
    this._onUnpackedMessage.removeAllListeners();
    this._onResponse.removeAllListeners();
    this._onSend.removeAllListeners();
    this._onClose.removeAllListeners();
    this._onError.removeAllListeners();
  }

  _createOpeningController() {
    const connectionTimeout = this._options.connectionTimeout || this._options.timeout;
    this._opening = new PromiseController({
      timeout: connectionTimeout,
      timeoutReason: `Can't open WebSocket within allowed timeout: ${connectionTimeout} ms.`
    });
  }

  _createClosingController() {
    const closingTimeout = this._options.timeout;
    this._closing = new PromiseController({
      timeout: closingTimeout,
      timeoutReason: `Can't close WebSocket within allowed timeout: ${closingTimeout} ms.`
    });
  }

  _createChannels() {
    this._onOpen = new Channel();
    this._onMessage = new Channel();
    this._onUnpackedMessage = new Channel();
    this._onResponse = new Channel();
    this._onSend = new Channel();
    this._onClose = new Channel();
    this._onError = new Channel();
  }

  _createWS() {
    this._ws = this._options.createWebSocket(this._url);
    this._wsSubscription = new Channel.Subscription([
      {channel: this._ws, event: 'open', listener: e => this._handleOpen(e)},
      {channel: this._ws, event: 'message', listener: e => this._handleMessage(e)},
      {channel: this._ws, event: 'error', listener: e => this._handleError(e)},
      {channel: this._ws, event: 'close', listener: e => this._handleClose(e)},
    ]).on();
  }

  _handleOpen(event) {
    this._onOpen.dispatchAsync(event);
    this._opening.resolve(event);
  }

  _handleMessage(event) {
    const data = this._options.extractMessageData(event);
    this._onMessage.dispatchAsync(data);
    this._tryUnpack(data);
  }

  _tryUnpack(data) {
    if (this._options.unpackMessage) {
      data = this._options.unpackMessage(data);
      if (data !== undefined) {
        this._onUnpackedMessage.dispatchAsync(data);
        this._tryHandleResponse(data);
      }
    }
  }

  _tryHandleResponse(data) {
    if (this._options.extractRequestId) {
      const requestId = this._options.extractRequestId(data);
      if (requestId) {
        this._onResponse.dispatchAsync(data, requestId);
        this._requests.resolve(requestId, data);
      }
    }
  }

  _handleError(event) {
    this._onError.dispatchAsync(event);
  }

  _handleClose(event) {
    this._onClose.dispatchAsync(event);
    this._closing.resolve(event);
    const error = new Error(`WebSocket closed with reason: ${event.reason} (${event.code}).`);
    if (this._opening.isPending) {
      this._opening.reject(error);
    }
    this._cleanup(error);
  }

  _cleanupWS() {
    if (this._wsSubscription) {
      this._wsSubscription.off();
      this._wsSubscription = null;
    }
    this._ws = null;
  }

  _cleanup(error) {
    this._cleanupWS();
    this._requests.rejectAll(error);
  }

  _assertOptions(options) {
    Object.keys(options || {}).forEach(key => {
      if (!defaultOptions.hasOwnProperty(key)) {
        throw new Error(`Unknown option: ${key}`);
      }
    });
  }

  _assertPackingHandlers() {
    const {packMessage, unpackMessage} = this._options;
    throwIf(!packMessage || !unpackMessage,
      `Please define 'options.packMessage / options.unpackMessage' for sending packed messages.`
    );
  }

  _assertRequestIdHandlers() {
    const {attachRequestId, extractRequestId} = this._options;
    throwIf(!attachRequestId || !extractRequestId,
      `Please define 'options.attachRequestId / options.extractRequestId' for sending requests.`
    );
  }
}

module.exports = WebSocketAsPromised;


/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(37);
/* harmony import */ var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _util_constant_transformer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);
/* harmony import */ var _model_proto_bundle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _model_proto_bundle__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_model_proto_bundle__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _util_request_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _util_notification_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);






var UserStatus = _model_proto_bundle__WEBPACK_IMPORTED_MODULE_3__["im"].turms.proto.UserStatus;
var DeviceType = _model_proto_bundle__WEBPACK_IMPORTED_MODULE_3__["im"].turms.proto.DeviceType;

var UserService = function () {
  function UserService(turmsClient) {
    this._turmsClient = turmsClient;
  }

  Object.defineProperty(UserService.prototype, "password", {
    get: function get() {
      return this._password;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(UserService.prototype, "userId", {
    get: function get() {
      return this._userId;
    },
    enumerable: true,
    configurable: true
  });

  UserService.getUserLocationFromBrowser = function () {
    return new Promise(function (resolve, reject) {
      navigator.geolocation.getCurrentPosition(function (position) {
        resolve(position);
      }, function (positionError) {
        reject(positionError);
      });
    });
  };

  UserService.prototype.login = function (userId, password, location, userOnlineStatus, deviceType) {
    if (userOnlineStatus === void 0) {
      userOnlineStatus = UserStatus.AVAILABLE;
    }

    if (deviceType === void 0) {
      deviceType = DeviceType.UNKNOWN;
    }

    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(userId, password);
    this._userId = userId;
    this._password = password;
    this._userOnlineStatus = userOnlineStatus;
    this._deviceType = deviceType;

    if (location) {
      if (typeof location !== 'string') {
        location = location.coords.latitude + ":" + location.coords.longitude;
      }

      this._location = location;
    }

    return this._turmsClient.driver.connect(userId, password, location, userOnlineStatus, deviceType);
  };

  UserService.prototype.relogin = function () {
    return this._turmsClient.driver.reconnect();
  };

  UserService.prototype.logout = function () {
    return this._turmsClient.driver.disconnect();
  };

  UserService.prototype.updateUserOnlineStatus = function (onlineStatus) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(onlineStatus);

    if (typeof onlineStatus === 'string') {
      onlineStatus = _util_constant_transformer__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].string2UserOnlineStatus(onlineStatus);
    }

    if (onlineStatus === UserStatus.OFFLINE) {
      throw new Error('illegal params');
    }

    return this._turmsClient.driver.send({
      updateUserOnlineStatusRequest: {
        userStatus: onlineStatus
      }
    }).then(function (_) {});
  };

  UserService.prototype.updatePassword = function (password) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(password);
    return this._turmsClient.driver.send({
      updateUserRequest: {
        password: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(password)
      }
    }).then(function (_) {});
  };

  UserService.prototype.updateProfile = function (name, intro, profilePictureUrl, profileAccessStrategy) {
    if (_util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].areAllFalsy(name, intro, profilePictureUrl, profileAccessStrategy)) {
      return Promise.resolve();
    }

    if (typeof profileAccessStrategy === 'string') {
      profileAccessStrategy = _util_constant_transformer__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].string2ProfileAccessStrategy(profileAccessStrategy);
    }

    return this._turmsClient.driver.send({
      updateUserRequest: {
        name: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(name),
        intro: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(intro),
        profilePictureUrl: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(profilePictureUrl),
        profileAccessStrategy: profileAccessStrategy
      }
    }).then(function (_) {});
  };

  UserService.prototype.queryUserGroupInvitations = function (lastUpdatedDate) {
    return this._turmsClient.driver.send({
      queryUserGroupInvitationsRequest: {
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getAndTransform(n, 'groupInvitationsWithVersion');
    });
  };

  UserService.prototype.queryUserProfile = function (userId, lastUpdatedDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(userId);
    return this._turmsClient.driver.send({
      queryUserProfileRequest: {
        userId: userId,
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return {
        userInfo: _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getAndTransform(n, 'usersInfosWithVersion.userInfos.0'),
        lastUpdatedDate: _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].transformDate(n.data.usersInfosWithVersion.lastUpdatedDate)
      };
    });
  };

  UserService.prototype.queryUsersIdsNearby = function (latitude, longitude, distance, maxNumber) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(latitude, longitude);
    return this._turmsClient.driver.send({
      queryUsersIdsNearbyRequest: {
        latitude: latitude,
        longitude: longitude,
        distance: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(distance),
        maxNumber: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(maxNumber)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getArr(n, 'ids.values');
    });
  };

  UserService.prototype.queryUsersInfosNearby = function (latitude, longitude, distance, maxNumber) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(latitude, longitude);
    return this._turmsClient.driver.send({
      queryUsersInfosNearbyRequest: {
        latitude: latitude,
        longitude: longitude,
        distance: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(distance),
        maxNumber: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(maxNumber)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getArrAndTransform(n, 'usersInfosWithVersion.userInfos');
    });
  };

  UserService.prototype.queryUsersOnlineStatusRequest = function (usersIds) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(usersIds);
    return this._turmsClient.driver.send({
      queryUsersOnlineStatusRequest: {
        usersIds: usersIds
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getArrAndTransform(n, 'usersOnlineStatuses.userStatuses');
    });
  };

  UserService.prototype.queryRelationships = function (relatedUsersIds, isBlocked, groupIndex, lastUpdatedDate) {
    return this._turmsClient.driver.send({
      queryRelationshipsRequest: {
        relatedUsersIds: relatedUsersIds,
        isBlocked: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(isBlocked),
        groupIndex: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(groupIndex),
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getAndTransform(n, 'userRelationshipsWithVersion');
    });
  };

  UserService.prototype.queryRelatedUsersIds = function (isBlocked, groupIndex, lastUpdatedDate) {
    return this._turmsClient.driver.send({
      queryRelatedUsersIdsRequest: {
        isBlocked: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(isBlocked),
        groupIndex: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(groupIndex),
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getIdsWithVer(n);
    });
  };

  UserService.prototype.queryFriends = function (groupIndex, lastUpdatedDate) {
    return this.queryRelationships(undefined, false, groupIndex, lastUpdatedDate);
  };

  UserService.prototype.queryBlacklistedUsers = function (groupIndex, lastUpdatedDate) {
    return this.queryRelationships(undefined, true, groupIndex, lastUpdatedDate);
  };

  UserService.prototype.createRelationship = function (userId, isBlocked, groupIndex) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(userId, isBlocked);
    return this._turmsClient.driver.send({
      createRelationshipRequest: {
        userId: userId,
        isBlocked: isBlocked,
        groupIndex: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(groupIndex)
      }
    }).then(function (_) {});
  };

  UserService.prototype.createFriendRelationship = function (userId, groupIndex) {
    return this.createRelationship(userId, false, groupIndex);
  };

  UserService.prototype.createBlacklistedUserRelationship = function (userId, groupIndex) {
    return this.createRelationship(userId, true, groupIndex);
  };

  UserService.prototype.deleteRelationship = function (relatedUserId, deleteGroupIndex, targetGroupIndex) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(relatedUserId);
    return this._turmsClient.driver.send({
      deleteRelationshipRequest: {
        relatedUserId: relatedUserId,
        groupIndex: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(deleteGroupIndex),
        targetGroupIndex: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(targetGroupIndex)
      }
    }).then(function (_) {});
  };

  UserService.prototype.updateRelationship = function (relatedUserId, isBlocked, groupIndex) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(relatedUserId);

    if (_util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].areAllFalsy(isBlocked, groupIndex)) {
      return Promise.resolve();
    }

    return this._turmsClient.driver.send({
      updateRelationshipRequest: {
        relatedUserId: relatedUserId,
        blocked: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(isBlocked),
        newGroupIndex: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(groupIndex)
      }
    }).then(function (_) {});
  };

  UserService.prototype.sendFriendRequest = function (recipientId, content) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(recipientId, content);
    return this._turmsClient.driver.send({
      createFriendRequestRequest: {
        recipientId: recipientId,
        content: content
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getFirstVal(n, 'ids');
    });
  };

  UserService.prototype.replyFriendRequest = function (requestId, responseAction, reason) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(requestId, responseAction);

    if (typeof responseAction === 'string') {
      responseAction = _util_constant_transformer__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].string2ResponseAction(responseAction);
    }

    return this._turmsClient.driver.send({
      updateFriendRequestRequest: {
        requestId: requestId,
        responseAction: responseAction,
        reason: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(reason)
      }
    }).then(function (_) {});
  };

  UserService.prototype.queryFriendRequests = function (lastUpdatedDate) {
    return this._turmsClient.driver.send({
      queryFriendRequestsRequest: {
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getAndTransform(n, 'userFriendRequestsWithVersion');
    });
  };

  UserService.prototype.createRelationshipGroup = function (name) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(name);
    return this._turmsClient.driver.send({
      createRelationshipGroupRequest: {
        name: name
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getFirstVal(n, 'ids');
    });
  };

  UserService.prototype.deleteRelationshipGroups = function (groupIndex, targetGroupIndex) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(groupIndex);
    return this._turmsClient.driver.send({
      deleteRelationshipGroupRequest: {
        groupIndex: groupIndex,
        targetGroupIndex: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(targetGroupIndex)
      }
    }).then(function (_) {});
  };

  UserService.prototype.updateRelationshipGroup = function (groupIndex, newName) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(groupIndex, newName);
    return this._turmsClient.driver.send({
      updateRelationshipGroupRequest: {
        groupIndex: groupIndex,
        newName: newName
      }
    }).then(function (_) {});
  };

  UserService.prototype.queryRelationshipGroups = function (lastUpdatedDate) {
    return this._turmsClient.driver.send({
      queryRelationshipGroupsRequest: {
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].getAndTransform(n, 'userRelationshipGroupsWithVersion');
    });
  };

  UserService.prototype.moveRelatedUserToGroup = function (relatedUserId, groupIndex) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(relatedUserId, groupIndex);
    return this._turmsClient.driver.send({
      updateRelationshipRequest: {
        relatedUserId: relatedUserId,
        newGroupIndex: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(groupIndex)
      }
    }).then(function (_) {});
  };

  UserService.prototype.updateLocation = function (latitude, longitude, name, address) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].throwIfAnyFalsy(latitude, longitude);
    return this._turmsClient.driver.send({
      updateUserLocationRequest: {
        latitude: latitude,
        longitude: longitude,
        name: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(name),
        address: _util_request_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].wrapValueIfNotNull(address)
      }
    }).then(function (_) {});
  };

  return UserService;
}();

/* harmony default export */ __webpack_exports__["a"] = (UserService);

/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(37);
/* harmony import */ var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _util_constant_transformer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);
/* harmony import */ var _util_request_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);
/* harmony import */ var _util_notification_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1);






var GroupService = function () {
  function GroupService(turmsClient) {
    this._turmsClient = turmsClient;
  }

  GroupService.prototype.createGroup = function (name, intro, announcement, profilePictureUrl, minimumScore, muteEndDate, groupTypeId) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(name);
    return this._turmsClient.driver.send({
      createGroupRequest: {
        name: name,
        intro: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(intro),
        announcement: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(announcement),
        profilePictureUrl: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(profilePictureUrl),
        minimumScore: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(minimumScore),
        muteEndDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(muteEndDate),
        groupTypeId: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(groupTypeId)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getFirstVal(n, 'ids');
    });
  };

  GroupService.prototype.deleteGroup = function (groupId) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId);
    return this._turmsClient.driver.send({
      deleteGroupRequest: {
        groupId: groupId
      }
    }).then(function (_) {});
  };

  GroupService.prototype.updateGroup = function (groupId, groupName, intro, announcement, profilePictureUrl, minimumScore, groupTypeId, muteEndDate, successorId, quitAfterTransfer) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId);

    if (_util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].areAllFalsy(groupName, intro, announcement, profilePictureUrl, minimumScore, groupTypeId, muteEndDate, successorId)) {
      return Promise.resolve();
    }

    return this._turmsClient.driver.send({
      updateGroupRequest: {
        groupId: groupId,
        groupName: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(groupName),
        intro: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(intro),
        announcement: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(announcement),
        profilePictureUrl: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(profilePictureUrl),
        muteEndDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(muteEndDate),
        minimumScore: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(minimumScore),
        groupTypeId: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(groupTypeId),
        successorId: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(successorId),
        quitAfterTransfer: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(quitAfterTransfer)
      }
    }).then(function (_) {});
  };

  GroupService.prototype.transferOwnership = function (groupId, successorId, quitAfterTransfer) {
    if (quitAfterTransfer === void 0) {
      quitAfterTransfer = false;
    }

    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, successorId);
    return this.updateGroup(groupId, null, null, null, null, null, null, null, successorId, quitAfterTransfer);
  };

  GroupService.prototype.muteGroup = function (groupId, muteEndDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, muteEndDate);
    return this.updateGroup(groupId, null, null, null, null, null, null, muteEndDate, null);
  };

  GroupService.prototype.unmuteGroup = function (groupId) {
    return this.muteGroup(groupId, new Date(0));
  };

  GroupService.prototype.queryGroup = function (groupId, lastUpdatedDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId);
    return this._turmsClient.driver.send({
      queryGroupRequest: {
        groupId: groupId,
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return {
        group: _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getAndTransform(n, 'groupsWithVersion.groups.0'),
        lastUpdatedDate: _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getVerDate(n, 'groupsWithVersion')
      };
    });
  };

  GroupService.prototype.queryJoinedGroupsIds = function (lastUpdatedDate) {
    return this._turmsClient.driver.send({
      queryJoinedGroupsIdsRequest: {
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getIdsWithVer(n);
    });
  };

  GroupService.prototype.queryJoinedGroupsInfos = function (lastUpdatedDate) {
    return this._turmsClient.driver.send({
      queryJoinedGroupsInfosRequest: {
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getAndTransform(n, 'groupsWithVersion');
    });
  };

  GroupService.prototype.addGroupJoinQuestion = function (groupId, question, answers, score) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, question, answers, score);
    return this._turmsClient.driver.send({
      createGroupJoinQuestionRequest: {
        groupId: groupId,
        question: question,
        answers: answers,
        score: score
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getFirstVal(n, 'ids');
    });
  };

  GroupService.prototype.deleteGroupJoinQuestion = function (questionId) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(questionId);
    return this._turmsClient.driver.send({
      deleteGroupJoinQuestionRequest: {
        questionId: questionId
      }
    }).then(function (_) {});
  };

  GroupService.prototype.updateGroupJoinQuestion = function (questionId, question, answers, score) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(questionId);

    if (_util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].areAllFalsy(question, answers, score)) {
      return Promise.resolve();
    }

    return this._turmsClient.driver.send({
      updateGroupJoinQuestionRequest: {
        questionId: questionId,
        question: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(question),
        answers: answers,
        score: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(score)
      }
    }).then(function (_) {});
  };

  GroupService.prototype.blacklistUser = function (groupId, userId) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, userId);
    return this._turmsClient.driver.send({
      createGroupBlacklistedUserRequest: {
        blacklistedUserId: userId,
        groupId: groupId
      }
    }).then(function (_) {});
  };

  GroupService.prototype.unblacklistUser = function (groupId, userId) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, userId);
    return this._turmsClient.driver.send({
      deleteGroupBlacklistedUserRequest: {
        groupId: groupId,
        unblacklistedUserId: userId
      }
    }).then(function (_) {});
  };

  GroupService.prototype.queryBlacklistedUsersIds = function (groupId, lastUpdatedDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId);
    return this._turmsClient.driver.send({
      queryGroupBlacklistedUsersIdsRequest: {
        groupId: groupId,
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getIdsWithVer(n);
    });
  };

  GroupService.prototype.queryBlacklistedUsersInfos = function (groupId, lastUpdatedDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId);
    return this._turmsClient.driver.send({
      queryGroupBlacklistedUsersInfosRequest: {
        groupId: groupId,
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getAndTransform(n, 'usersInfosWithVersion');
    });
  };

  GroupService.prototype.createInvitation = function (groupId, inviteeId, content) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, inviteeId, content);
    return this._turmsClient.driver.send({
      createGroupInvitationRequest: {
        groupId: groupId,
        inviteeId: inviteeId,
        content: content
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getFirstVal(n, 'ids');
    });
  };

  GroupService.prototype.deleteInvitation = function (invitationId) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(invitationId);
    return this._turmsClient.driver.send({
      deleteGroupInvitationRequest: {
        invitationId: invitationId
      }
    }).then(function (_) {});
  };

  GroupService.prototype.queryInvitations = function (groupId, lastUpdatedDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId);
    return this._turmsClient.driver.send({
      queryGroupInvitationsRequest: {
        groupId: groupId,
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getAndTransform(n, 'groupInvitationsWithVersion');
    });
  };

  GroupService.prototype.createJoinRequest = function (groupId, content) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, content);
    return this._turmsClient.driver.send({
      createGroupJoinRequestRequest: {
        groupId: groupId,
        content: content
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getFirstVal(n, 'ids');
    });
  };

  GroupService.prototype.deleteJoinRequest = function (requestId) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(requestId);
    return this._turmsClient.driver.send({
      deleteGroupJoinRequestRequest: {
        requestId: requestId
      }
    }).then(function (_) {});
  };

  GroupService.prototype.queryJoinRequests = function (groupId, lastUpdatedDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId);
    return this._turmsClient.driver.send({
      queryGroupJoinRequestsRequest: {
        groupId: groupId,
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getAndTransform(n, 'groupJoinRequestsWithVersion');
    });
  };

  GroupService.prototype.queryGroupJoinQuestionsRequest = function (groupId, withAnswers, lastUpdatedDate) {
    if (withAnswers === void 0) {
      withAnswers = false;
    }

    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, withAnswers);
    return this._turmsClient.driver.send({
      queryGroupJoinQuestionsRequest: {
        groupId: groupId,
        withAnswers: withAnswers,
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getAndTransform(n, 'groupJoinQuestionsWithVersion');
    });
  };

  GroupService.prototype.answerGroupQuestions = function (questionIdsAndAnswers) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfEmpty(questionIdsAndAnswers);
    return this._turmsClient.driver.send({
      checkGroupJoinQuestionsAnswersRequest: {
        questionIdAndAnswer: questionIdsAndAnswers
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].get(n, 'groupJoinQuestionsAnswerResult');
    });
  };

  GroupService.prototype.addGroupMember = function (groupId, userId, name, role, muteEndDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, userId);

    if (typeof role === 'string') {
      role = _util_constant_transformer__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].string2GroupMemberRole(role);
    }

    return this._turmsClient.driver.send({
      createGroupMemberRequest: {
        groupId: groupId,
        userId: userId,
        name: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(name),
        role: role,
        muteEndDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(muteEndDate)
      }
    }).then(function (_) {});
  };

  GroupService.prototype.quitGroup = function (groupId, successorId, quitAfterTransfer) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId);
    return this._turmsClient.driver.send({
      deleteGroupMemberRequest: {
        groupId: groupId,
        groupMemberId: this._turmsClient.userService.userId,
        successorId: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(successorId),
        quitAfterTransfer: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(quitAfterTransfer)
      }
    }).then(function (_) {});
  };

  GroupService.prototype.removeGroupMember = function (groupId, memberId) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, memberId);
    return this._turmsClient.driver.send({
      deleteGroupMemberRequest: {
        groupId: groupId,
        groupMemberId: memberId
      }
    }).then(function (_) {});
  };

  GroupService.prototype.updateGroupMemberInfo = function (groupId, memberId, name, role, muteEndDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, memberId);

    if (_util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].areAllFalsy(name, role, muteEndDate)) {
      return Promise.resolve();
    }

    if (typeof role === 'string') {
      role = _util_constant_transformer__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].string2GroupMemberRole(role);
    }

    return this._turmsClient.driver.send({
      updateGroupMemberRequest: {
        groupId: groupId,
        memberId: memberId,
        name: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(name),
        role: role,
        muteEndDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(muteEndDate)
      }
    }).then(function (_) {});
  };

  GroupService.prototype.muteGroupMember = function (groupId, memberId, muteEndDate) {
    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, memberId, muteEndDate);
    return this.updateGroupMemberInfo(groupId, memberId, undefined, undefined, muteEndDate);
  };

  GroupService.prototype.unmuteGroupMember = function (groupId, memberId) {
    return this.muteGroupMember(groupId, memberId, new Date(0));
  };

  GroupService.prototype.queryGroupMembers = function (groupId, withStatus, lastUpdatedDate) {
    if (withStatus === void 0) {
      withStatus = false;
    }

    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId);
    return this._turmsClient.driver.send({
      queryGroupMembersRequest: {
        groupId: groupId,
        lastUpdatedDate: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapTimeIfNotNull(lastUpdatedDate),
        withStatus: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(withStatus)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getAndTransform(n, 'groupMembersWithVersion');
    });
  };

  GroupService.prototype.queryGroupMembersByMembersIds = function (groupId, membersIds, withStatus) {
    if (withStatus === void 0) {
      withStatus = false;
    }

    _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].throwIfAnyFalsy(groupId, membersIds);
    return this._turmsClient.driver.send({
      queryGroupMembersRequest: {
        groupId: groupId,
        groupMembersIds: membersIds,
        withStatus: _util_request_util__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].wrapValueIfNotNull(withStatus)
      }
    }).then(function (n) {
      return _util_notification_util__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].getAndTransform(n, 'groupMembersWithVersion');
    });
  };

  return GroupService;
}();

/* harmony default export */ __webpack_exports__["a"] = (GroupService);

/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _util_notification_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);


var NotificationService = function () {
  function NotificationService(turmsClient) {
    var _this = this;

    this._turmsClient = turmsClient;

    this._turmsClient.driver.onNotificationListeners.push(function (notification) {
      if (_this._onNotification != null && notification.relayedRequest) {
        _this._onNotification(_util_notification_util__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].transform(notification.relayedRequest), notification.requesterId);
      }

      return null;
    });
  }

  Object.defineProperty(NotificationService.prototype, "onNotification", {
    get: function get() {
      return this._onNotification;
    },
    set: function set(value) {
      this._onNotification = value;
    },
    enumerable: true,
    configurable: true
  });
  return NotificationService;
}();

/* harmony default export */ __webpack_exports__["a"] = (NotificationService);

/***/ }),
/* 140 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);
/* harmony import */ var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(24);
/* harmony import */ var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37);
/* harmony import */ var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_typed_array_uint8_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63);
/* harmony import */ var core_js_modules_es_typed_array_uint8_array__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_uint8_array__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_typed_array_copy_within__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(64);
/* harmony import */ var core_js_modules_es_typed_array_copy_within__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_copy_within__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_typed_array_every__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(65);
/* harmony import */ var core_js_modules_es_typed_array_every__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_every__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_typed_array_fill__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(66);
/* harmony import */ var core_js_modules_es_typed_array_fill__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_fill__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_typed_array_filter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(67);
/* harmony import */ var core_js_modules_es_typed_array_filter__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_filter__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_typed_array_find__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(68);
/* harmony import */ var core_js_modules_es_typed_array_find__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_find__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_typed_array_find_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(69);
/* harmony import */ var core_js_modules_es_typed_array_find_index__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_find_index__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_typed_array_for_each__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(70);
/* harmony import */ var core_js_modules_es_typed_array_for_each__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_for_each__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_typed_array_includes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(71);
/* harmony import */ var core_js_modules_es_typed_array_includes__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_includes__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_typed_array_index_of__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(72);
/* harmony import */ var core_js_modules_es_typed_array_index_of__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_index_of__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_typed_array_iterator__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(73);
/* harmony import */ var core_js_modules_es_typed_array_iterator__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_iterator__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_typed_array_join__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(74);
/* harmony import */ var core_js_modules_es_typed_array_join__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_join__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_typed_array_last_index_of__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(75);
/* harmony import */ var core_js_modules_es_typed_array_last_index_of__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_last_index_of__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_typed_array_map__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(77);
/* harmony import */ var core_js_modules_es_typed_array_map__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_map__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_typed_array_reduce__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(78);
/* harmony import */ var core_js_modules_es_typed_array_reduce__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_reduce__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_typed_array_reduce_right__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(79);
/* harmony import */ var core_js_modules_es_typed_array_reduce_right__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_reduce_right__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_typed_array_reverse__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(80);
/* harmony import */ var core_js_modules_es_typed_array_reverse__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_reverse__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_typed_array_set__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(81);
/* harmony import */ var core_js_modules_es_typed_array_set__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_set__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_typed_array_slice__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(82);
/* harmony import */ var core_js_modules_es_typed_array_slice__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_slice__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var core_js_modules_es_typed_array_some__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(83);
/* harmony import */ var core_js_modules_es_typed_array_some__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_some__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var core_js_modules_es_typed_array_sort__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(84);
/* harmony import */ var core_js_modules_es_typed_array_sort__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_sort__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var core_js_modules_es_typed_array_subarray__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(85);
/* harmony import */ var core_js_modules_es_typed_array_subarray__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_subarray__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var core_js_modules_es_typed_array_to_locale_string__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(86);
/* harmony import */ var core_js_modules_es_typed_array_to_locale_string__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_to_locale_string__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var core_js_modules_es_typed_array_to_string__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(87);
/* harmony import */ var core_js_modules_es_typed_array_to_string__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_to_string__WEBPACK_IMPORTED_MODULE_26__);




























var InputFileReader = function () {
  function InputFileReader() {}

  InputFileReader.readFileFromHTMLInputElement = function (element, fileIndex) {
    if (fileIndex === void 0) {
      fileIndex = 0;
    }

    if (typeof element === 'undefined') {
      return Promise.reject('element is undefined');
    } else if (!(element.files instanceof FileList)) {
      return Promise.reject('element.files isn\'t a FileList object');
    } else if (element.files.length === 0) {
      return Promise.reject('no files selected');
    }

    return this.readFile(element.files[fileIndex]);
  };

  InputFileReader.readFile = function (file) {
    var _this = this;

    if (!this._reader) {
      this._reader = new FileReader();
    }

    var promise = new Promise(function (resolve, reject) {
      _this._reader.onload = function (event) {
        if (typeof event.target.result === 'string') {
          resolve(event.target.result);
        } else {
          resolve(new Uint8Array(event.target.result));
        }
      };

      _this._reader.onerror = function (error) {
        reject(error);
      };
    });

    this._reader.readAsArrayBuffer(file);

    return promise;
  };

  return InputFileReader;
}();

/* harmony default export */ __webpack_exports__["a"] = (InputFileReader);

/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js
var es_array_iterator = __webpack_require__(26);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
var es_object_to_string = __webpack_require__(24);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js
var es_promise = __webpack_require__(37);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js
var es_regexp_to_string = __webpack_require__(112);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint8-array.js
var es_typed_array_uint8_array = __webpack_require__(63);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.copy-within.js
var es_typed_array_copy_within = __webpack_require__(64);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.every.js
var es_typed_array_every = __webpack_require__(65);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.fill.js
var es_typed_array_fill = __webpack_require__(66);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.filter.js
var es_typed_array_filter = __webpack_require__(67);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find.js
var es_typed_array_find = __webpack_require__(68);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find-index.js
var es_typed_array_find_index = __webpack_require__(69);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.for-each.js
var es_typed_array_for_each = __webpack_require__(70);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.includes.js
var es_typed_array_includes = __webpack_require__(71);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.index-of.js
var es_typed_array_index_of = __webpack_require__(72);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.iterator.js
var es_typed_array_iterator = __webpack_require__(73);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.join.js
var es_typed_array_join = __webpack_require__(74);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.last-index-of.js
var es_typed_array_last_index_of = __webpack_require__(75);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.map.js
var es_typed_array_map = __webpack_require__(77);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce.js
var es_typed_array_reduce = __webpack_require__(78);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce-right.js
var es_typed_array_reduce_right = __webpack_require__(79);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reverse.js
var es_typed_array_reverse = __webpack_require__(80);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.set.js
var es_typed_array_set = __webpack_require__(81);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.slice.js
var es_typed_array_slice = __webpack_require__(82);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.some.js
var es_typed_array_some = __webpack_require__(83);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.sort.js
var es_typed_array_sort = __webpack_require__(84);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.subarray.js
var es_typed_array_subarray = __webpack_require__(85);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-locale-string.js
var es_typed_array_to_locale_string = __webpack_require__(86);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-string.js
var es_typed_array_to_string = __webpack_require__(87);

// CONCATENATED MODULE: ./src/util/timer.ts
var Timer = function () {
  function Timer(callback, interval, lightMode) {
    var _this = this;

    if (lightMode === void 0) {
      lightMode = true;
    }

    this._callback = function () {
      if (!_this._ignoreNextCall) {
        callback();
      } else {
        _this._ignoreNextCall = false;
      }
    };

    this._interval = interval;
    this._lightMode = lightMode;
    this._ignoreNextCall = false;
    this._isRunning = false;
  }

  Object.defineProperty(Timer.prototype, "isRunning", {
    get: function get() {
      return this._isRunning;
    },
    enumerable: true,
    configurable: true
  });

  Timer.prototype.stop = function () {
    if (this._timerId) {
      clearInterval(this._timerId);
    }

    this._isRunning = false;
    this._timerId = undefined;
    return this;
  };

  Timer.prototype.start = function () {
    if (!this._timerId) {
      this._timerId = setInterval(this._callback, this._interval);
    }

    this._isRunning = true;
    return this;
  };

  Timer.prototype.reset = function (interval) {
    if (this._lightMode && this._interval === interval) {
      this._ignoreNextCall = true;
      return this;
    } else {
      this._interval = interval;
      return this.stop().start();
    }
  };

  return Timer;
}();

/* harmony default export */ var timer = (Timer);
// EXTERNAL MODULE: ./node_modules/websocket-as-promised/src/index.js
var src = __webpack_require__(136);

// EXTERNAL MODULE: ./src/model/turms-status-code.ts
var turms_status_code = __webpack_require__(18);

// CONCATENATED MODULE: ./src/model/turms-error.ts




var turms_error_TurmsError = function () {
  function TurmsError(code, reason) {
    this._code = code;
    this._reason = reason;
  }

  Object.defineProperty(TurmsError.prototype, "code", {
    get: function get() {
      return this._code;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TurmsError.prototype, "reason", {
    get: function get() {
      return this._reason;
    },
    enumerable: true,
    configurable: true
  });

  TurmsError.prototype.toString = function () {
    return this._code + ":" + this._reason;
  };

  TurmsError.fromNotification = function (notification) {
    if (notification.code.value === turms_status_code["a" /* default */].FAILED) {
      return new TurmsError(notification.code.value, notification.reason.value);
    } else {
      return new TurmsError(notification.code.value, turms_status_code["a" /* default */].getReason(notification.code.value));
    }
  };

  TurmsError.fromCode = function (code) {
    return new TurmsError(code, turms_status_code["a" /* default */].getReason(code));
  };

  TurmsError.URL_UNINITIALIZED = 'The baseUrl is uninitialized.';
  TurmsError.CLIENT_ALREADY_CONNECTED = 'The client has connected to the server. Please close it before logging in again.';
  return TurmsError;
}();

/* harmony default export */ var turms_error = (turms_error_TurmsError);
// EXTERNAL MODULE: ./src/model/proto-bundle.js
var proto_bundle = __webpack_require__(6);

// CONCATENATED MODULE: ./node_modules/unfetch/dist/unfetch.mjs
/* harmony default export */ var unfetch = (function(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return{ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(JSON.parse(s.responseText))},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t}),t(a())},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null)})});
//# sourceMappingURL=unfetch.mjs.map

// EXTERNAL MODULE: ./node_modules/querystring-es3/index.js
var querystring_es3 = __webpack_require__(90);
var querystring_es3_default = /*#__PURE__*/__webpack_require__.n(querystring_es3);

// EXTERNAL MODULE: ./src/util/notification-util.ts
var notification_util = __webpack_require__(1);

// CONCATENATED MODULE: ./src/driver/turms-driver.ts




































var TurmsNotification = proto_bundle["im"].turms.proto.TurmsNotification;
var TurmsRequest = proto_bundle["im"].turms.proto.TurmsRequest;
var UserStatus = proto_bundle["im"].turms.proto.UserStatus;
var DeviceType = proto_bundle["im"].turms.proto.DeviceType;
var COOKIE_REQUEST_ID = 'rid';
var COOKIE_USER_ID = 'uid';
var COOKIE_PASSWORD = 'pwd';
var COOKIE_USER_ONLINE_STATUS = 'us';
var COOKIE_DEVICE_TYPE = 'dt';
var COOKIE_LOCATION = 'loc';
var HEARTBEAT_INTERVAL = 20 * 1000;

var turms_driver_TurmsDriver = function () {
  function TurmsDriver(url, connectionTimeout, requestTimeout, minRequestsInterval, httpUrl, queryReasonWhenLoginFailed, queryReasonWhenDisconnected) {
    if (queryReasonWhenLoginFailed === void 0) {
      queryReasonWhenLoginFailed = true;
    }

    if (queryReasonWhenDisconnected === void 0) {
      queryReasonWhenDisconnected = true;
    }

    this._onNotificationListeners = [];
    this._url = 'ws://localhost:9510';
    this._httpUrl = 'http://localhost:9510';
    this._connectionTimeout = 10 * 1000;
    this._requestTimeout = 60 * 1000;
    this._minRequestsInterval = 0;
    this._requestsMap = {};
    this._lastRequestDate = new Date(0);
    this._queryReasonWhenLoginFailed = true;
    this._queryReasonWhenDisconnected = true;
    if (url) this._url = url;
    if (connectionTimeout) this._connectionTimeout = connectionTimeout;
    if (requestTimeout) this._requestTimeout = requestTimeout;
    if (minRequestsInterval) this._minRequestsInterval = minRequestsInterval;
    this._heartbeatInterval = HEARTBEAT_INTERVAL;
    if (httpUrl) this._httpUrl = httpUrl;
    this._queryReasonWhenLoginFailed = queryReasonWhenLoginFailed;
    this._queryReasonWhenDisconnected = queryReasonWhenDisconnected;
  }

  Object.defineProperty(TurmsDriver.prototype, "onClose", {
    set: function set(value) {
      this._onClose = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TurmsDriver.prototype, "onNotificationListeners", {
    get: function get() {
      return this._onNotificationListeners;
    },
    enumerable: true,
    configurable: true
  });

  TurmsDriver.prototype.sendHeartbeat = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      if (_this.connected()) {
        _this._lastRequestDate = new Date();

        _this._websocket.send(new Uint8Array(0));

        resolve();
      } else {
        reject();
      }
    });
  };

  TurmsDriver.prototype.connected = function () {
    return this._websocket && this._websocket.isOpened;
  };

  TurmsDriver.prototype.disconnect = function () {
    if (this._websocket.isOpened || this._websocket.isOpening) {
      return this._websocket.close().then(function () {});
    } else {
      return Promise.reject();
    }
  };

  TurmsDriver.prototype._connect = function (userId, password, location, userOnlineStatus, deviceType) {
    var _this = this;

    if (userOnlineStatus === void 0) {
      userOnlineStatus = UserStatus.AVAILABLE;
    }

    if (deviceType === void 0) {
      deviceType = DeviceType.UNKNOWN;
    }

    return new Promise(function (resolve, reject) {
      if (_this.connected()) {
        reject(turms_error.CLIENT_ALREADY_CONNECTED);
      } else {
        _this._requestId = _this._generateRandomId();
        _this._userId = userId;
        _this._password = password;
        _this._location = location;
        _this._userOnlineStatus = userOnlineStatus;
        _this._deviceType = deviceType;

        _this.fillLoginInfo(_this._requestId, userId, password, userOnlineStatus, deviceType, location);

        _this._websocket = new src(_this._url, {
          createWebSocket: function createWebSocket(serverUrl) {
            var ws = new WebSocket(serverUrl);
            ws.binaryType = "arraybuffer";
            return ws;
          },
          attachRequestId: function attachRequestId(data) {
            return data;
          },
          packMessage: function packMessage(data) {
            return data;
          },
          unpackMessage: function unpackMessage(data) {
            return TurmsNotification.decode(new Uint8Array(data));
          },
          connectionTimeout: _this._connectionTimeout,
          timeout: _this._requestTimeout,
          extractRequestId: function extractRequestId(notification) {
            if (!notification.relayedRequest && notification.requestId) {
              return parseInt(notification.requestId.value);
            }
          }
        });

        _this._websocket.onUnpackedMessage.addListener(function (notification) {
          var isSessionInfo = notification.data && notification.data.session;

          if (isSessionInfo) {
            _this._sessionId = notification.data.session.sessionId;
            _this._address = notification.data.session.address;
          } else {
            var parsedNotification = notification_util["a" /* default */].transform(notification);

            for (var _i = 0, _a = _this._onNotificationListeners; _i < _a.length; _i++) {
              var listener = _a[_i];

              try {
                listener(parsedNotification);
              } catch (e) {
                console.error(e);
              }
            }
          }
        });

        var causedByError_1 = false;

        _this._websocket.onClose.addListener(function () {
          if (!causedByError_1) {
            _this._onWebsocketClose().then(function () {
              return resolve();
            }).catch(function (error) {
              return reject(error);
            });
          }
        });

        _this._websocket.onError.addListener(function (error) {
          causedByError_1 = true;

          _this._onWebsocketError(error).then(function () {
            return resolve();
          }).catch(function (e) {
            return reject(e);
          });
        });

        _this._websocket.open().then(function () {
          _this._onWebsocketOpen();

          resolve();
        }).catch(function (error) {
          _this._onWebsocketError(error).then(function () {
            return resolve();
          }).catch(function (e) {
            return reject(e);
          });
        });
      }
    });
  };

  TurmsDriver.prototype.connect = function (userId, password, location, userOnlineStatus, deviceType) {
    var _this = this;

    if (userOnlineStatus === void 0) {
      userOnlineStatus = UserStatus.AVAILABLE;
    }

    if (deviceType === void 0) {
      deviceType = DeviceType.UNKNOWN;
    }

    return this._connect(userId, password, location, userOnlineStatus, deviceType).then(function () {
      _this.clearLoginInfo();

      return Promise.resolve();
    }).catch(function (error) {
      _this.clearLoginInfo();

      return Promise.reject("Failed to login due to 1. password mismatch; 2. the server doesn't exist or is unavailable");
    });
  };

  TurmsDriver.prototype.fillLoginInfo = function (requestId, userId, password, userOnlineStatus, deviceType, location) {
    document.cookie = COOKIE_REQUEST_ID + "=" + requestId + "; path=/";
    document.cookie = COOKIE_USER_ID + "=" + userId + "; path=/";
    document.cookie = COOKIE_PASSWORD + "=" + escape(password) + "; path=/";

    if (userOnlineStatus) {
      document.cookie = COOKIE_USER_ONLINE_STATUS + "=" + userOnlineStatus.toString() + "; path=/";
    }

    if (deviceType) {
      document.cookie = COOKIE_DEVICE_TYPE + "=" + deviceType.toString() + "; path=/";
    }

    if (location) {
      document.cookie = COOKIE_LOCATION + "=" + location + "; path=/";
    }
  };

  TurmsDriver.prototype.clearLoginInfo = function () {
    var now = new Date().toUTCString();
    document.cookie = COOKIE_USER_ID + "=;expires=" + now;
    document.cookie = COOKIE_PASSWORD + "=;expires=" + now;
    document.cookie = COOKIE_USER_ONLINE_STATUS + "=;expires=" + now;
    document.cookie = COOKIE_DEVICE_TYPE + "=;expires=" + now;
    document.cookie = COOKIE_REQUEST_ID + "=;expires=" + now;
    document.cookie = COOKIE_LOCATION + "=;expires=" + now;
  };

  TurmsDriver.prototype.resetHeartBeatTimer = function () {
    if (this._heartbeatTimer) {
      this._heartbeatTimer.reset(this._heartbeatInterval);
    }
  };

  TurmsDriver.prototype.send = function (message) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      if (_this.connected()) {
        var now = new Date();

        if (!_this._minRequestsInterval || now.getTime() - _this._lastRequestDate.getTime() > _this._minRequestsInterval) {
          _this._lastRequestDate = now;

          var requestId = _this._generateRandomId();

          message.requestId = {
            value: '' + requestId
          };
          var data = TurmsRequest.encode(message).finish();
          _this._requestsMap[requestId] = resolve;

          _this.resetHeartBeatTimer();

          return _this._websocket.sendRequest(data, {
            requestId: requestId
          }).then(function (notification) {
            if (notification.code && turms_status_code["a" /* default */].isSuccessCode(notification.code.value)) {
              resolve(notification);
            } else {
              reject(turms_error.fromNotification(notification));
            }
          });
        } else {
          reject(turms_error.fromCode(turms_status_code["a" /* default */].CLIENT_REQUESTS_TOO_FREQUENT));
        }
      } else {
        reject(turms_error.fromCode(turms_status_code["a" /* default */].CLIENT_SESSION_HAS_BEEN_CLOSED));
      }
    });
  };

  TurmsDriver.prototype._generateRandomId = function () {
    var id;

    do {
      id = Math.floor(Math.random() * 9007199254740991);
    } while (Object.prototype.hasOwnProperty.call(this._requestsMap, id));

    this._requestsMap[id] = true;
    return id;
  };

  TurmsDriver.prototype._onWebsocketOpen = function () {
    var _this = this;

    if (this._heartbeatTimer && this._heartbeatTimer.isRunning) {
      this._heartbeatTimer.reset(this._heartbeatInterval);
    } else {
      this._heartbeatTimer = new timer(function () {
        var difference = new Date().getTime() - _this._lastRequestDate.getTime();

        if (difference > _this._minRequestsInterval) {
          return _this.sendHeartbeat();
        } else {
          return Promise.reject();
        }
      }, this._heartbeatInterval);

      this._heartbeatTimer.start();
    }
  };

  TurmsDriver.prototype._onWebsocketClose = function () {
    var _this = this;

    var wasLogged = !!(this._heartbeatTimer && this._heartbeatTimer.isRunning);

    if (this._heartbeatTimer && this._heartbeatTimer.isRunning) {
      this._heartbeatTimer.stop();
    }

    if (this._onClose) {
      if (this._queryReasonWhenDisconnected && this._userId && this._sessionId) {
        var params = querystring_es3_default.a.stringify({
          userId: this._userId,
          sessionId: this._sessionId
        });
        return unfetch(this._httpUrl + "/reasons/disconnection?" + params).then(function (response) {
          return response.text().then(function (text) {
            _this._onClose(wasLogged, null, text ? turms_error.fromCode(parseInt(text)) : null);
          });
        });
      } else {
        this._onClose(wasLogged);
      }
    }

    return Promise.resolve();
  };

  TurmsDriver.prototype._onWebsocketError = function (error) {
    var _this = this;

    var wasLogged = !!(this._heartbeatTimer && this._heartbeatTimer.isRunning);

    if (this._heartbeatTimer && this._heartbeatTimer.isRunning) {
      this._heartbeatTimer.stop();
    }

    if (!wasLogged && this._queryReasonWhenLoginFailed && this._userId && this._requestId) {
      var params = querystring_es3_default.a.stringify({
        userId: this._userId,
        requestId: this._requestId
      });
      return unfetch(this._httpUrl + "/reasons/login-failed?" + params).then(function (response) {
        if (response.status === 307) {
          return _this.reconnect();
        } else {
          return response.text().then(function (text) {
            _this._onClose(wasLogged, error, new turms_error(3000, text));
          });
        }
      });
    } else {
      this._onClose(wasLogged, error);
    }

    return Promise.resolve();
  };

  TurmsDriver.prototype.reconnect = function () {
    if (!this._userId || !this._password) {
      return Promise.reject();
    } else {
      return this.connect(this._userId, this._password, this._location, this._userOnlineStatus, this._deviceType);
    }
  };

  return TurmsDriver;
}();

/* harmony default export */ var turms_driver = __webpack_exports__["a"] = (turms_driver_TurmsDriver);

/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js
var es_array_includes = __webpack_require__(222);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js
var es_array_iterator = __webpack_require__(26);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
var es_object_to_string = __webpack_require__(24);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js
var es_promise = __webpack_require__(37);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js
var es_regexp_exec = __webpack_require__(89);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js
var es_string_includes = __webpack_require__(223);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint8-array.js
var es_typed_array_uint8_array = __webpack_require__(63);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.copy-within.js
var es_typed_array_copy_within = __webpack_require__(64);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.every.js
var es_typed_array_every = __webpack_require__(65);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.fill.js
var es_typed_array_fill = __webpack_require__(66);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.filter.js
var es_typed_array_filter = __webpack_require__(67);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find.js
var es_typed_array_find = __webpack_require__(68);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find-index.js
var es_typed_array_find_index = __webpack_require__(69);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.for-each.js
var es_typed_array_for_each = __webpack_require__(70);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.includes.js
var es_typed_array_includes = __webpack_require__(71);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.index-of.js
var es_typed_array_index_of = __webpack_require__(72);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.iterator.js
var es_typed_array_iterator = __webpack_require__(73);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.join.js
var es_typed_array_join = __webpack_require__(74);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.last-index-of.js
var es_typed_array_last_index_of = __webpack_require__(75);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.map.js
var es_typed_array_map = __webpack_require__(77);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce.js
var es_typed_array_reduce = __webpack_require__(78);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce-right.js
var es_typed_array_reduce_right = __webpack_require__(79);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reverse.js
var es_typed_array_reverse = __webpack_require__(80);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.set.js
var es_typed_array_set = __webpack_require__(81);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.slice.js
var es_typed_array_slice = __webpack_require__(82);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.some.js
var es_typed_array_some = __webpack_require__(83);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.sort.js
var es_typed_array_sort = __webpack_require__(84);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.subarray.js
var es_typed_array_subarray = __webpack_require__(85);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-locale-string.js
var es_typed_array_to_locale_string = __webpack_require__(86);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-string.js
var es_typed_array_to_string = __webpack_require__(87);

// EXTERNAL MODULE: ./src/model/proto-bundle.js
var proto_bundle = __webpack_require__(6);

// EXTERNAL MODULE: ./src/util/constant-transformer.ts
var constant_transformer = __webpack_require__(12);

// EXTERNAL MODULE: ./src/util/request-util.ts
var request_util = __webpack_require__(0);

// EXTERNAL MODULE: ./src/util/notification-util.ts
var notification_util = __webpack_require__(1);

// CONCATENATED MODULE: ./src/model/message-addition.ts
var MessageAddition = function () {
  function MessageAddition(isMentioned, mentionedUserIds) {
    this.isMentioned = isMentioned;
    this.mentionedUserIds = mentionedUserIds;
  }

  return MessageAddition;
}();

/* harmony default export */ var message_addition = (MessageAddition);
// CONCATENATED MODULE: ./src/service/message-service.ts



































var File = proto_bundle["im"].turms.proto.File;
var AudioFile = proto_bundle["im"].turms.proto.AudioFile;
var VideoFile = proto_bundle["im"].turms.proto.VideoFile;
var ImageFile = proto_bundle["im"].turms.proto.ImageFile;
var Location = proto_bundle["im"].turms.proto.UserLocation;

var message_service_MessageService = function () {
  function MessageService(turmsClient) {
    var _this = this;

    this._turmsClient = turmsClient;

    this._turmsClient.driver.onNotificationListeners.push(function (notification) {
      if (_this._onMessage != null && notification.data) {
        var data = notification.data;

        if (data.messages) {
          for (var _i = 0, _a = data.messages.messages; _i < _a.length; _i++) {
            var message = _a[_i];

            var addition = _this.parseMessageAddition(message);

            _this._onMessage(message, addition);
          }
        }
      }

      return null;
    });
  }

  Object.defineProperty(MessageService.prototype, "onMessage", {
    get: function get() {
      return this._onMessage;
    },
    set: function set(value) {
      this._onMessage = value;
    },
    enumerable: true,
    configurable: true
  });

  MessageService.prototype.sendMessage = function (chatType, toId, deliveryDate, text, records, burnAfter) {
    request_util["a" /* default */].throwIfAnyFalsy(chatType, toId, deliveryDate);
    request_util["a" /* default */].throwIfAllFalsy(text, records);

    if (typeof chatType === "string") {
      chatType = constant_transformer["a" /* default */].string2ChatType(chatType);
    }

    return this._turmsClient.driver.send({
      createMessageRequest: {
        chatType: chatType,
        toId: toId,
        deliveryDate: '' + deliveryDate.getTime(),
        text: request_util["a" /* default */].wrapValueIfNotNull(text),
        records: records,
        burnAfter: request_util["a" /* default */].wrapValueIfNotNull(burnAfter)
      }
    }).then(function (n) {
      return notification_util["a" /* default */].getFirstVal(n, 'ids');
    });
  };

  MessageService.prototype.forwardMessage = function (messageId, chatType, toId) {
    request_util["a" /* default */].throwIfAnyFalsy(messageId, chatType, toId);

    if (typeof chatType === "string") {
      chatType = constant_transformer["a" /* default */].string2ChatType(chatType);
    }

    return this._turmsClient.driver.send({
      createMessageRequest: {
        messageId: {
          value: messageId
        },
        chatType: chatType,
        toId: toId
      }
    }).then(function (n) {
      return notification_util["a" /* default */].getFirstVal(n, 'ids');
    });
  };

  MessageService.prototype.updateSentMessage = function (messageId, text, records) {
    request_util["a" /* default */].throwIfAnyFalsy(messageId);

    if (request_util["a" /* default */].areAllFalsy(text, records)) {
      return Promise.resolve();
    }

    return this._turmsClient.driver.send({
      updateMessageRequest: {
        messageId: messageId,
        text: request_util["a" /* default */].wrapValueIfNotNull(text),
        records: records
      }
    }).then(function (_) {});
  };

  MessageService.prototype.queryMessages = function (ids, chatType, areSystemMessages, fromId, deliveryDateAfter, deliveryDateBefore, deliveryStatus, size) {
    if (size === void 0) {
      size = 50;
    }

    if (typeof chatType === 'string') {
      chatType = constant_transformer["a" /* default */].string2ChatType(chatType);
    }

    if (typeof deliveryStatus === 'string') {
      deliveryStatus = constant_transformer["a" /* default */].string2DeliveryStatus(deliveryStatus);
    }

    return this._turmsClient.driver.send({
      queryMessagesRequest: {
        ids: request_util["a" /* default */].wrapValueIfNotNull(ids),
        chatType: chatType,
        areSystemMessages: request_util["a" /* default */].wrapValueIfNotNull(areSystemMessages),
        fromId: request_util["a" /* default */].wrapValueIfNotNull(fromId),
        deliveryDateAfter: request_util["a" /* default */].wrapTimeIfNotNull(deliveryDateAfter),
        deliveryDateBefore: request_util["a" /* default */].wrapTimeIfNotNull(deliveryDateBefore),
        size: request_util["a" /* default */].wrapValueIfNotNull(size),
        deliveryStatus: deliveryStatus
      }
    }).then(function (n) {
      return notification_util["a" /* default */].getArrAndTransform(n, 'messages.messages');
    });
  };

  MessageService.prototype.queryPendingMessagesWithTotal = function (size) {
    if (size === void 0) {
      size = 1;
    }

    return this._turmsClient.driver.send({
      queryPendingMessagesWithTotalRequest: {
        size: request_util["a" /* default */].wrapValueIfNotNull(size)
      }
    }).then(function (n) {
      return notification_util["a" /* default */].getArrAndTransform(n, 'messagesWithTotalList.messagesWithTotalList');
    });
  };

  MessageService.prototype.queryMessageStatus = function (messageId) {
    request_util["a" /* default */].throwIfAnyFalsy(messageId);
    return this._turmsClient.driver.send({
      queryMessageStatusesRequest: {
        messageId: messageId
      }
    }).then(function (n) {
      return notification_util["a" /* default */].getArrAndTransform(n, 'messageStatuses.messageStatuses');
    });
  };

  MessageService.prototype.recallMessage = function (messageId, recallDate) {
    if (recallDate === void 0) {
      recallDate = new Date();
    }

    request_util["a" /* default */].throwIfAnyFalsy(messageId, recallDate);
    return this._turmsClient.driver.send({
      updateMessageRequest: {
        messageId: messageId,
        recallDate: request_util["a" /* default */].wrapTimeIfNotNull(recallDate)
      }
    }).then(function (_) {});
  };

  MessageService.prototype.readMessage = function (messageId, readDate) {
    if (readDate === void 0) {
      readDate = new Date();
    }

    request_util["a" /* default */].throwIfAnyFalsy(messageId, readDate);
    return this._turmsClient.driver.send({
      updateMessageRequest: {
        messageId: messageId,
        readDate: request_util["a" /* default */].wrapTimeIfNotNull(readDate)
      }
    }).then(function (_) {});
  };

  MessageService.prototype.markMessageUnread = function (messageId) {
    return this.readMessage(messageId, new Date(0));
  };

  MessageService.prototype.updateTypingStatusRequest = function (chatType, toId) {
    request_util["a" /* default */].throwIfAnyFalsy(chatType, toId);

    if (typeof chatType === 'string') {
      chatType = constant_transformer["a" /* default */].string2ChatType(chatType);
    }

    return this._turmsClient.driver.send({
      updateTypingStatusRequest: {
        chatType: chatType,
        toId: toId
      }
    }).then(function (_) {});
  };

  MessageService.prototype.isMentionEnabled = function () {
    return this._mentionedUserIdsParser != null;
  };

  MessageService.prototype.enableMention = function (mentionedUserIdsParser) {
    if (mentionedUserIdsParser) {
      this._mentionedUserIdsParser = mentionedUserIdsParser;
    } else if (!this._mentionedUserIdsParser) {
      this._mentionedUserIdsParser = MessageService.DEFAULT_MENTIONED_USER_IDS_PARSER;
    }
  };

  MessageService.generateLocationRecord = function (latitude, longitude, locationName, address) {
    request_util["a" /* default */].throwIfAnyFalsy(latitude, longitude);
    return Location.encode({
      latitude: latitude,
      longitude: longitude,
      address: request_util["a" /* default */].wrapValueIfNotNull(address),
      name: request_util["a" /* default */].wrapValueIfNotNull(name)
    }).finish();
  };

  MessageService.generateAudioRecordByDescription = function (url, duration, format, size) {
    request_util["a" /* default */].throwIfAnyFalsy(url);
    return AudioFile.encode({
      description: {
        url: url,
        duration: request_util["a" /* default */].wrapValueIfNotNull(duration),
        format: request_util["a" /* default */].wrapValueIfNotNull(format),
        size: request_util["a" /* default */].wrapValueIfNotNull(size)
      }
    }).finish();
  };

  MessageService.generateAudioRecordByData = function (data) {
    request_util["a" /* default */].throwIfAnyFalsy(data);
    return AudioFile.encode({
      data: {
        value: new Uint8Array(data)
      }
    }).finish();
  };

  MessageService.generateVideoRecordByDescription = function (url, duration, format, size) {
    request_util["a" /* default */].throwIfAnyFalsy(url);
    return VideoFile.encode({
      description: {
        url: url,
        duration: request_util["a" /* default */].wrapValueIfNotNull(duration),
        format: request_util["a" /* default */].wrapValueIfNotNull(format),
        size: request_util["a" /* default */].wrapValueIfNotNull(size)
      }
    }).finish();
  };

  MessageService.generateVideoRecordByData = function (data) {
    request_util["a" /* default */].throwIfAnyFalsy(data);
    return VideoFile.encode({
      data: {
        value: new Uint8Array(data)
      }
    }).finish();
  };

  MessageService.generateImageRecordByData = function (data) {
    request_util["a" /* default */].throwIfAnyFalsy(data);
    return ImageFile.encode({
      data: {
        value: new Uint8Array(data)
      }
    }).finish();
  };

  MessageService.generateImageRecordByDescription = function (url, fileSize, imageSize, original) {
    request_util["a" /* default */].throwIfAnyFalsy(url);
    return ImageFile.encode({
      description: {
        url: url,
        fileSize: request_util["a" /* default */].wrapValueIfNotNull(fileSize),
        imageSize: request_util["a" /* default */].wrapValueIfNotNull(imageSize),
        original: request_util["a" /* default */].wrapValueIfNotNull(original)
      }
    }).finish();
  };

  MessageService.generateFileRecordByDate = function (data) {
    request_util["a" /* default */].throwIfAnyFalsy(data);
    return File.encode({
      data: {
        value: new Uint8Array(data)
      }
    }).finish();
  };

  MessageService.generateFileRecordByDescription = function (url, format, size) {
    request_util["a" /* default */].throwIfAnyFalsy(url);
    return File.encode({
      description: {
        url: url,
        format: request_util["a" /* default */].wrapValueIfNotNull(format),
        size: request_util["a" /* default */].wrapValueIfNotNull(size)
      }
    }).finish();
  };

  MessageService.prototype.parseMessageAddition = function (message) {
    var mentionedUserIds;

    if (this._mentionedUserIdsParser) {
      mentionedUserIds = this._mentionedUserIdsParser(message);
    } else {
      mentionedUserIds = [];
    }

    var isMentioned = mentionedUserIds.includes(this._turmsClient.userService.userId);
    return new message_addition(isMentioned, mentionedUserIds);
  };

  MessageService.DEFAULT_MENTIONED_USER_IDS_PARSER = function (message) {
    var regex = /@{(\d+?)}/g;

    if (message.text) {
      var userIds = [];
      var matches = void 0;

      while (!!(matches = regex.exec(message.text))) {
        userIds.push(matches[1]);
      }

      return userIds;
    }

    return [];
  };

  return MessageService;
}();

/* harmony default export */ var message_service = __webpack_exports__["a"] = (message_service_MessageService);

/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var _driver_turms_driver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(141);
/* harmony import */ var _service_user_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(137);
/* harmony import */ var _service_group_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(138);
/* harmony import */ var _service_message_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(142);
/* harmony import */ var _service_notification_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(139);
/* harmony import */ var _util_input_file_reader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(140);







var TurmsClient = function () {
  function TurmsClient(url, connectionTimeout, requestTimeout, minRequestsInterval, httpUrl, queryReasonWhenLoginFailed, queryReasonWhenDisconnected) {
    this._driver = new _driver_turms_driver__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](url, connectionTimeout, requestTimeout, minRequestsInterval, httpUrl, queryReasonWhenLoginFailed, queryReasonWhenDisconnected);
    this._userService = new _service_user_service__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](this);
    this._groupService = new _service_group_service__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](this);
    this._messageService = new _service_message_service__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](this);
    this._notificationService = new _service_notification_service__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](this);
  }

  Object.defineProperty(TurmsClient.prototype, "driver", {
    get: function get() {
      return this._driver;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TurmsClient.prototype, "userService", {
    get: function get() {
      return this._userService;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TurmsClient.prototype, "groupService", {
    get: function get() {
      return this._groupService;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TurmsClient.prototype, "messageService", {
    get: function get() {
      return this._messageService;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TurmsClient.prototype, "notificationService", {
    get: function get() {
      return this._notificationService;
    },
    enumerable: true,
    configurable: true
  });

  TurmsClient.InputFileReader = function () {
    return _util_input_file_reader__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"];
  };

  return TurmsClient;
}();

var root = window || global;

if (root) {
  Object.defineProperty(root, 'TurmsClient', {
    configurable: false,
    writable: false,
    enumerable: false,
    value: TurmsClient
  });
} else {
  console.error('Make sure to run turms-client in either browser or nodejs');
}

/* harmony default export */ __webpack_exports__["default"] = (TurmsClient);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(39)))

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(10);
var definePropertyModule = __webpack_require__(14);
var anObject = __webpack_require__(11);
var objectKeys = __webpack_require__(44);

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var inspectSource = __webpack_require__(58);

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(29);
var getOwnPropertyNamesModule = __webpack_require__(34);
var getOwnPropertySymbolsModule = __webpack_require__(60);
var anObject = __webpack_require__(11);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IteratorPrototype = __webpack_require__(101).IteratorPrototype;
var create = __webpack_require__(43);
var createPropertyDescriptor = __webpack_require__(32);
var setToStringTag = __webpack_require__(35);
var Iterators = __webpack_require__(33);

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(4);

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__(61);
var classof = __webpack_require__(50);

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);

module.exports = global.Promise;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(11);
var isArrayIteratorMethod = __webpack_require__(104);
var toLength = __webpack_require__(8);
var bind = __webpack_require__(51);
var getIteratorMethod = __webpack_require__(105);
var callWithSafeIterationClosing = __webpack_require__(153);

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
  var iterator, iterFn, index, length, result, next, step;

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = AS_ENTRIES
          ? boundFunction(anObject(step = iterable[index])[0], step[1])
          : boundFunction(iterable[index]);
        if (result && result instanceof Result) return result;
      } return new Result(false);
    }
    iterator = iterFn.call(iterable);
  }

  next = iterator.next;
  while (!(step = next.call(iterator)).done) {
    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
    if (typeof result == 'object' && result && result instanceof Result) return result;
  } return new Result(false);
};

iterate.stop = function (result) {
  return new Result(true, result);
};


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(11);

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    var returnMethod = iterator['return'];
    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
    throw error;
  }
};


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var getOwnPropertyDescriptor = __webpack_require__(30).f;
var classof = __webpack_require__(20);
var macrotask = __webpack_require__(107).set;
var IS_IOS = __webpack_require__(108);

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var IS_NODE = classof(process) == 'process';
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  } else if (MutationObserver && !IS_IOS) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    then = promise.then;
    notify = function () {
      then.call(promise, flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(11);
var isObject = __webpack_require__(9);
var newPromiseCapability = __webpack_require__(110);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  }
};


/***/ }),
/* 157 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(15);
var global = __webpack_require__(2);
var DESCRIPTORS = __webpack_require__(10);
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__(159);
var ArrayBufferViewCore = __webpack_require__(3);
var ArrayBufferModule = __webpack_require__(160);
var anInstance = __webpack_require__(62);
var createPropertyDescriptor = __webpack_require__(32);
var createNonEnumerableProperty = __webpack_require__(13);
var toLength = __webpack_require__(8);
var toIndex = __webpack_require__(115);
var toOffset = __webpack_require__(117);
var toPrimitive = __webpack_require__(41);
var has = __webpack_require__(7);
var classof = __webpack_require__(50);
var isObject = __webpack_require__(9);
var create = __webpack_require__(43);
var setPrototypeOf = __webpack_require__(36);
var getOwnPropertyNames = __webpack_require__(34).f;
var typedArrayFrom = __webpack_require__(163);
var forEach = __webpack_require__(17).forEach;
var setSpecies = __webpack_require__(103);
var definePropertyModule = __webpack_require__(14);
var getOwnPropertyDescriptorModule = __webpack_require__(30);
var InternalStateModule = __webpack_require__(23);
var inheritIfRequired = __webpack_require__(165);

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var round = Math.round;
var RangeError = global.RangeError;
var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
var TypedArray = ArrayBufferViewCore.TypedArray;
var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var isTypedArray = ArrayBufferViewCore.isTypedArray;
var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
var WRONG_LENGTH = 'Wrong length';

var fromList = function (C, list) {
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
};

var addGetter = function (it, key) {
  nativeDefineProperty(it, key, { get: function () {
    return getInternalState(this)[key];
  } });
};

var isArrayBuffer = function (it) {
  var klass;
  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
};

var isTypedArrayIndex = function (target, key) {
  return isTypedArray(target)
    && typeof key != 'symbol'
    && key in target
    && String(+key) == String(key);
};

var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
  return isTypedArrayIndex(target, key = toPrimitive(key, true))
    ? createPropertyDescriptor(2, target[key])
    : nativeGetOwnPropertyDescriptor(target, key);
};

var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
    && isObject(descriptor)
    && has(descriptor, 'value')
    && !has(descriptor, 'get')
    && !has(descriptor, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !descriptor.configurable
    && (!has(descriptor, 'writable') || descriptor.writable)
    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
  ) {
    target[key] = descriptor.value;
    return target;
  } return nativeDefineProperty(target, key, descriptor);
};

if (DESCRIPTORS) {
  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
    definePropertyModule.f = wrappedDefineProperty;
    addGetter(TypedArrayPrototype, 'buffer');
    addGetter(TypedArrayPrototype, 'byteOffset');
    addGetter(TypedArrayPrototype, 'byteLength');
    addGetter(TypedArrayPrototype, 'length');
  }

  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
    defineProperty: wrappedDefineProperty
  });

  module.exports = function (TYPE, wrapper, CLAMPED) {
    var BYTES = TYPE.match(/\d+$/)[0] / 8;
    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + TYPE;
    var SETTER = 'set' + TYPE;
    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
    var TypedArrayConstructor = NativeTypedArrayConstructor;
    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
    var exported = {};

    var getter = function (that, index) {
      var data = getInternalState(that);
      return data.view[GETTER](index * BYTES + data.byteOffset, true);
    };

    var setter = function (that, index, value) {
      var data = getInternalState(that);
      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
    };

    var addElement = function (that, index) {
      nativeDefineProperty(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
        var index = 0;
        var byteOffset = 0;
        var buffer, byteLength, length;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new ArrayBuffer(byteLength);
        } else if (isArrayBuffer(data)) {
          buffer = data;
          byteOffset = toOffset(offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - byteOffset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (isTypedArray(data)) {
          return fromList(TypedArrayConstructor, data);
        } else {
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }
        setInternalState(that, {
          buffer: buffer,
          byteOffset: byteOffset,
          byteLength: byteLength,
          length: length,
          view: new DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
        return inheritIfRequired(function () {
          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
          if (isArrayBuffer(data)) return $length !== undefined
            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
            : typedArrayOffset !== undefined
              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
              : new NativeTypedArrayConstructor(data);
          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }(), dummy, TypedArrayConstructor);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
        if (!(key in TypedArrayConstructor)) {
          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
        }
      });
      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
    }

    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
    }

    if (TYPED_ARRAY_TAG) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
    }

    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

    $({
      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
    }, exported);

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
    }

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
    }

    setSpecies(CONSTRUCTOR_NAME);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-new */
var global = __webpack_require__(2);
var fails = __webpack_require__(4);
var checkCorrectnessOfIteration = __webpack_require__(106);
var NATIVE_ARRAY_BUFFER_VIEWS = __webpack_require__(3).NATIVE_ARRAY_BUFFER_VIEWS;

var ArrayBuffer = global.ArrayBuffer;
var Int8Array = global.Int8Array;

module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
  Int8Array(1);
}) || !fails(function () {
  new Int8Array(-1);
}) || !checkCorrectnessOfIteration(function (iterable) {
  new Int8Array();
  new Int8Array(null);
  new Int8Array(1.5);
  new Int8Array(iterable);
}, true) || fails(function () {
  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
});


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(2);
var DESCRIPTORS = __webpack_require__(10);
var NATIVE_ARRAY_BUFFER = __webpack_require__(114);
var createNonEnumerableProperty = __webpack_require__(13);
var redefineAll = __webpack_require__(102);
var fails = __webpack_require__(4);
var anInstance = __webpack_require__(62);
var toInteger = __webpack_require__(22);
var toLength = __webpack_require__(8);
var toIndex = __webpack_require__(115);
var IEEE754 = __webpack_require__(161);
var getPrototypeOf = __webpack_require__(49);
var setPrototypeOf = __webpack_require__(36);
var getOwnPropertyNames = __webpack_require__(34).f;
var defineProperty = __webpack_require__(14).f;
var arrayFill = __webpack_require__(116);
var setToStringTag = __webpack_require__(35);
var InternalStateModule = __webpack_require__(23);

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var $DataView = global[DATA_VIEW];
var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
var ObjectPrototype = Object.prototype;
var RangeError = global.RangeError;

var packIEEE754 = IEEE754.pack;
var unpackIEEE754 = IEEE754.unpack;

var packInt8 = function (number) {
  return [number & 0xFF];
};

var packInt16 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF];
};

var packInt32 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
};

var unpackInt32 = function (buffer) {
  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};

var packFloat32 = function (number) {
  return packIEEE754(number, 23, 4);
};

var packFloat64 = function (number) {
  return packIEEE754(number, 52, 8);
};

var addGetter = function (Constructor, key) {
  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });
};

var get = function (view, count, index, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = bytes.slice(start, start + count);
  return isLittleEndian ? pack : pack.reverse();
};

var set = function (view, count, index, conversion, value, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = conversion(+value);
  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
};

if (!NATIVE_ARRAY_BUFFER) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    setInternalState(this, {
      bytes: arrayFill.call(new Array(byteLength), 0),
      byteLength: byteLength
    });
    if (!DESCRIPTORS) this.byteLength = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = getInternalState(buffer).byteLength;
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    setInternalState(this, {
      buffer: buffer,
      byteLength: byteLength,
      byteOffset: offset
    });
    if (!DESCRIPTORS) {
      this.buffer = buffer;
      this.byteLength = byteLength;
      this.byteOffset = offset;
    }
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, 'byteLength');
    addGetter($DataView, 'buffer');
    addGetter($DataView, 'byteLength');
    addGetter($DataView, 'byteOffset');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
    }
  });
} else {
  if (!fails(function () {
    NativeArrayBuffer(1);
  }) || !fails(function () {
    new NativeArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new NativeArrayBuffer(); // eslint-disable-line no-new
    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
    return NativeArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new NativeArrayBuffer(toIndex(length));
    };
    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) {
        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
      }
    }
    ArrayBufferPrototype.constructor = $ArrayBuffer;
  }

  // WebKit bug - the same parent prototype for typed arrays and data view
  if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
    setPrototypeOf($DataViewPrototype, ObjectPrototype);
  }

  // iOS Safari 7.x bug
  var testView = new $DataView(new $ArrayBuffer(2));
  var nativeSetInt8 = $DataViewPrototype.setInt8;
  testView.setInt8(0, 2147483648);
  testView.setInt8(1, 2147483649);
  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
    setInt8: function setInt8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, { unsafe: true });
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);

module.exports = {
  ArrayBuffer: $ArrayBuffer,
  DataView: $DataView
};


/***/ }),
/* 161 */
/***/ (function(module, exports) {

// IEEE754 conversions based on https://github.com/feross/ieee754
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = 1 / 0;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;

var pack = function (number, mantissaLength, bytes) {
  var buffer = new Array(bytes);
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
  var index = 0;
  var exponent, mantissa, c;
  number = abs(number);
  // eslint-disable-next-line no-self-compare
  if (number != number || number === Infinity) {
    // eslint-disable-next-line no-self-compare
    mantissa = number != number ? 1 : 0;
    exponent = eMax;
  } else {
    exponent = floor(log(number) / LN2);
    if (number * (c = pow(2, -exponent)) < 1) {
      exponent--;
      c *= 2;
    }
    if (exponent + eBias >= 1) {
      number += rt / c;
    } else {
      number += rt * pow(2, 1 - eBias);
    }
    if (number * c >= 2) {
      exponent++;
      c /= 2;
    }
    if (exponent + eBias >= eMax) {
      mantissa = 0;
      exponent = eMax;
    } else if (exponent + eBias >= 1) {
      mantissa = (number * c - 1) * pow(2, mantissaLength);
      exponent = exponent + eBias;
    } else {
      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
      exponent = 0;
    }
  }
  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
  exponent = exponent << mantissaLength | mantissa;
  exponentLength += mantissaLength;
  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
  buffer[--index] |= sign * 128;
  return buffer;
};

var unpack = function (buffer, mantissaLength) {
  var bytes = buffer.length;
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var nBits = exponentLength - 7;
  var index = bytes - 1;
  var sign = buffer[index--];
  var exponent = sign & 127;
  var mantissa;
  sign >>= 7;
  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
  mantissa = exponent & (1 << -nBits) - 1;
  exponent >>= -nBits;
  nBits += mantissaLength;
  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
  if (exponent === 0) {
    exponent = 1 - eBias;
  } else if (exponent === eMax) {
    return mantissa ? NaN : sign ? -Infinity : Infinity;
  } else {
    mantissa = mantissa + pow(2, mantissaLength);
    exponent = exponent - eBias;
  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
};

module.exports = {
  pack: pack,
  unpack: unpack
};


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(22);

module.exports = function (it) {
  var result = toInteger(it);
  if (result < 0) throw RangeError("The argument can't be less than 0");
  return result;
};


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var toObject = __webpack_require__(16);
var toLength = __webpack_require__(8);
var getIteratorMethod = __webpack_require__(105);
var isArrayIteratorMethod = __webpack_require__(104);
var bind = __webpack_require__(51);
var aTypedArrayConstructor = __webpack_require__(3).aTypedArrayConstructor;

module.exports = function from(source /* , mapfn, thisArg */) {
  var O = toObject(source);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var i, length, result, step, iterator, next;
  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    O = [];
    while (!(step = next.call(iterator)).done) {
      O.push(step.value);
    }
  }
  if (mapping && argumentsLength > 2) {
    mapfn = bind(mapfn, arguments[2], 2);
  }
  length = toLength(O.length);
  result = new (aTypedArrayConstructor(this))(length);
  for (i = 0; length > i; i++) {
    result[i] = mapping ? mapfn(O[i], i) : O[i];
  }
  return result;
};


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);
var isArray = __webpack_require__(118);
var wellKnownSymbol = __webpack_require__(5);

var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);
var setPrototypeOf = __webpack_require__(36);

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    typeof (NewTarget = dummy.constructor) == 'function' &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toObject = __webpack_require__(16);
var toAbsoluteIndex = __webpack_require__(46);
var toLength = __webpack_require__(8);

var min = Math.min;

// `Array.prototype.copyWithin` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__(21);
var toInteger = __webpack_require__(22);
var toLength = __webpack_require__(8);
var arrayMethodIsStrict = __webpack_require__(168);
var arrayMethodUsesToLength = __webpack_require__(76);

var min = Math.min;
var nativeLastIndexOf = [].lastIndexOf;
var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });
var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH;

// `Array.prototype.lastIndexOf` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
module.exports = FORCED ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
  // convert -0 to +0
  if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
  var O = toIndexedObject(this);
  var length = toLength(O.length);
  var index = length - 1;
  if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
  if (index < 0) index = length + index;
  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
  return -1;
} : nativeLastIndexOf;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(4);

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal
    method.call(null, argument || function () { throw 1; }, 1);
  });
};


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* chnl v1.1.0 by Vitaliy Potapov @preserve */
function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}var Channel=function(){function t(e){_classCallCheck(this,t),this._listeners=[],this._mute=!1,this._accumulate=!1,this._accumulatedEvents=[],this._name=e||"",this._onListenerAdded=null,this._onFirstListenerAdded=null,this._onListenerRemoved=null,this._onLastListenerRemoved=null}return _createClass(t,[{key:"addListener",value:function(e,t){this._pushListener(e,t,!1)}},{key:"addOnceListener",value:function(e,t){this._pushListener(e,t,!0)}},{key:"removeListener",value:function(e,t){this._ensureFunction(e);var n=this._indexOfListener(e,t);0<=n&&this._spliceListener(n)}},{key:"removeAllListeners",value:function(){for(;this.hasListeners();)this._spliceListener(0)}},{key:"hasListener",value:function(e,t){return this._ensureFunction(e),0<=this._indexOfListener(e,t)}},{key:"hasListeners",value:function(){return 0<this._listeners.length}},{key:"dispatch",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._invokeListeners({args:t,async:!1})}},{key:"dispatchAsync",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._invokeListeners({args:t,async:!0})}},{key:"mute",value:function(e){var t=0<arguments.length&&void 0!==e?e:{};this._mute=!0,t.accumulate?this._accumulate=!0:(this._accumulate=!1,this._accumulatedEvents=[])}},{key:"unmute",value:function(){this._mute=!1,this._accumulate&&(this._dispatchAccumulated(),this._accumulate=!1)}},{key:"_invokeListeners",value:function(e){var t=this,n=0<arguments.length&&void 0!==e?e:{args:[],async:!1};this._mute?this._accumulate&&this._accumulatedEvents.push(n):this._listeners.slice().forEach(function(e){t._invokeListener(e,n),e.once&&t.removeListener(e.callback,e.context)})}},{key:"_invokeListener",value:function(e,t){t.async?setTimeout(function(){return e.callback.apply(e.context,t.args)},0):e.callback.apply(e.context,t.args)}},{key:"_ensureFunction",value:function(e){if("function"!=typeof e)throw new Error("Channel "+this._name+": listener is not a function")}},{key:"_dispatchInnerAddEvents",value:function(){var e,t;this._onListenerAdded&&(e=this._onListenerAdded).dispatch.apply(e,arguments);this._onFirstListenerAdded&&1===this._listeners.length&&(t=this._onFirstListenerAdded).dispatch.apply(t,arguments)}},{key:"_dispatchInnerRemoveEvents",value:function(){var e,t;this._onListenerRemoved&&(e=this._onListenerRemoved).dispatch.apply(e,arguments);this._onLastListenerRemoved&&0===this._listeners.length&&(t=this._onLastListenerRemoved).dispatch.apply(t,arguments)}},{key:"_indexOfListener",value:function(e,t){for(var n=0;n<this._listeners.length;n++){var i=this._listeners[n],s=i.callback===e,r=void 0===t&&void 0===i.context,o=t===i.context;if(s&&(r||o))return n}}},{key:"_dispatchAccumulated",value:function(){var t=this;this._accumulatedEvents.forEach(function(e){return t._invokeListeners(e)}),this._accumulatedEvents=[]}},{key:"_pushListener",value:function(e,t,n){this._ensureFunction(e),this._listeners.push({callback:e,context:t,once:n}),this._dispatchInnerAddEvents(e,t,n)}},{key:"_spliceListener",value:function(e){var t=this._listeners[e],n=t.callback,i=t.context,s=t.once;this._listeners.splice(e,1),this._dispatchInnerRemoveEvents(n,i,s)}},{key:"onListenerAdded",get:function(){return this._onListenerAdded||(this._onListenerAdded=new t("".concat(this._name,":onListenerAdded"))),this._onListenerAdded}},{key:"onFirstListenerAdded",get:function(){return this._onFirstListenerAdded||(this._onFirstListenerAdded=new t("".concat(this._name,":onFirstListenerAdded"))),this._onFirstListenerAdded}},{key:"onListenerRemoved",get:function(){return this._onListenerRemoved||(this._onListenerRemoved=new t("".concat(this._name,":onListenerRemoved"))),this._onListenerRemoved}},{key:"onLastListenerRemoved",get:function(){return this._onLastListenerRemoved||(this._onLastListenerRemoved=new t("".concat(this._name,":onLastListenerRemoved"))),this._onLastListenerRemoved}}]),t}(),EventEmitter=function(){function e(){_classCallCheck(this,e),this._channels=new Map}return _createClass(e,[{key:"addListener",value:function(e,t,n){this._getChannel(e).addListener(t,n)}},{key:"on",value:function(e,t,n){this.addListener(e,t,n)}},{key:"addOnceListener",value:function(e,t,n){this._getChannel(e).addOnceListener(t,n)}},{key:"once",value:function(e,t,n){this.addOnceListener(e,t,n)}},{key:"removeListener",value:function(e,t,n){this._getChannel(e).removeListener(t,n)}},{key:"off",value:function(e,t,n){this.removeListener(e,t,n)}},{key:"hasListener",value:function(e,t,n){return this._getChannel(e).hasListener(t,n)}},{key:"has",value:function(e,t,n){return this.hasListener(e,t,n)}},{key:"hasListeners",value:function(e){return this._getChannel(e).hasListeners()}},{key:"dispatch",value:function(e){for(var t,n=arguments.length,i=new Array(1<n?n-1:0),s=1;s<n;s++)i[s-1]=arguments[s];(t=this._getChannel(e)).dispatch.apply(t,i)}},{key:"emit",value:function(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];this.dispatch.apply(this,[e].concat(n))}},{key:"_getChannel",value:function(e){return this._channels.has(e)||this._channels.set(e,new Channel(e)),this._channels.get(e)}}]),e}(),SubscriptionItem=function(){function t(e){_classCallCheck(this,t),this._params=e,this._isOn=!1,this._assertParams()}return _createClass(t,[{key:"on",value:function(){if(!this._isOn){var e=this._params.channel,t=e.addListener||e.addEventListener||e.on;this._applyMethod(t),this._isOn=!0}}},{key:"off",value:function(){if(this._isOn){var e=this._params.channel,t=e.removeListener||e.removeEventListener||e.off;this._applyMethod(t),this._isOn=!1}}},{key:"_applyMethod",value:function(e){var t=this._params,n=t.channel,i=t.event,s=t.listener,r=i?[i,s]:[s];e.apply(n,r)}},{key:"_assertParams",value:function(){var e=this._params,t=e.channel,n=e.event,i=e.listener;if(!t||"object"!==_typeof(t))throw new Error("Channel should be object");if(n&&"string"!=typeof n)throw new Error("Event should be string");if(!i||"function"!=typeof i)throw new Error("Listener should be function")}}]),t}(),Subscription=function(){function t(e){_classCallCheck(this,t),this._items=e.map(function(e){return new SubscriptionItem(e)})}return _createClass(t,[{key:"on",value:function(){return this._items.forEach(function(e){return e.on()}),this}},{key:"off",value:function(){return this._items.forEach(function(e){return e.off()}),this}}]),t}(),ReactSubscription=function(){function i(e,t){var n;return _classCallCheck(this,i),(n=_possibleConstructorReturn(this,_getPrototypeOf(i).call(this,t)))._overrideComponentCallback(e,"componentDidMount","on"),n._overrideComponentCallback(e,"componentWillUnmount","off"),n}return _inherits(i,Subscription),_createClass(i,[{key:"_overrideComponentCallback",value:function(i,e,s){var r=this,o=i[e];i[e]=function(){if(r[s](),"function"==typeof o){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return o.apply(i,t)}}}}]),i}(),chnl=Channel;chnl.EventEmitter=EventEmitter,chnl.Subscription=Subscription,chnl.ReactSubscription=ReactSubscription,module.exports=chnl;


/***/ }),
/* 170 */
/***/ (function(module, exports) {

/**
 * @typedef {Object} Options
 *
 * @property {Number} [timeout=0] - Timeout in ms after that promise will be rejected automatically.
 * @property {String|Function} [timeoutReason] - Rejection reason for timeout.
 * Promise will be rejected with {@link PromiseController.TimeoutError} and this message. The message can contain
 * placeholder `{timeout}` for actual timeout value. If timeoutReason is a function,
 * it will be evaluated and returned value will be used as message.
 * @property {String|Function} [resetReason] - Rejection reason used when `.reset()` is called while promise is pending.
 * Promise will be rejected with {@link PromiseController.ResetError} and this message. If resetReason is a function,
 * it will be evaluated and returned value will be used as message.
 */

module.exports = {
  timeout: 0,
  timeoutReason: 'Promise rejected by PromiseController timeout {timeout} ms.',
  resetReason: 'Promise rejected by PromiseController reset.',
};


/***/ }),
/* 171 */
/***/ (function(module, exports) {


/**
 * Simple check for Promise.
 * @param {*} p
 * @returns {Boolean}
 * @ignore
 */
exports.isPromise = function (p) {
  return p && typeof p.then === 'function';
};

/**
 * Calls argument if it is function
 * @param {*} value
 * @returns {*}
 * @ignore
 */
exports.tryCall = function (value) {
  return typeof value === 'function' ? value() : value;
};

/**
 * Just `class MyError extends Error` does not work with transpiler.
 * See: https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
 * @ignore
 */
exports.createErrorType = function (name) {
  function E(message) {
    if (!Error.captureStackTrace) {
      this.stack = (new Error()).stack;
    } else {
      Error.captureStackTrace(this, this.constructor);
    }
    this.message = message;
  }
  E.prototype = new Error();
  E.prototype.name = name;
  E.prototype.constructor = E;
  return E;
};


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Class for manage pending requests.
 * @private
 */

const PromiseController = __webpack_require__(120);
const promiseFinally = __webpack_require__(173);

module.exports = class Requests {
  constructor() {
    this._items = new Map();
  }

  /**
   * Creates new request and stores it in the list.
   *
   * @param {String|Number} requestId
   * @param {Function} fn
   * @param {Number} timeout
   * @returns {Promise}
   */
  create(requestId, fn, timeout) {
    this._rejectExistingRequest(requestId);
    return this._createNewRequest(requestId, fn, timeout);
  }

  resolve(requestId, data) {
    if (requestId && this._items.has(requestId)) {
      this._items.get(requestId).resolve(data);
    }
  }

  rejectAll(error) {
    this._items.forEach(request => request.isPending ? request.reject(error) : null);
  }

  _rejectExistingRequest(requestId) {
    const existingRequest = this._items.get(requestId);
    if (existingRequest && existingRequest.isPending) {
      existingRequest.reject(new Error(`WebSocket request is replaced, id: ${requestId}`));
    }
  }

  _createNewRequest(requestId, fn, timeout) {
    const request = new PromiseController({
      timeout,
      timeoutReason: `WebSocket request was rejected by timeout (${timeout} ms). RequestId: ${requestId}`
    });
    this._items.set(requestId, request);
    return promiseFinally(request.call(fn), () => this._deleteRequest(requestId, request));
  }

  _deleteRequest(requestId, request) {
    // this check is important when request was replaced
    if (this._items.get(requestId) === request) {
      this._items.delete(requestId);
    }
  }
};


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(121);
var define = __webpack_require__(122);

var implementation = __webpack_require__(124);
var getPolyfill = __webpack_require__(126);
var shim = __webpack_require__(185);

var bound = bind.call(Function.call, getPolyfill());

define(bound, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = bound;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(123);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(176);

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(123); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// http://www.ecma-international.org/ecma-262/5.1/#sec-9.11

module.exports = __webpack_require__(178);


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (typeof value === 'function' && !value.prototype) { return true; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__(180);

var $species = GetIntrinsic('%Symbol.species%', true);
var $TypeError = GetIntrinsic('%TypeError%');

var IsConstructor = __webpack_require__(183);
var Type = __webpack_require__(125);

// https://ecma-international.org/ecma-262/6.0/#sec-speciesconstructor

module.exports = function SpeciesConstructor(O, defaultConstructor) {
	if (Type(O) !== 'Object') {
		throw new $TypeError('Assertion failed: Type(O) is not Object');
	}
	var C = O.constructor;
	if (typeof C === 'undefined') {
		return defaultConstructor;
	}
	if (Type(C) !== 'Object') {
		throw new $TypeError('O.constructor is not an Object');
	}
	var S = $species ? C[$species] : void 0;
	if (S == null) {
		return defaultConstructor;
	}
	if (IsConstructor(S)) {
		return S;
	}
	throw new $TypeError('no constructor found');
};


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* globals
	Atomics,
	SharedArrayBuffer,
*/

var undefined;

var $TypeError = TypeError;

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () { throw new $TypeError(); };
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(181)();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var generator; // = function * () {};
var generatorFunction = generator ? getProto(generator) : undefined;
var asyncFn; // async function() {};
var asyncFunction = asyncFn ? asyncFn.constructor : undefined;
var asyncGen; // async function * () {};
var asyncGenFunction = asyncGen ? getProto(asyncGen) : undefined;
var asyncGenIterator = asyncGen ? asyncGen() : undefined;

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer.prototype,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%ArrayPrototype%': Array.prototype,
	'%ArrayProto_entries%': Array.prototype.entries,
	'%ArrayProto_forEach%': Array.prototype.forEach,
	'%ArrayProto_keys%': Array.prototype.keys,
	'%ArrayProto_values%': Array.prototype.values,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': asyncFunction,
	'%AsyncFunctionPrototype%': asyncFunction ? asyncFunction.prototype : undefined,
	'%AsyncGenerator%': asyncGen ? getProto(asyncGenIterator) : undefined,
	'%AsyncGeneratorFunction%': asyncGenFunction,
	'%AsyncGeneratorPrototype%': asyncGenFunction ? asyncGenFunction.prototype : undefined,
	'%AsyncIteratorPrototype%': asyncGenIterator && hasSymbols && Symbol.asyncIterator ? asyncGenIterator[Symbol.asyncIterator]() : undefined,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%Boolean%': Boolean,
	'%BooleanPrototype%': Boolean.prototype,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%DataViewPrototype%': typeof DataView === 'undefined' ? undefined : DataView.prototype,
	'%Date%': Date,
	'%DatePrototype%': Date.prototype,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%ErrorPrototype%': Error.prototype,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%EvalErrorPrototype%': EvalError.prototype,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined : Float32Array.prototype,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined : Float64Array.prototype,
	'%Function%': Function,
	'%FunctionPrototype%': Function.prototype,
	'%Generator%': generator ? getProto(generator()) : undefined,
	'%GeneratorFunction%': generatorFunction,
	'%GeneratorPrototype%': generatorFunction ? generatorFunction.prototype : undefined,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined : Int8Array.prototype,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined : Int8Array.prototype,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined : Int32Array.prototype,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%JSONParse%': typeof JSON === 'object' ? JSON.parse : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%MapPrototype%': typeof Map === 'undefined' ? undefined : Map.prototype,
	'%Math%': Math,
	'%Number%': Number,
	'%NumberPrototype%': Number.prototype,
	'%Object%': Object,
	'%ObjectPrototype%': Object.prototype,
	'%ObjProto_toString%': Object.prototype.toString,
	'%ObjProto_valueOf%': Object.prototype.valueOf,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%PromisePrototype%': typeof Promise === 'undefined' ? undefined : Promise.prototype,
	'%PromiseProto_then%': typeof Promise === 'undefined' ? undefined : Promise.prototype.then,
	'%Promise_all%': typeof Promise === 'undefined' ? undefined : Promise.all,
	'%Promise_reject%': typeof Promise === 'undefined' ? undefined : Promise.reject,
	'%Promise_resolve%': typeof Promise === 'undefined' ? undefined : Promise.resolve,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%RangeErrorPrototype%': RangeError.prototype,
	'%ReferenceError%': ReferenceError,
	'%ReferenceErrorPrototype%': ReferenceError.prototype,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%RegExpPrototype%': RegExp.prototype,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SetPrototype%': typeof Set === 'undefined' ? undefined : Set.prototype,
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer.prototype,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%StringPrototype%': String.prototype,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SymbolPrototype%': hasSymbols ? Symbol.prototype : undefined,
	'%SyntaxError%': SyntaxError,
	'%SyntaxErrorPrototype%': SyntaxError.prototype,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined,
	'%TypeError%': $TypeError,
	'%TypeErrorPrototype%': $TypeError.prototype,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array.prototype,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray.prototype,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array.prototype,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array.prototype,
	'%URIError%': URIError,
	'%URIErrorPrototype%': URIError.prototype,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined : WeakMap.prototype,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,
	'%WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined : WeakSet.prototype
};

var bind = __webpack_require__(121);
var $replace = bind.call(Function.call, String.prototype.replace);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : (number || match);
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	if (!(name in INTRINSICS)) {
		throw new SyntaxError('intrinsic ' + name + ' does not exist!');
	}

	// istanbul ignore if // hopefully this is impossible to test :-)
	if (typeof INTRINSICS[name] === 'undefined' && !allowMissing) {
		throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
	}

	return INTRINSICS[name];
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);

	var value = getBaseIntrinsic('%' + (parts.length > 0 ? parts[0] : '') + '%', allowMissing);
	for (var i = 1; i < parts.length; i += 1) {
		if (value != null) {
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, parts[i]);
				if (!allowMissing && !(parts[i] in value)) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				value = desc ? (desc.get || desc.value) : value[parts[i]];
			} else {
				value = value[parts[i]];
			}
		}
	}
	return value;
};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var origSymbol = global.Symbol;
var hasSymbolSham = __webpack_require__(182);

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(39)))

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// https://www.ecma-international.org/ecma-262/6.0/#sec-isconstructor

module.exports = function IsConstructor(argument) {
	return typeof argument === 'function' && !!argument.prototype; // unfortunately there's no way to truly check this without try/catch `new argument`
};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// https://www.ecma-international.org/ecma-262/5.1/#sec-8

module.exports = function Type(x) {
	if (x === null) {
		return 'Null';
	}
	if (typeof x === 'undefined') {
		return 'Undefined';
	}
	if (typeof x === 'function' || typeof x === 'object') {
		return 'Object';
	}
	if (typeof x === 'number') {
		return 'Number';
	}
	if (typeof x === 'boolean') {
		return 'Boolean';
	}
	if (typeof x === 'string') {
		return 'String';
	}
};


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var requirePromise = __webpack_require__(88);

var getPolyfill = __webpack_require__(126);
var define = __webpack_require__(122);

module.exports = function shimPromiseFinally() {
	requirePromise();

	var polyfill = getPolyfill();
	define(Promise.prototype, { 'finally': polyfill }, {
		'finally': function testFinally() {
			return Promise.prototype['finally'] !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),
/* 186 */
/***/ (function(module, exports) {

/**
 * Default options.
 */

/**
 * @typedef {Object} Options
 * @property {Function} [createWebSocket=url => new WebSocket(url)] - custom function for WebSocket construction.
  *
 * @property {Function} [packMessage=noop] - packs message for sending. For example, `data => JSON.stringify(data)`.
 *
 * @property {Function} [unpackMessage=noop] - unpacks received message. For example, `data => JSON.parse(data)`.
 *
 * @property {Function} [attachRequestId=noop] - injects request id into data.
 * For example, `(data, requestId) => Object.assign({requestId}, data)`.
 *
 * @property {Function} [extractRequestId=noop] - extracts request id from received data.
 * For example, `data => data.requestId`.
 *
 * @property {Function} [extractMessageData=event => event.data] - extracts data from event object.
 *
 * @property {Number} timeout=0 - timeout for opening connection and sending messages.
 *
 * @property {Number} connectionTimeout=0 - special timeout for opening connection, by default equals to `timeout`.
 *
 * @defaults
 * please see [options.js](https://github.com/vitalets/websocket-as-promised/blob/master/src/options.js)
 */

module.exports = {
  /**
   * See {@link Options.createWebSocket}
   *
   * @param {String} url
   * @returns {WebSocket}
   */
  createWebSocket: url => new WebSocket(url),

  /**
   * See {@link Options.packMessage}
   *
   * @param {*} data
   * @returns {String|ArrayBuffer|Blob}
   */
  packMessage: null,

  /**
   * See {@link Options.unpackMessage}
   *
   * @param {String|ArrayBuffer|Blob} data
   * @returns {*}
   */
  unpackMessage: null,

  /**
   * See {@link Options.attachRequestId}
   *
   * @param {*} data
   * @param {String|Number} requestId
   * @returns {*}
   */
  attachRequestId: null,

  /**
   * See {@link Options.extractRequestId}
   *
   * @param {*} data
   * @returns {String|Number|undefined}
   */
  extractRequestId: null,

  /**
   * See {@link Options.extractMessageData}
   *
   * @param {*} event
   * @returns {*}
   */
  extractMessageData: event => event.data,

  /**
   * See {@link Options.timeout}
   */
  timeout: 0,

  /**
   * See {@link Options.connectionTimeout}
   */
  connectionTimeout: 0,
};


/***/ }),
/* 187 */
/***/ (function(module, exports) {


exports.throwIf = (condition, message) => {
  if (condition) {
    throw new Error(message);
  }
};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// minimal library entry point.


module.exports = __webpack_require__(191);


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = __webpack_require__(127);
protobuf.BufferWriter = __webpack_require__(200);
protobuf.Reader       = __webpack_require__(128);
protobuf.BufferReader = __webpack_require__(201);

// Utility
protobuf.util         = __webpack_require__(25);
protobuf.rpc          = __webpack_require__(202);
protobuf.roots        = __webpack_require__(204);
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}

// Set up buffer utility according to the environment
configure();


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = LongBits;

var util = __webpack_require__(25);

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = BufferWriter;

// extends Writer
var Writer = __webpack_require__(127);
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = __webpack_require__(25);

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

BufferWriter._configure = function () {
    /**
     * Allocates a buffer of the specified size.
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */
    BufferWriter.alloc = util._Buffer_allocUnsafe;

    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
        ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
          // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
          else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
        };
};


/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else
        buf.utf8Write ? buf.utf8Write(val, pos) : buf.write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

BufferWriter._configure();


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = BufferReader;

// extends Reader
var Reader = __webpack_require__(128);
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = __webpack_require__(25);

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

BufferReader._configure = function () {
    /* istanbul ignore else */
    if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
};


/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice
        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
        : this.buf.toString('utf-8', this.pos, this.pos = Math.min(this.pos + len, this.len))
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

BufferReader._configure();


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = __webpack_require__(203);


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Service;

var util = __webpack_require__(25);

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(15);
var assign = __webpack_require__(206);

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(10);
var fails = __webpack_require__(4);
var objectKeys = __webpack_require__(44);
var getOwnPropertySymbolsModule = __webpack_require__(60);
var propertyIsEnumerableModule = __webpack_require__(59);
var toObject = __webpack_require__(16);
var IndexedObject = __webpack_require__(40);

var nativeAssign = Object.assign;
var defineProperty = Object.defineProperty;

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
module.exports = !nativeAssign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
    }
  } return T;
} : nativeAssign;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(15);
var global = __webpack_require__(2);
var getBuiltIn = __webpack_require__(29);
var IS_PURE = __webpack_require__(28);
var DESCRIPTORS = __webpack_require__(10);
var NATIVE_SYMBOL = __webpack_require__(56);
var USE_SYMBOL_AS_UID = __webpack_require__(94);
var fails = __webpack_require__(4);
var has = __webpack_require__(7);
var isArray = __webpack_require__(118);
var isObject = __webpack_require__(9);
var anObject = __webpack_require__(11);
var toObject = __webpack_require__(16);
var toIndexedObject = __webpack_require__(21);
var toPrimitive = __webpack_require__(41);
var createPropertyDescriptor = __webpack_require__(32);
var nativeObjectCreate = __webpack_require__(43);
var objectKeys = __webpack_require__(44);
var getOwnPropertyNamesModule = __webpack_require__(34);
var getOwnPropertyNamesExternal = __webpack_require__(208);
var getOwnPropertySymbolsModule = __webpack_require__(60);
var getOwnPropertyDescriptorModule = __webpack_require__(30);
var definePropertyModule = __webpack_require__(14);
var propertyIsEnumerableModule = __webpack_require__(59);
var createNonEnumerableProperty = __webpack_require__(13);
var redefine = __webpack_require__(19);
var shared = __webpack_require__(53);
var sharedKey = __webpack_require__(48);
var hiddenKeys = __webpack_require__(47);
var uid = __webpack_require__(42);
var wellKnownSymbol = __webpack_require__(5);
var wrappedWellKnownSymbolModule = __webpack_require__(129);
var defineWellKnownSymbol = __webpack_require__(130);
var setToStringTag = __webpack_require__(35);
var InternalStateModule = __webpack_require__(23);
var $forEach = __webpack_require__(17).forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return Object(it) instanceof $Symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPrimitive(P, true);
  anObject(Attributes);
  if (has(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPrimitive(V, true);
  var enumerable = nativePropertyIsEnumerable.call(this, P);
  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPrimitive(P, true);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
  });
  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
      result.push(AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.github.io/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });

  redefine($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.github.io/ecma262/#sec-symbol.for
  'for': function (key) {
    var string = String(key);
    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = $Symbol(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  },
  // `Symbol.keyFor` method
  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return getOwnPropertySymbolsModule.f(toObject(it));
  }
});

// `JSON.stringify` method behavior with symbols
// https://tc39.github.io/ecma262/#sec-json.stringify
if ($stringify) {
  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
    var symbol = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    return $stringify([symbol]) != '[null]'
      // WebKit converts symbol values to JSON as null
      || $stringify({ a: symbol }) != '{}'
      // V8 throws on boxed symbols
      || $stringify(Object(symbol)) != '{}';
  });

  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
    // eslint-disable-next-line no-unused-vars
    stringify: function stringify(it, replacer, space) {
      var args = [it];
      var index = 1;
      var $replacer;
      while (arguments.length > index) args.push(arguments[index++]);
      $replacer = replacer;
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      if (!isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return $stringify.apply(null, args);
    }
  });
}

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
}
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(21);
var nativeGetOwnPropertyNames = __webpack_require__(34).f;

var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return nativeGetOwnPropertyNames(it);
  } catch (error) {
    return windowNames.slice();
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : nativeGetOwnPropertyNames(toIndexedObject(it));
};


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// `Symbol.prototype.description` getter
// https://tc39.github.io/ecma262/#sec-symbol.prototype.description

var $ = __webpack_require__(15);
var DESCRIPTORS = __webpack_require__(10);
var global = __webpack_require__(2);
var has = __webpack_require__(7);
var isObject = __webpack_require__(9);
var defineProperty = __webpack_require__(14).f;
var copyConstructorProperties = __webpack_require__(99);

var NativeSymbol = global.Symbol;

if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
    var result = this instanceof SymbolWrapper
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString;
  var native = String(NativeSymbol('test')) == 'Symbol(test)';
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  defineProperty(symbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = isObject(this) ? this.valueOf() : this;
      var string = symbolToString.call(symbol);
      if (has(EmptyStringDescriptionStore, symbol)) return '';
      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__(130);

// `Symbol.iterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(15);
var $map = __webpack_require__(17).map;
var arrayMethodHasSpeciesSupport = __webpack_require__(212);
var arrayMethodUsesToLength = __webpack_require__(76);

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
// FF49- issue
var USES_TO_LENGTH = arrayMethodUsesToLength('map');

// `Array.prototype.map` method
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(4);
var wellKnownSymbol = __webpack_require__(5);
var V8_VERSION = __webpack_require__(111);

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fails = __webpack_require__(4);

// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
// so we use an intermediate function.
function RE(s, f) {
  return RegExp(s, f);
}

exports.UNSUPPORTED_Y = fails(function () {
  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
  var re = RE('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

exports.BROKEN_CARET = fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = RE('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(15);
var getOwnPropertyDescriptor = __webpack_require__(30).f;
var toLength = __webpack_require__(8);
var notARegExp = __webpack_require__(132);
var requireObjectCoercible = __webpack_require__(27);
var correctIsRegExpLogic = __webpack_require__(134);
var IS_PURE = __webpack_require__(28);

var nativeEndsWith = ''.endsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.endswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = String(searchString);
    return nativeEndsWith
      ? nativeEndsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__(135).charAt;
var InternalStateModule = __webpack_require__(23);
var defineIterator = __webpack_require__(98);

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__(217);
var isRegExp = __webpack_require__(133);
var anObject = __webpack_require__(11);
var requireObjectCoercible = __webpack_require__(27);
var speciesConstructor = __webpack_require__(31);
var advanceStringIndex = __webpack_require__(218);
var toLength = __webpack_require__(8);
var callRegExpExec = __webpack_require__(219);
var regexpExec = __webpack_require__(52);
var fails = __webpack_require__(4);

var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 0xFFFFFFFF;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

// @@split logic
fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return nativeSplit.call(string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output.length > lim ? output.slice(0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
}, !SUPPORTS_Y);


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(89);
var redefine = __webpack_require__(19);
var fails = __webpack_require__(4);
var wellKnownSymbol = __webpack_require__(5);
var regexpExec = __webpack_require__(52);
var createNonEnumerableProperty = __webpack_require__(13);

var SPECIES = wellKnownSymbol('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  return 'a'.replace(/./, '$0') === '$0';
})();

var REPLACE = wellKnownSymbol('replace');
// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !(
      REPLACE_SUPPORTS_NAMED_GROUPS &&
      REPLACE_KEEPS_$0 &&
      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    )) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    }, {
      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
  }

  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
};


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__(135).charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(20);
var regexpExec = __webpack_require__(52);

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};



/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(2);
var DOMIterables = __webpack_require__(221);
var ArrayIteratorMethods = __webpack_require__(26);
var createNonEnumerableProperty = __webpack_require__(13);
var wellKnownSymbol = __webpack_require__(5);

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}


/***/ }),
/* 221 */
/***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(15);
var $includes = __webpack_require__(45).includes;
var addToUnscopables = __webpack_require__(91);
var arrayMethodUsesToLength = __webpack_require__(76);

var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

// `Array.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true, forced: !USES_TO_LENGTH }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(15);
var notARegExp = __webpack_require__(132);
var requireObjectCoercible = __webpack_require__(27);
var correctIsRegExpLogic = __webpack_require__(134);

// `String.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~String(requireObjectCoercible(this))
      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,